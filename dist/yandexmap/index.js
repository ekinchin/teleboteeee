"use strict";

var _httpRequest = _interopRequireDefault(require("./httpRequest"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const yaApi = {
  getLocation: async city => {
    const geoUrl = new url.URL('https://geocode-maps.yandex.ru');
    geoUrl.pathname = '/1.x/';
    geoUrl.searchParams.append('format', 'json');
    geoUrl.searchParams.append('results', '1');
    geoUrl.searchParams.append('geocode', city);
    const geoLocation = await sendHttpRequest(geoUrl, {}, null, 'GET');
    const geoLocationParse = JSON.parse(geoLocation);
    let cityParse;
    let lon;
    let lat;

    if (geoLocationParse.response.GeoObjectCollection.metaDataProperty.GeocoderResponseMetaData.found !== '0') {
      cityParse = geoLocationParse.response.GeoObjectCollection.featureMember[0].GeoObject.metaDataProperty.GeocoderMetaData.text;
      [lon, lat] = geoLocationParse.response.GeoObjectCollection.featureMember[0].GeoObject.Point.pos.split(' ');
    }

    return [cityParse || city, lon || 0, lat || 0];
  },
  getWeather: async (lon, lat) => {
    const weatherUrl = new url.URL('https://api.weather.yandex.ru');
    weatherUrl.pathname = '/v1/informers';
    weatherUrl.searchParams.append('lang', 'ru_RU');
    weatherUrl.searchParams.append('lat', lat);
    weatherUrl.searchParams.append('lon', lon);
    const weatherHeader = {
      'X-Yandex-API-Key': '40f0e52b-168d-40a4-ba38-0c2bf4d98726'
    };
    let weather = await sendHttpRequest(weatherUrl, weatherHeader, null, 'GET');
    weather = JSON.parse(weather);
    return [weather.fact.temp, weather.fact.feels_like, weather.fact.wind_speed];
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy95YW5kZXhtYXAvaW5kZXguanMiXSwibmFtZXMiOlsieWFBcGkiLCJnZXRMb2NhdGlvbiIsImNpdHkiLCJnZW9VcmwiLCJ1cmwiLCJVUkwiLCJwYXRobmFtZSIsInNlYXJjaFBhcmFtcyIsImFwcGVuZCIsImdlb0xvY2F0aW9uIiwic2VuZEh0dHBSZXF1ZXN0IiwiZ2VvTG9jYXRpb25QYXJzZSIsIkpTT04iLCJwYXJzZSIsImNpdHlQYXJzZSIsImxvbiIsImxhdCIsInJlc3BvbnNlIiwiR2VvT2JqZWN0Q29sbGVjdGlvbiIsIm1ldGFEYXRhUHJvcGVydHkiLCJHZW9jb2RlclJlc3BvbnNlTWV0YURhdGEiLCJmb3VuZCIsImZlYXR1cmVNZW1iZXIiLCJHZW9PYmplY3QiLCJHZW9jb2Rlck1ldGFEYXRhIiwidGV4dCIsIlBvaW50IiwicG9zIiwic3BsaXQiLCJnZXRXZWF0aGVyIiwid2VhdGhlclVybCIsIndlYXRoZXJIZWFkZXIiLCJ3ZWF0aGVyIiwiZmFjdCIsInRlbXAiLCJmZWVsc19saWtlIiwid2luZF9zcGVlZCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7OztBQUVBLE1BQU1BLEtBQUssR0FBRztBQUNaQyxFQUFBQSxXQUFXLEVBQUUsTUFBT0MsSUFBUCxJQUFnQjtBQUMzQixVQUFNQyxNQUFNLEdBQUcsSUFBSUMsR0FBRyxDQUFDQyxHQUFSLENBQVksZ0NBQVosQ0FBZjtBQUNBRixJQUFBQSxNQUFNLENBQUNHLFFBQVAsR0FBa0IsT0FBbEI7QUFDQUgsSUFBQUEsTUFBTSxDQUFDSSxZQUFQLENBQW9CQyxNQUFwQixDQUEyQixRQUEzQixFQUFxQyxNQUFyQztBQUNBTCxJQUFBQSxNQUFNLENBQUNJLFlBQVAsQ0FBb0JDLE1BQXBCLENBQTJCLFNBQTNCLEVBQXNDLEdBQXRDO0FBQ0FMLElBQUFBLE1BQU0sQ0FBQ0ksWUFBUCxDQUFvQkMsTUFBcEIsQ0FBMkIsU0FBM0IsRUFBc0NOLElBQXRDO0FBRUEsVUFBTU8sV0FBVyxHQUFHLE1BQU1DLGVBQWUsQ0FBQ1AsTUFBRCxFQUFTLEVBQVQsRUFBYSxJQUFiLEVBQW1CLEtBQW5CLENBQXpDO0FBQ0EsVUFBTVEsZ0JBQWdCLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXSixXQUFYLENBQXpCO0FBQ0EsUUFBSUssU0FBSjtBQUNBLFFBQUlDLEdBQUo7QUFDQSxRQUFJQyxHQUFKOztBQUNBLFFBQ0VMLGdCQUFnQixDQUFDTSxRQUFqQixDQUEwQkMsbUJBQTFCLENBQ0dDLGdCQURILENBQ29CQyx3QkFEcEIsQ0FFR0MsS0FGSCxLQUVhLEdBSGYsRUFJRTtBQUNBUCxNQUFBQSxTQUFTLEdBQUdILGdCQUFnQixDQUFDTSxRQUFqQixDQUEwQkMsbUJBQTFCLENBQThDSSxhQUE5QyxDQUE0RCxDQUE1RCxFQUNUQyxTQURTLENBQ0NKLGdCQURELENBQ2tCSyxnQkFEbEIsQ0FDbUNDLElBRC9DO0FBRUEsT0FBQ1YsR0FBRCxFQUFNQyxHQUFOLElBQWFMLGdCQUFnQixDQUFDTSxRQUFqQixDQUEwQkMsbUJBQTFCLENBQThDSSxhQUE5QyxDQUE0RCxDQUE1RCxFQUErREMsU0FBL0QsQ0FBeUVHLEtBQXpFLENBQStFQyxHQUEvRSxDQUFtRkMsS0FBbkYsQ0FBeUYsR0FBekYsQ0FBYjtBQUNEOztBQUNELFdBQU8sQ0FBQ2QsU0FBUyxJQUFJWixJQUFkLEVBQW9CYSxHQUFHLElBQUksQ0FBM0IsRUFBOEJDLEdBQUcsSUFBSSxDQUFyQyxDQUFQO0FBQ0QsR0F2Qlc7QUF3QlphLEVBQUFBLFVBQVUsRUFBRSxPQUFPZCxHQUFQLEVBQVlDLEdBQVosS0FBb0I7QUFDOUIsVUFBTWMsVUFBVSxHQUFHLElBQUkxQixHQUFHLENBQUNDLEdBQVIsQ0FBWSwrQkFBWixDQUFuQjtBQUNBeUIsSUFBQUEsVUFBVSxDQUFDeEIsUUFBWCxHQUFzQixlQUF0QjtBQUNBd0IsSUFBQUEsVUFBVSxDQUFDdkIsWUFBWCxDQUF3QkMsTUFBeEIsQ0FBK0IsTUFBL0IsRUFBdUMsT0FBdkM7QUFDQXNCLElBQUFBLFVBQVUsQ0FBQ3ZCLFlBQVgsQ0FBd0JDLE1BQXhCLENBQStCLEtBQS9CLEVBQXNDUSxHQUF0QztBQUNBYyxJQUFBQSxVQUFVLENBQUN2QixZQUFYLENBQXdCQyxNQUF4QixDQUErQixLQUEvQixFQUFzQ08sR0FBdEM7QUFDQSxVQUFNZ0IsYUFBYSxHQUFHO0FBQUUsMEJBQW9CO0FBQXRCLEtBQXRCO0FBRUEsUUFBSUMsT0FBTyxHQUFHLE1BQU10QixlQUFlLENBQUNvQixVQUFELEVBQWFDLGFBQWIsRUFBNEIsSUFBNUIsRUFBa0MsS0FBbEMsQ0FBbkM7QUFDQUMsSUFBQUEsT0FBTyxHQUFHcEIsSUFBSSxDQUFDQyxLQUFMLENBQVdtQixPQUFYLENBQVY7QUFDQSxXQUFPLENBQUNBLE9BQU8sQ0FBQ0MsSUFBUixDQUFhQyxJQUFkLEVBQW9CRixPQUFPLENBQUNDLElBQVIsQ0FBYUUsVUFBakMsRUFBNkNILE9BQU8sQ0FBQ0MsSUFBUixDQUFhRyxVQUExRCxDQUFQO0FBQ0Q7QUFuQ1csQ0FBZCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBodHRwUmVxdWVzdCBmcm9tICcuL2h0dHBSZXF1ZXN0J1xuXG5jb25zdCB5YUFwaSA9IHtcbiAgZ2V0TG9jYXRpb246IGFzeW5jIChjaXR5KSA9PiB7XG4gICAgY29uc3QgZ2VvVXJsID0gbmV3IHVybC5VUkwoJ2h0dHBzOi8vZ2VvY29kZS1tYXBzLnlhbmRleC5ydScpO1xuICAgIGdlb1VybC5wYXRobmFtZSA9ICcvMS54Lyc7XG4gICAgZ2VvVXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoJ2Zvcm1hdCcsICdqc29uJyk7XG4gICAgZ2VvVXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoJ3Jlc3VsdHMnLCAnMScpO1xuICAgIGdlb1VybC5zZWFyY2hQYXJhbXMuYXBwZW5kKCdnZW9jb2RlJywgY2l0eSk7XG5cbiAgICBjb25zdCBnZW9Mb2NhdGlvbiA9IGF3YWl0IHNlbmRIdHRwUmVxdWVzdChnZW9VcmwsIHt9LCBudWxsLCAnR0VUJyk7XG4gICAgY29uc3QgZ2VvTG9jYXRpb25QYXJzZSA9IEpTT04ucGFyc2UoZ2VvTG9jYXRpb24pO1xuICAgIGxldCBjaXR5UGFyc2U7XG4gICAgbGV0IGxvbjtcbiAgICBsZXQgbGF0O1xuICAgIGlmIChcbiAgICAgIGdlb0xvY2F0aW9uUGFyc2UucmVzcG9uc2UuR2VvT2JqZWN0Q29sbGVjdGlvblxuICAgICAgICAubWV0YURhdGFQcm9wZXJ0eS5HZW9jb2RlclJlc3BvbnNlTWV0YURhdGFcbiAgICAgICAgLmZvdW5kICE9PSAnMCdcbiAgICApIHtcbiAgICAgIGNpdHlQYXJzZSA9IGdlb0xvY2F0aW9uUGFyc2UucmVzcG9uc2UuR2VvT2JqZWN0Q29sbGVjdGlvbi5mZWF0dXJlTWVtYmVyWzBdXG4gICAgICAgIC5HZW9PYmplY3QubWV0YURhdGFQcm9wZXJ0eS5HZW9jb2Rlck1ldGFEYXRhLnRleHQ7XG4gICAgICBbbG9uLCBsYXRdID0gZ2VvTG9jYXRpb25QYXJzZS5yZXNwb25zZS5HZW9PYmplY3RDb2xsZWN0aW9uLmZlYXR1cmVNZW1iZXJbMF0uR2VvT2JqZWN0LlBvaW50LnBvcy5zcGxpdCgnICcpO1xuICAgIH1cbiAgICByZXR1cm4gW2NpdHlQYXJzZSB8fCBjaXR5LCBsb24gfHwgMCwgbGF0IHx8IDBdO1xuICB9LFxuICBnZXRXZWF0aGVyOiBhc3luYyAobG9uLCBsYXQpID0+IHtcbiAgICBjb25zdCB3ZWF0aGVyVXJsID0gbmV3IHVybC5VUkwoJ2h0dHBzOi8vYXBpLndlYXRoZXIueWFuZGV4LnJ1Jyk7XG4gICAgd2VhdGhlclVybC5wYXRobmFtZSA9ICcvdjEvaW5mb3JtZXJzJztcbiAgICB3ZWF0aGVyVXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoJ2xhbmcnLCAncnVfUlUnKTtcbiAgICB3ZWF0aGVyVXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoJ2xhdCcsIGxhdCk7XG4gICAgd2VhdGhlclVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKCdsb24nLCBsb24pO1xuICAgIGNvbnN0IHdlYXRoZXJIZWFkZXIgPSB7ICdYLVlhbmRleC1BUEktS2V5JzogJzQwZjBlNTJiLTE2OGQtNDBhNC1iYTM4LTBjMmJmNGQ5ODcyNicgfTtcblxuICAgIGxldCB3ZWF0aGVyID0gYXdhaXQgc2VuZEh0dHBSZXF1ZXN0KHdlYXRoZXJVcmwsIHdlYXRoZXJIZWFkZXIsIG51bGwsICdHRVQnKTtcbiAgICB3ZWF0aGVyID0gSlNPTi5wYXJzZSh3ZWF0aGVyKTtcbiAgICByZXR1cm4gW3dlYXRoZXIuZmFjdC50ZW1wLCB3ZWF0aGVyLmZhY3QuZmVlbHNfbGlrZSwgd2VhdGhlci5mYWN0LndpbmRfc3BlZWRdO1xuICB9LFxufTtcbiJdfQ==