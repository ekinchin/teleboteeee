"use strict";

const yaApi = {
  getLocation: async city => {
    const geoUrl = new url.URL('https://geocode-maps.yandex.ru');
    geoUrl.pathname = '/1.x/';
    geoUrl.searchParams.append('format', 'json');
    geoUrl.searchParams.append('results', '1');
    geoUrl.searchParams.append('geocode', city);
    const geoLocation = await sendHttpRequest(geoUrl, {}, null, 'GET');
    const geoLocationParse = JSON.parse(geoLocation);
    let cityParse;
    let lon;
    let lat;

    if (geoLocationParse.response.GeoObjectCollection.metaDataProperty.GeocoderResponseMetaData.found !== '0') {
      cityParse = geoLocationParse.response.GeoObjectCollection.featureMember[0].GeoObject.metaDataProperty.GeocoderMetaData.text;
      [lon, lat] = geoLocationParse.response.GeoObjectCollection.featureMember[0].GeoObject.Point.pos.split(' ');
    }

    return [cityParse || city, lon || 0, lat || 0];
  },
  getWeather: async (lon, lat) => {
    const weatherUrl = new url.URL('https://api.weather.yandex.ru');
    weatherUrl.pathname = '/v1/informers';
    weatherUrl.searchParams.append('lang', 'ru_RU');
    weatherUrl.searchParams.append('lat', lat);
    weatherUrl.searchParams.append('lon', lon);
    const weatherHeader = {
      'X-Yandex-API-Key': '40f0e52b-168d-40a4-ba38-0c2bf4d98726'
    };
    let weather = await sendHttpRequest(weatherUrl, weatherHeader, null, 'GET');
    weather = JSON.parse(weather);
    return [weather.fact.temp, weather.fact.feels_like, weather.fact.wind_speed];
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy95YW5kZXhtYXAvaW5kZXguanMiXSwibmFtZXMiOlsieWFBcGkiLCJnZXRMb2NhdGlvbiIsImNpdHkiLCJnZW9VcmwiLCJ1cmwiLCJVUkwiLCJwYXRobmFtZSIsInNlYXJjaFBhcmFtcyIsImFwcGVuZCIsImdlb0xvY2F0aW9uIiwic2VuZEh0dHBSZXF1ZXN0IiwiZ2VvTG9jYXRpb25QYXJzZSIsIkpTT04iLCJwYXJzZSIsImNpdHlQYXJzZSIsImxvbiIsImxhdCIsInJlc3BvbnNlIiwiR2VvT2JqZWN0Q29sbGVjdGlvbiIsIm1ldGFEYXRhUHJvcGVydHkiLCJHZW9jb2RlclJlc3BvbnNlTWV0YURhdGEiLCJmb3VuZCIsImZlYXR1cmVNZW1iZXIiLCJHZW9PYmplY3QiLCJHZW9jb2Rlck1ldGFEYXRhIiwidGV4dCIsIlBvaW50IiwicG9zIiwic3BsaXQiLCJnZXRXZWF0aGVyIiwid2VhdGhlclVybCIsIndlYXRoZXJIZWFkZXIiLCJ3ZWF0aGVyIiwiZmFjdCIsInRlbXAiLCJmZWVsc19saWtlIiwid2luZF9zcGVlZCJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNQSxLQUFLLEdBQUc7QUFDWkMsRUFBQUEsV0FBVyxFQUFFLE1BQU9DLElBQVAsSUFBZ0I7QUFDM0IsVUFBTUMsTUFBTSxHQUFHLElBQUlDLEdBQUcsQ0FBQ0MsR0FBUixDQUFZLGdDQUFaLENBQWY7QUFDQUYsSUFBQUEsTUFBTSxDQUFDRyxRQUFQLEdBQWtCLE9BQWxCO0FBQ0FILElBQUFBLE1BQU0sQ0FBQ0ksWUFBUCxDQUFvQkMsTUFBcEIsQ0FBMkIsUUFBM0IsRUFBcUMsTUFBckM7QUFDQUwsSUFBQUEsTUFBTSxDQUFDSSxZQUFQLENBQW9CQyxNQUFwQixDQUEyQixTQUEzQixFQUFzQyxHQUF0QztBQUNBTCxJQUFBQSxNQUFNLENBQUNJLFlBQVAsQ0FBb0JDLE1BQXBCLENBQTJCLFNBQTNCLEVBQXNDTixJQUF0QztBQUVBLFVBQU1PLFdBQVcsR0FBRyxNQUFNQyxlQUFlLENBQUNQLE1BQUQsRUFBUyxFQUFULEVBQWEsSUFBYixFQUFtQixLQUFuQixDQUF6QztBQUNBLFVBQU1RLGdCQUFnQixHQUFHQyxJQUFJLENBQUNDLEtBQUwsQ0FBV0osV0FBWCxDQUF6QjtBQUNBLFFBQUlLLFNBQUo7QUFDQSxRQUFJQyxHQUFKO0FBQ0EsUUFBSUMsR0FBSjs7QUFDQSxRQUNFTCxnQkFBZ0IsQ0FBQ00sUUFBakIsQ0FBMEJDLG1CQUExQixDQUNHQyxnQkFESCxDQUNvQkMsd0JBRHBCLENBRUdDLEtBRkgsS0FFYSxHQUhmLEVBSUU7QUFDQVAsTUFBQUEsU0FBUyxHQUFHSCxnQkFBZ0IsQ0FBQ00sUUFBakIsQ0FBMEJDLG1CQUExQixDQUE4Q0ksYUFBOUMsQ0FBNEQsQ0FBNUQsRUFDVEMsU0FEUyxDQUNDSixnQkFERCxDQUNrQkssZ0JBRGxCLENBQ21DQyxJQUQvQztBQUVBLE9BQUNWLEdBQUQsRUFBTUMsR0FBTixJQUFhTCxnQkFBZ0IsQ0FBQ00sUUFBakIsQ0FBMEJDLG1CQUExQixDQUE4Q0ksYUFBOUMsQ0FBNEQsQ0FBNUQsRUFBK0RDLFNBQS9ELENBQXlFRyxLQUF6RSxDQUErRUMsR0FBL0UsQ0FBbUZDLEtBQW5GLENBQXlGLEdBQXpGLENBQWI7QUFDRDs7QUFDRCxXQUFPLENBQUNkLFNBQVMsSUFBSVosSUFBZCxFQUFvQmEsR0FBRyxJQUFJLENBQTNCLEVBQThCQyxHQUFHLElBQUksQ0FBckMsQ0FBUDtBQUNELEdBdkJXO0FBd0JaYSxFQUFBQSxVQUFVLEVBQUUsT0FBT2QsR0FBUCxFQUFZQyxHQUFaLEtBQW9CO0FBQzlCLFVBQU1jLFVBQVUsR0FBRyxJQUFJMUIsR0FBRyxDQUFDQyxHQUFSLENBQVksK0JBQVosQ0FBbkI7QUFDQXlCLElBQUFBLFVBQVUsQ0FBQ3hCLFFBQVgsR0FBc0IsZUFBdEI7QUFDQXdCLElBQUFBLFVBQVUsQ0FBQ3ZCLFlBQVgsQ0FBd0JDLE1BQXhCLENBQStCLE1BQS9CLEVBQXVDLE9BQXZDO0FBQ0FzQixJQUFBQSxVQUFVLENBQUN2QixZQUFYLENBQXdCQyxNQUF4QixDQUErQixLQUEvQixFQUFzQ1EsR0FBdEM7QUFDQWMsSUFBQUEsVUFBVSxDQUFDdkIsWUFBWCxDQUF3QkMsTUFBeEIsQ0FBK0IsS0FBL0IsRUFBc0NPLEdBQXRDO0FBQ0EsVUFBTWdCLGFBQWEsR0FBRztBQUFFLDBCQUFvQjtBQUF0QixLQUF0QjtBQUVBLFFBQUlDLE9BQU8sR0FBRyxNQUFNdEIsZUFBZSxDQUFDb0IsVUFBRCxFQUFhQyxhQUFiLEVBQTRCLElBQTVCLEVBQWtDLEtBQWxDLENBQW5DO0FBQ0FDLElBQUFBLE9BQU8sR0FBR3BCLElBQUksQ0FBQ0MsS0FBTCxDQUFXbUIsT0FBWCxDQUFWO0FBQ0EsV0FBTyxDQUFDQSxPQUFPLENBQUNDLElBQVIsQ0FBYUMsSUFBZCxFQUFvQkYsT0FBTyxDQUFDQyxJQUFSLENBQWFFLFVBQWpDLEVBQTZDSCxPQUFPLENBQUNDLElBQVIsQ0FBYUcsVUFBMUQsQ0FBUDtBQUNEO0FBbkNXLENBQWQiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB5YUFwaSA9IHtcbiAgZ2V0TG9jYXRpb246IGFzeW5jIChjaXR5KSA9PiB7XG4gICAgY29uc3QgZ2VvVXJsID0gbmV3IHVybC5VUkwoJ2h0dHBzOi8vZ2VvY29kZS1tYXBzLnlhbmRleC5ydScpO1xuICAgIGdlb1VybC5wYXRobmFtZSA9ICcvMS54Lyc7XG4gICAgZ2VvVXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoJ2Zvcm1hdCcsICdqc29uJyk7XG4gICAgZ2VvVXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoJ3Jlc3VsdHMnLCAnMScpO1xuICAgIGdlb1VybC5zZWFyY2hQYXJhbXMuYXBwZW5kKCdnZW9jb2RlJywgY2l0eSk7XG5cbiAgICBjb25zdCBnZW9Mb2NhdGlvbiA9IGF3YWl0IHNlbmRIdHRwUmVxdWVzdChnZW9VcmwsIHt9LCBudWxsLCAnR0VUJyk7XG4gICAgY29uc3QgZ2VvTG9jYXRpb25QYXJzZSA9IEpTT04ucGFyc2UoZ2VvTG9jYXRpb24pO1xuICAgIGxldCBjaXR5UGFyc2U7XG4gICAgbGV0IGxvbjtcbiAgICBsZXQgbGF0O1xuICAgIGlmIChcbiAgICAgIGdlb0xvY2F0aW9uUGFyc2UucmVzcG9uc2UuR2VvT2JqZWN0Q29sbGVjdGlvblxuICAgICAgICAubWV0YURhdGFQcm9wZXJ0eS5HZW9jb2RlclJlc3BvbnNlTWV0YURhdGFcbiAgICAgICAgLmZvdW5kICE9PSAnMCdcbiAgICApIHtcbiAgICAgIGNpdHlQYXJzZSA9IGdlb0xvY2F0aW9uUGFyc2UucmVzcG9uc2UuR2VvT2JqZWN0Q29sbGVjdGlvbi5mZWF0dXJlTWVtYmVyWzBdXG4gICAgICAgIC5HZW9PYmplY3QubWV0YURhdGFQcm9wZXJ0eS5HZW9jb2Rlck1ldGFEYXRhLnRleHQ7XG4gICAgICBbbG9uLCBsYXRdID0gZ2VvTG9jYXRpb25QYXJzZS5yZXNwb25zZS5HZW9PYmplY3RDb2xsZWN0aW9uLmZlYXR1cmVNZW1iZXJbMF0uR2VvT2JqZWN0LlBvaW50LnBvcy5zcGxpdCgnICcpO1xuICAgIH1cbiAgICByZXR1cm4gW2NpdHlQYXJzZSB8fCBjaXR5LCBsb24gfHwgMCwgbGF0IHx8IDBdO1xuICB9LFxuICBnZXRXZWF0aGVyOiBhc3luYyAobG9uLCBsYXQpID0+IHtcbiAgICBjb25zdCB3ZWF0aGVyVXJsID0gbmV3IHVybC5VUkwoJ2h0dHBzOi8vYXBpLndlYXRoZXIueWFuZGV4LnJ1Jyk7XG4gICAgd2VhdGhlclVybC5wYXRobmFtZSA9ICcvdjEvaW5mb3JtZXJzJztcbiAgICB3ZWF0aGVyVXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoJ2xhbmcnLCAncnVfUlUnKTtcbiAgICB3ZWF0aGVyVXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoJ2xhdCcsIGxhdCk7XG4gICAgd2VhdGhlclVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKCdsb24nLCBsb24pO1xuICAgIGNvbnN0IHdlYXRoZXJIZWFkZXIgPSB7ICdYLVlhbmRleC1BUEktS2V5JzogJzQwZjBlNTJiLTE2OGQtNDBhNC1iYTM4LTBjMmJmNGQ5ODcyNicgfTtcblxuICAgIGxldCB3ZWF0aGVyID0gYXdhaXQgc2VuZEh0dHBSZXF1ZXN0KHdlYXRoZXJVcmwsIHdlYXRoZXJIZWFkZXIsIG51bGwsICdHRVQnKTtcbiAgICB3ZWF0aGVyID0gSlNPTi5wYXJzZSh3ZWF0aGVyKTtcbiAgICByZXR1cm4gW3dlYXRoZXIuZmFjdC50ZW1wLCB3ZWF0aGVyLmZhY3QuZmVlbHNfbGlrZSwgd2VhdGhlci5mYWN0LndpbmRfc3BlZWRdO1xuICB9LFxufSJdfQ==