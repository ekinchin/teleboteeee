"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _url = require("url");

var _httpRequest = _interopRequireDefault(require("../httpRequest"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class YandexMap {
  constructor() {
    this.urlMap = new _url.URL('https://geocode-maps.yandex.ru');
    this.urlMap.pathname = '/1.x/';
    this.urlMap.searchParams.append('format', 'json');
    this.urlMap.searchParams.append('results', '1');
  }

  async getLocation(city) {
    this.urlMap.searchParams.append('geocode', city);
    const geoLocation = await (0, _httpRequest.default)(this.urlMap, {}, null, 'GET');
    const geoLocationParse = JSON.parse(geoLocation);
    const cityParse = geoLocationParse.response.GeoObjectCollection.featureMember[0].GeoObject.metaDataProperty.GeocoderMetaData.text || 0;
    const [lon, lat] = geoLocationParse.response.GeoObjectCollection.featureMember[0].GeoObject.Point.pos.split(' ') || [0, 0];
    /*
    if (
      geoLocationParse.response.GeoObjectCollection
        .metaDataProperty.GeocoderResponseMetaData
        .found !== '0'
    ) {
      cityParse = geoLocationParse.response.GeoObjectCollection.featureMember[0]
        .GeoObject.metaDataProperty.GeocoderMetaData.text;
      [lon, lat] = geoLocationParse.response.GeoObjectCollection
        .featureMember[0].GeoObject.Point.pos.split(' ');
    }
    */

    this.urlMap.searchParams.delete('geocode', city);
    return [cityParse, lon, lat];
  }

}

var _default = YandexMap;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy95YW5kZXhtYXAvaW5kZXguanMiXSwibmFtZXMiOlsiWWFuZGV4TWFwIiwiY29uc3RydWN0b3IiLCJ1cmxNYXAiLCJVUkwiLCJwYXRobmFtZSIsInNlYXJjaFBhcmFtcyIsImFwcGVuZCIsImdldExvY2F0aW9uIiwiY2l0eSIsImdlb0xvY2F0aW9uIiwiZ2VvTG9jYXRpb25QYXJzZSIsIkpTT04iLCJwYXJzZSIsImNpdHlQYXJzZSIsInJlc3BvbnNlIiwiR2VvT2JqZWN0Q29sbGVjdGlvbiIsImZlYXR1cmVNZW1iZXIiLCJHZW9PYmplY3QiLCJtZXRhRGF0YVByb3BlcnR5IiwiR2VvY29kZXJNZXRhRGF0YSIsInRleHQiLCJsb24iLCJsYXQiLCJQb2ludCIsInBvcyIsInNwbGl0IiwiZGVsZXRlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7Ozs7QUFFQSxNQUFNQSxTQUFOLENBQWdCO0FBQ2RDLEVBQUFBLFdBQVcsR0FBRztBQUNaLFNBQUtDLE1BQUwsR0FBYyxJQUFJQyxRQUFKLENBQVEsZ0NBQVIsQ0FBZDtBQUNBLFNBQUtELE1BQUwsQ0FBWUUsUUFBWixHQUF1QixPQUF2QjtBQUNBLFNBQUtGLE1BQUwsQ0FBWUcsWUFBWixDQUF5QkMsTUFBekIsQ0FBZ0MsUUFBaEMsRUFBMEMsTUFBMUM7QUFDQSxTQUFLSixNQUFMLENBQVlHLFlBQVosQ0FBeUJDLE1BQXpCLENBQWdDLFNBQWhDLEVBQTJDLEdBQTNDO0FBQ0Q7O0FBRUQsUUFBTUMsV0FBTixDQUFrQkMsSUFBbEIsRUFBd0I7QUFDdEIsU0FBS04sTUFBTCxDQUFZRyxZQUFaLENBQXlCQyxNQUF6QixDQUFnQyxTQUFoQyxFQUEyQ0UsSUFBM0M7QUFDQSxVQUFNQyxXQUFXLEdBQUcsTUFBTSwwQkFBWSxLQUFLUCxNQUFqQixFQUF5QixFQUF6QixFQUE2QixJQUE3QixFQUFtQyxLQUFuQyxDQUExQjtBQUNBLFVBQU1RLGdCQUFnQixHQUFHQyxJQUFJLENBQUNDLEtBQUwsQ0FBV0gsV0FBWCxDQUF6QjtBQUNBLFVBQU1JLFNBQVMsR0FBR0gsZ0JBQWdCLENBQUNJLFFBQWpCLENBQTBCQyxtQkFBMUIsQ0FBOENDLGFBQTlDLENBQTRELENBQTVELEVBQ2ZDLFNBRGUsQ0FDTEMsZ0JBREssQ0FDWUMsZ0JBRFosQ0FDNkJDLElBRDdCLElBQ3FDLENBRHZEO0FBRUEsVUFBTSxDQUFDQyxHQUFELEVBQU1DLEdBQU4sSUFBYVosZ0JBQWdCLENBQUNJLFFBQWpCLENBQTBCQyxtQkFBMUIsQ0FBOENDLGFBQTlDLENBQTRELENBQTVELEVBQ2hCQyxTQURnQixDQUNOTSxLQURNLENBQ0FDLEdBREEsQ0FDSUMsS0FESixDQUNVLEdBRFYsS0FDa0IsQ0FBQyxDQUFELEVBQUksQ0FBSixDQURyQztBQUVBOzs7Ozs7Ozs7Ozs7O0FBWUEsU0FBS3ZCLE1BQUwsQ0FBWUcsWUFBWixDQUF5QnFCLE1BQXpCLENBQWdDLFNBQWhDLEVBQTJDbEIsSUFBM0M7QUFDQSxXQUFPLENBQUNLLFNBQUQsRUFBWVEsR0FBWixFQUFpQkMsR0FBakIsQ0FBUDtBQUNEOztBQTlCYTs7ZUFpQ0R0QixTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVVJMIH0gZnJvbSAndXJsJztcbmltcG9ydCBodHRwUmVxdWVzdCBmcm9tICcuLi9odHRwUmVxdWVzdCc7XG5cbmNsYXNzIFlhbmRleE1hcCB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMudXJsTWFwID0gbmV3IFVSTCgnaHR0cHM6Ly9nZW9jb2RlLW1hcHMueWFuZGV4LnJ1Jyk7XG4gICAgdGhpcy51cmxNYXAucGF0aG5hbWUgPSAnLzEueC8nO1xuICAgIHRoaXMudXJsTWFwLnNlYXJjaFBhcmFtcy5hcHBlbmQoJ2Zvcm1hdCcsICdqc29uJyk7XG4gICAgdGhpcy51cmxNYXAuc2VhcmNoUGFyYW1zLmFwcGVuZCgncmVzdWx0cycsICcxJyk7XG4gIH1cblxuICBhc3luYyBnZXRMb2NhdGlvbihjaXR5KSB7XG4gICAgdGhpcy51cmxNYXAuc2VhcmNoUGFyYW1zLmFwcGVuZCgnZ2VvY29kZScsIGNpdHkpO1xuICAgIGNvbnN0IGdlb0xvY2F0aW9uID0gYXdhaXQgaHR0cFJlcXVlc3QodGhpcy51cmxNYXAsIHt9LCBudWxsLCAnR0VUJyk7XG4gICAgY29uc3QgZ2VvTG9jYXRpb25QYXJzZSA9IEpTT04ucGFyc2UoZ2VvTG9jYXRpb24pO1xuICAgIGNvbnN0IGNpdHlQYXJzZSA9IGdlb0xvY2F0aW9uUGFyc2UucmVzcG9uc2UuR2VvT2JqZWN0Q29sbGVjdGlvbi5mZWF0dXJlTWVtYmVyWzBdXG4gICAgICAuR2VvT2JqZWN0Lm1ldGFEYXRhUHJvcGVydHkuR2VvY29kZXJNZXRhRGF0YS50ZXh0IHx8IDA7XG4gICAgY29uc3QgW2xvbiwgbGF0XSA9IGdlb0xvY2F0aW9uUGFyc2UucmVzcG9uc2UuR2VvT2JqZWN0Q29sbGVjdGlvbi5mZWF0dXJlTWVtYmVyWzBdXG4gICAgICAuR2VvT2JqZWN0LlBvaW50LnBvcy5zcGxpdCgnICcpIHx8IFswLCAwXTtcbiAgICAvKlxuICAgIGlmIChcbiAgICAgIGdlb0xvY2F0aW9uUGFyc2UucmVzcG9uc2UuR2VvT2JqZWN0Q29sbGVjdGlvblxuICAgICAgICAubWV0YURhdGFQcm9wZXJ0eS5HZW9jb2RlclJlc3BvbnNlTWV0YURhdGFcbiAgICAgICAgLmZvdW5kICE9PSAnMCdcbiAgICApIHtcbiAgICAgIGNpdHlQYXJzZSA9IGdlb0xvY2F0aW9uUGFyc2UucmVzcG9uc2UuR2VvT2JqZWN0Q29sbGVjdGlvbi5mZWF0dXJlTWVtYmVyWzBdXG4gICAgICAgIC5HZW9PYmplY3QubWV0YURhdGFQcm9wZXJ0eS5HZW9jb2Rlck1ldGFEYXRhLnRleHQ7XG4gICAgICBbbG9uLCBsYXRdID0gZ2VvTG9jYXRpb25QYXJzZS5yZXNwb25zZS5HZW9PYmplY3RDb2xsZWN0aW9uXG4gICAgICAgIC5mZWF0dXJlTWVtYmVyWzBdLkdlb09iamVjdC5Qb2ludC5wb3Muc3BsaXQoJyAnKTtcbiAgICB9XG4gICAgKi9cbiAgICB0aGlzLnVybE1hcC5zZWFyY2hQYXJhbXMuZGVsZXRlKCdnZW9jb2RlJywgY2l0eSk7XG4gICAgcmV0dXJuIFtjaXR5UGFyc2UsIGxvbiwgbGF0XTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBZYW5kZXhNYXA7XG4iXX0=