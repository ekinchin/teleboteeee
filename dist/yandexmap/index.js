"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _url = require("url");

var _httpRequest = _interopRequireDefault(require("../httpRequest"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class YandexMap {
  constructor() {
    this.urlMap = new _url.URL('https://geocode-maps.yandex.ru');
    this.urlMap.pathname = '/1.x/';
    this.urlMap.searchParams.append('format', 'json');
    this.urlMap.searchParams.append('results', '1');
  }

  async getLocation(city) {
    this.urlMap.searchParams.append('geocode', city);
    const answer = await (0, _httpRequest.default)(this.urlMap, {}, null, 'GET');
    const answerParse = JSON.parse(answer);

    if (geoLocationParse.response.GeoObjectCollection.metaDataProperty.GeocoderResponseMetaData.found !== '0') {
      cityParse = geoLocationParse.response.GeoObjectCollection.featureMember[0].GeoObject.metaDataProperty.GeocoderMetaData.text;
      [lon, lat] = geoLocationParse.response.GeoObjectCollection.featureMember[0].GeoObject.Point.pos.split(' ');
    }

    this.urlMap.searchParams.delete('geocode', city);
    return [cityParse || 0, lon || 0, lat || 0];
  }

}

var _default = YandexMap;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy95YW5kZXhtYXAvaW5kZXguanMiXSwibmFtZXMiOlsiWWFuZGV4TWFwIiwiY29uc3RydWN0b3IiLCJ1cmxNYXAiLCJVUkwiLCJwYXRobmFtZSIsInNlYXJjaFBhcmFtcyIsImFwcGVuZCIsImdldExvY2F0aW9uIiwiY2l0eSIsImFuc3dlciIsImFuc3dlclBhcnNlIiwiSlNPTiIsInBhcnNlIiwiZ2VvTG9jYXRpb25QYXJzZSIsInJlc3BvbnNlIiwiR2VvT2JqZWN0Q29sbGVjdGlvbiIsIm1ldGFEYXRhUHJvcGVydHkiLCJHZW9jb2RlclJlc3BvbnNlTWV0YURhdGEiLCJmb3VuZCIsImNpdHlQYXJzZSIsImZlYXR1cmVNZW1iZXIiLCJHZW9PYmplY3QiLCJHZW9jb2Rlck1ldGFEYXRhIiwidGV4dCIsImxvbiIsImxhdCIsIlBvaW50IiwicG9zIiwic3BsaXQiLCJkZWxldGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7OztBQUVBLE1BQU1BLFNBQU4sQ0FBZ0I7QUFDZEMsRUFBQUEsV0FBVyxHQUFHO0FBQ1osU0FBS0MsTUFBTCxHQUFjLElBQUlDLFFBQUosQ0FBUSxnQ0FBUixDQUFkO0FBQ0EsU0FBS0QsTUFBTCxDQUFZRSxRQUFaLEdBQXVCLE9BQXZCO0FBQ0EsU0FBS0YsTUFBTCxDQUFZRyxZQUFaLENBQXlCQyxNQUF6QixDQUFnQyxRQUFoQyxFQUEwQyxNQUExQztBQUNBLFNBQUtKLE1BQUwsQ0FBWUcsWUFBWixDQUF5QkMsTUFBekIsQ0FBZ0MsU0FBaEMsRUFBMkMsR0FBM0M7QUFDRDs7QUFFRCxRQUFNQyxXQUFOLENBQWtCQyxJQUFsQixFQUF3QjtBQUN0QixTQUFLTixNQUFMLENBQVlHLFlBQVosQ0FBeUJDLE1BQXpCLENBQWdDLFNBQWhDLEVBQTJDRSxJQUEzQztBQUNBLFVBQU1DLE1BQU0sR0FBRyxNQUFNLDBCQUFZLEtBQUtQLE1BQWpCLEVBQXlCLEVBQXpCLEVBQTZCLElBQTdCLEVBQW1DLEtBQW5DLENBQXJCO0FBQ0EsVUFBTVEsV0FBVyxHQUFHQyxJQUFJLENBQUNDLEtBQUwsQ0FBV0gsTUFBWCxDQUFwQjs7QUFDQSxRQUNFSSxnQkFBZ0IsQ0FBQ0MsUUFBakIsQ0FBMEJDLG1CQUExQixDQUNHQyxnQkFESCxDQUNvQkMsd0JBRHBCLENBRUdDLEtBRkgsS0FFYSxHQUhmLEVBSUU7QUFDQUMsTUFBQUEsU0FBUyxHQUFHTixnQkFBZ0IsQ0FBQ0MsUUFBakIsQ0FBMEJDLG1CQUExQixDQUE4Q0ssYUFBOUMsQ0FBNEQsQ0FBNUQsRUFDVEMsU0FEUyxDQUNDTCxnQkFERCxDQUNrQk0sZ0JBRGxCLENBQ21DQyxJQUQvQztBQUVBLE9BQUNDLEdBQUQsRUFBTUMsR0FBTixJQUFhWixnQkFBZ0IsQ0FBQ0MsUUFBakIsQ0FBMEJDLG1CQUExQixDQUNWSyxhQURVLENBQ0ksQ0FESixFQUNPQyxTQURQLENBQ2lCSyxLQURqQixDQUN1QkMsR0FEdkIsQ0FDMkJDLEtBRDNCLENBQ2lDLEdBRGpDLENBQWI7QUFFRDs7QUFFRCxTQUFLMUIsTUFBTCxDQUFZRyxZQUFaLENBQXlCd0IsTUFBekIsQ0FBZ0MsU0FBaEMsRUFBMkNyQixJQUEzQztBQUNBLFdBQU8sQ0FBQ1csU0FBUyxJQUFJLENBQWQsRUFBaUJLLEdBQUcsSUFBSSxDQUF4QixFQUEyQkMsR0FBRyxJQUFJLENBQWxDLENBQVA7QUFDRDs7QUF6QmE7O2VBNEJEekIsUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFVSTCB9IGZyb20gJ3VybCc7XG5pbXBvcnQgaHR0cFJlcXVlc3QgZnJvbSAnLi4vaHR0cFJlcXVlc3QnO1xuXG5jbGFzcyBZYW5kZXhNYXAge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnVybE1hcCA9IG5ldyBVUkwoJ2h0dHBzOi8vZ2VvY29kZS1tYXBzLnlhbmRleC5ydScpO1xuICAgIHRoaXMudXJsTWFwLnBhdGhuYW1lID0gJy8xLngvJztcbiAgICB0aGlzLnVybE1hcC5zZWFyY2hQYXJhbXMuYXBwZW5kKCdmb3JtYXQnLCAnanNvbicpO1xuICAgIHRoaXMudXJsTWFwLnNlYXJjaFBhcmFtcy5hcHBlbmQoJ3Jlc3VsdHMnLCAnMScpO1xuICB9XG5cbiAgYXN5bmMgZ2V0TG9jYXRpb24oY2l0eSkge1xuICAgIHRoaXMudXJsTWFwLnNlYXJjaFBhcmFtcy5hcHBlbmQoJ2dlb2NvZGUnLCBjaXR5KTtcbiAgICBjb25zdCBhbnN3ZXIgPSBhd2FpdCBodHRwUmVxdWVzdCh0aGlzLnVybE1hcCwge30sIG51bGwsICdHRVQnKTtcbiAgICBjb25zdCBhbnN3ZXJQYXJzZSA9IEpTT04ucGFyc2UoYW5zd2VyKTtcbiAgICBpZiAoXG4gICAgICBnZW9Mb2NhdGlvblBhcnNlLnJlc3BvbnNlLkdlb09iamVjdENvbGxlY3Rpb25cbiAgICAgICAgLm1ldGFEYXRhUHJvcGVydHkuR2VvY29kZXJSZXNwb25zZU1ldGFEYXRhXG4gICAgICAgIC5mb3VuZCAhPT0gJzAnXG4gICAgKSB7XG4gICAgICBjaXR5UGFyc2UgPSBnZW9Mb2NhdGlvblBhcnNlLnJlc3BvbnNlLkdlb09iamVjdENvbGxlY3Rpb24uZmVhdHVyZU1lbWJlclswXVxuICAgICAgICAuR2VvT2JqZWN0Lm1ldGFEYXRhUHJvcGVydHkuR2VvY29kZXJNZXRhRGF0YS50ZXh0O1xuICAgICAgW2xvbiwgbGF0XSA9IGdlb0xvY2F0aW9uUGFyc2UucmVzcG9uc2UuR2VvT2JqZWN0Q29sbGVjdGlvblxuICAgICAgICAuZmVhdHVyZU1lbWJlclswXS5HZW9PYmplY3QuUG9pbnQucG9zLnNwbGl0KCcgJyk7XG4gICAgfVxuXG4gICAgdGhpcy51cmxNYXAuc2VhcmNoUGFyYW1zLmRlbGV0ZSgnZ2VvY29kZScsIGNpdHkpO1xuICAgIHJldHVybiBbY2l0eVBhcnNlIHx8IDAsIGxvbiB8fCAwLCBsYXQgfHwgMF07XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgWWFuZGV4TWFwO1xuIl19