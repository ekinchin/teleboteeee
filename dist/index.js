"use strict";

var _http = _interopRequireDefault(require("http"));

var _url = require("url");

var _events = require("events");

var _httpRequest = _interopRequireDefault(require("./httpRequest"));

var _yandexmap = _interopRequireDefault(require("./yandexmap"));

var _yandexweather = _interopRequireDefault(require("./yandexweather"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const eventer = new _events.EventEmitter();
const CMD = {
  setWebHook: 'setWebhook',
  getUpdates: 'getUpdates',
  sendMessage: 'sendMessage'
};
const token = '674082318:AAG4e5AXQu_SbJkYSVji4chwaiggtGrMLBc';
const telegramUrl = new _url.URL('https://api.telegram.org');
telegramUrl.pathname = `bot${token}/${CMD.sendMessage}`;
const map = new _yandexmap.default();
const weather = new _yandexweather.default('40f0e52b-168d-40a4-ba38-0c2bf4d98726');
const botCommands = {
  '/start': {
    descripion: 'Начать работу с ботом',
    handler: async (chatId, data) => {
      const answer = `Hello, ${data.message.from.first_name}`;
      await (0, _httpRequest.default)(telegramUrl, {
        'Content-Type': 'application/json'
      }, {
        method: CMD.sendMessage,
        chat_id: chatId,
        text: answer
      }, 'POST');
    }
  },
  '/help': {
    descripion: 'Помощь',
    handler: async chatId => {
      const answer = '/start - поздороваться\n/weather - текущая погода\n/help - эта справка';
      await (0, _httpRequest.default)(telegramUrl, {
        'Content-Type': 'application/json'
      }, {
        method: CMD.sendMessage,
        chat_id: chatId,
        text: answer
      }, 'POST');
    }
  },
  '/weather': {
    descripion: 'Погода',
    handler: async (chatId, data) => {
      let city = 'Tyumen';
      let lat = 57;
      let lon = 65;
      let answer = '';

      if (data.message.text.split(' ')[1] !== undefined) {
        [city, lon, lat] = await map.getLocation(data.message.text.split(' ')[1]);
      }

      if (lon !== 0 || lat !== 0) {
        const [temp, tempFeel, wind] = await weather.getWeather(lon, lat);
        answer = `Погода в: ${city}\n` + `Текущая температура: ${temp}\n` + `Ощущается как: ${tempFeel}\n` + `Ветер: ${wind}`;
      } else {
        answer = 'Не удалось найти город';
      }

      await (0, _httpRequest.default)(telegramUrl, {
        'Content-Type': 'application/json'
      }, {
        method: CMD.sendMessage,
        chat_id: chatId,
        text: answer
      }, 'POST');
    }
  },
  undefined: {
    descripion: 'Неизвестная команда',
    handler: async chatId => {
      const answer = 'Неизвестная команда, воспользуйтесь справкой /help';
      await (0, _httpRequest.default)(telegramUrl, {
        'Content-Type': 'application/json'
      }, {
        method: CMD.sendMessage,
        chat_id: chatId,
        text: answer
      }, 'POST');
    }
  }
};

function reqParse(data) {
  const dataParse = JSON.parse(data);
  const entities = dataParse.message.entities[0] || '';

  if (entities.type === 'bot_command') {
    switch (dataParse.message.text.split(' ')[0].toLowerCase()) {
      case '/start':
      case '/help':
      case '/weather':
        eventer.emit(dataParse.message.text.split(' ')[0].toLowerCase(), dataParse.message.chat.id, dataParse);
        break;

      default:
        eventer.emit('undefined', dataParse.message.chat.id);
        break;
    }
  }

  return 0;
}

async function Server() {
  const server = _http.default.createServer();

  server.listen(process.env.PORT);
  server.on('request', (request, response) => {
    let requestData = '';
    request.on('data', data => {
      requestData += data;
    });
    request.on('end', () => {
      reqParse(requestData);
      response.end();
    });
  });
}

eventer.on('/weather', botCommands['/weather'].handler);
eventer.on('/start', botCommands['/start'].handler);
eventer.on('/help', botCommands['/help'].handler);
eventer.on('undefined', botCommands.undefined.handler);
const setWebHookUrl = new _url.URL('https://api.telegram.org/');
setWebHookUrl.pathname = `bot${token}${CMD.setWebHook}`;
setWebHookUrl.searchParams.append('url', 'https://teleboteeee.herokuapp.com/');
(0, _httpRequest.default)(setWebHookUrl, {}, null, 'GET').then(Server);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJldmVudGVyIiwiRXZlbnRFbWl0dGVyIiwiQ01EIiwic2V0V2ViSG9vayIsImdldFVwZGF0ZXMiLCJzZW5kTWVzc2FnZSIsInRva2VuIiwidGVsZWdyYW1VcmwiLCJVUkwiLCJwYXRobmFtZSIsIm1hcCIsIllhbmRleE1hcCIsIndlYXRoZXIiLCJZYW5kZXhXZWF0aGVyIiwiYm90Q29tbWFuZHMiLCJkZXNjcmlwaW9uIiwiaGFuZGxlciIsImNoYXRJZCIsImRhdGEiLCJhbnN3ZXIiLCJtZXNzYWdlIiwiZnJvbSIsImZpcnN0X25hbWUiLCJtZXRob2QiLCJjaGF0X2lkIiwidGV4dCIsImNpdHkiLCJsYXQiLCJsb24iLCJzcGxpdCIsInVuZGVmaW5lZCIsImdldExvY2F0aW9uIiwidGVtcCIsInRlbXBGZWVsIiwid2luZCIsImdldFdlYXRoZXIiLCJyZXFQYXJzZSIsImRhdGFQYXJzZSIsIkpTT04iLCJwYXJzZSIsImVudGl0aWVzIiwidHlwZSIsInRvTG93ZXJDYXNlIiwiZW1pdCIsImNoYXQiLCJpZCIsIlNlcnZlciIsInNlcnZlciIsImh0dHAiLCJjcmVhdGVTZXJ2ZXIiLCJsaXN0ZW4iLCJwcm9jZXNzIiwiZW52IiwiUE9SVCIsIm9uIiwicmVxdWVzdCIsInJlc3BvbnNlIiwicmVxdWVzdERhdGEiLCJlbmQiLCJzZXRXZWJIb29rVXJsIiwic2VhcmNoUGFyYW1zIiwiYXBwZW5kIiwidGhlbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUVBLE1BQU1BLE9BQU8sR0FBRyxJQUFJQyxvQkFBSixFQUFoQjtBQUVBLE1BQU1DLEdBQUcsR0FBRztBQUNWQyxFQUFBQSxVQUFVLEVBQUUsWUFERjtBQUVWQyxFQUFBQSxVQUFVLEVBQUUsWUFGRjtBQUdWQyxFQUFBQSxXQUFXLEVBQUU7QUFISCxDQUFaO0FBTUEsTUFBTUMsS0FBSyxHQUFHLCtDQUFkO0FBQ0Es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Z0IsU0FBWixDQUFzQmQsT0FBOUM7QUFHQSxNQUFNMkMsYUFBYSxHQUFHLElBQUluRCxRQUFKLENBQVEsMkJBQVIsQ0FBdEI7QUFDQW1ELGFBQWEsQ0FBQ2xELFFBQWQsR0FBMEIsTUFBS0gsS0FBTSxHQUFFSixHQUFHLENBQUNDLFVBQVcsRUFBdEQ7QUFDQXdELGFBQWEsQ0FBQ0MsWUFBZCxDQUEyQkMsTUFBM0IsQ0FDRSxLQURGLEVBRUUsb0NBRkY7QUFJQSwwQkFBWUYsYUFBWixFQUEyQixFQUEzQixFQUErQixJQUEvQixFQUFxQyxLQUFyQyxFQUE0Q0csSUFBNUMsQ0FBaURoQixNQUFqRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBodHRwIGZyb20gJ2h0dHAnO1xuaW1wb3J0IHsgVVJMIH0gZnJvbSAndXJsJztcbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ2V2ZW50cyc7XG5pbXBvcnQgaHR0cFJlcXVlc3QgZnJvbSAnLi9odHRwUmVxdWVzdCc7XG5pbXBvcnQgWWFuZGV4TWFwIGZyb20gJy4veWFuZGV4bWFwJztcbmltcG9ydCBZYW5kZXhXZWF0aGVyIGZyb20gJy4veWFuZGV4d2VhdGhlcic7XG5cbmNvbnN0IGV2ZW50ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbmNvbnN0IENNRCA9IHtcbiAgc2V0V2ViSG9vazogJ3NldFdlYmhvb2snLFxuICBnZXRVcGRhdGVzOiAnZ2V0VXBkYXRlcycsXG4gIHNlbmRNZXNzYWdlOiAnc2VuZE1lc3NhZ2UnLFxufTtcblxuY29uc3QgdG9rZW4gPSAnNjc0MDgyMzE4OkFBRzRlNUFYUXVfU2JKa1lTVmppNGNod2FpZ2d0R3JNTEJjJztcbmNvbnN0IHRlbGVncmFtVXJsID0gbmV3IFVSTCgnaHR0cHM6Ly9hcGkudGVsZWdyYW0ub3JnJyk7XG50ZWxlZ3JhbVVybC5wYXRobmFtZSA9IGBib3Qke3Rva2VufS8ke0NNRC5zZW5kTWVzc2FnZX1gO1xuXG5jb25zdCBtYXAgPSBuZXcgWWFuZGV4TWFwKCk7XG5jb25zdCB3ZWF0aGVyID0gbmV3IFlhbmRleFdlYXRoZXIoJzQwZjBlNTJiLTE2OGQtNDBhNC1iYTM4LTBjMmJmNGQ5ODcyNicpO1xuXG5jb25zdCBib3RDb21tYW5kcyA9IHtcbiAgJy9zdGFydCc6IHtcbiAgICBkZXNjcmlwaW9uOiAn0J3QsNGH0LDRgtGMINGA0LDQsdC+0YLRgyDRgSDQsdC+0YLQvtC8JyxcbiAgICBoYW5kbGVyOlxuICAgIGFzeW5jIChjaGF0SWQsIGRhdGEpID0+IHtcbiAgICAgIGNvbnN0IGFuc3dlciA9IGBIZWxsbywgJHtkYXRhLm1lc3NhZ2UuZnJvbS5maXJzdF9uYW1lfWA7XG4gICAgICBhd2FpdCBodHRwUmVxdWVzdCh0ZWxlZ3JhbVVybCwgeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sIHsgbWV0aG9kOiBDTUQuc2VuZE1lc3NhZ2UsIGNoYXRfaWQ6IGNoYXRJZCwgdGV4dDogYW5zd2VyIH0sICdQT1NUJyk7XG4gICAgfSxcbiAgfSxcbiAgJy9oZWxwJzoge1xuICAgIGRlc2NyaXBpb246ICfQn9C+0LzQvtGJ0YwnLFxuICAgIGhhbmRsZXI6XG4gICAgYXN5bmMgKGNoYXRJZCkgPT4ge1xuICAgICAgY29uc3QgYW5zd2VyID0gJy9zdGFydCAtINC/0L7Qt9C00L7RgNC+0LLQsNGC0YzRgdGPXFxuL3dlYXRoZXIgLSDRgtC10LrRg9GJ0LDRjyDQv9C+0LPQvtC00LBcXG4vaGVscCAtINGN0YLQsCDRgdC/0YDQsNCy0LrQsCc7XG4gICAgICBhd2FpdCBodHRwUmVxdWVzdCh0ZWxlZ3JhbVVybCwgeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sIHsgbWV0aG9kOiBDTUQuc2VuZE1lc3NhZ2UsIGNoYXRfaWQ6IGNoYXRJZCwgdGV4dDogYW5zd2VyIH0sICdQT1NUJyk7XG4gICAgfSxcbiAgfSxcbiAgJy93ZWF0aGVyJzoge1xuICAgIGRlc2NyaXBpb246ICfQn9C+0LPQvtC00LAnLFxuICAgIGhhbmRsZXI6XG4gICAgYXN5bmMgKGNoYXRJZCwgZGF0YSkgPT4ge1xuICAgICAgbGV0IGNpdHkgPSAnVHl1bWVuJztcbiAgICAgIGxldCBsYXQgPSA1NztcbiAgICAgIGxldCBsb24gPSA2NTtcbiAgICAgIGxldCBhbnN3ZXIgPSAnJztcbiAgICAgIGlmIChkYXRhLm1lc3NhZ2UudGV4dC5zcGxpdCgnICcpWzFdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgW2NpdHksIGxvbiwgbGF0XSA9IGF3YWl0IG1hcC5nZXRMb2NhdGlvbihkYXRhLm1lc3NhZ2UudGV4dC5zcGxpdCgnICcpWzFdKTtcbiAgICAgIH1cbiAgICAgIGlmIChsb24gIT09IDAgfHwgbGF0ICE9PSAwKSB7XG4gICAgICAgIGNvbnN0IFt0ZW1wLCB0ZW1wRmVlbCwgd2luZF0gPSBhd2FpdCB3ZWF0aGVyLmdldFdlYXRoZXIobG9uLCBsYXQpO1xuICAgICAgICBhbnN3ZXIgPSBg0J/QvtCz0L7QtNCwINCyOiAke2NpdHl9XFxuYFxuICAgICAgICArIGDQotC10LrRg9GJ0LDRjyDRgtC10LzQv9C10YDQsNGC0YPRgNCwOiAke3RlbXB9XFxuYFxuICAgICAgICArIGDQntGJ0YPRidCw0LXRgtGB0Y8g0LrQsNC6OiAke3RlbXBGZWVsfVxcbmBcbiAgICAgICAgKyBg0JLQtdGC0LXRgDogJHt3aW5kfWA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhbnN3ZXIgPSAn0J3QtSDRg9C00LDQu9C+0YHRjCDQvdCw0LnRgtC4INCz0L7RgNC+0LQnO1xuICAgICAgfVxuICAgICAgYXdhaXQgaHR0cFJlcXVlc3QodGVsZWdyYW1VcmwsIHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LCB7IG1ldGhvZDogQ01ELnNlbmRNZXNzYWdlLCBjaGF0X2lkOiBjaGF0SWQsIHRleHQ6IGFuc3dlciB9LCAnUE9TVCcpO1xuICAgIH0sXG4gIH0sXG4gIHVuZGVmaW5lZDoge1xuICAgIGRlc2NyaXBpb246ICfQndC10LjQt9Cy0LXRgdGC0L3QsNGPINC60L7QvNCw0L3QtNCwJyxcbiAgICBoYW5kbGVyOlxuICAgIGFzeW5jIChjaGF0SWQpID0+IHtcbiAgICAgIGNvbnN0IGFuc3dlciA9ICfQndC10LjQt9Cy0LXRgdGC0L3QsNGPINC60L7QvNCw0L3QtNCwLCDQstC+0YHQv9C+0LvRjNC30YPQudGC0LXRgdGMINGB0L/RgNCw0LLQutC+0LkgL2hlbHAnO1xuICAgICAgYXdhaXQgaHR0cFJlcXVlc3QodGVsZWdyYW1VcmwsIHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LCB7IG1ldGhvZDogQ01ELnNlbmRNZXNzYWdlLCBjaGF0X2lkOiBjaGF0SWQsIHRleHQ6IGFuc3dlciB9LCAnUE9TVCcpO1xuICAgIH0sXG4gIH0sXG59O1xuXG5mdW5jdGlvbiByZXFQYXJzZShkYXRhKSB7XG4gIGNvbnN0IGRhdGFQYXJzZSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gIGNvbnN0IGVudGl0aWVzID0gZGF0YVBhcnNlLm1lc3NhZ2UuZW50aXRpZXNbMF0gfHwgJyc7XG4gIGlmIChlbnRpdGllcy50eXBlID09PSAnYm90X2NvbW1hbmQnKSB7XG4gICAgc3dpdGNoIChkYXRhUGFyc2UubWVzc2FnZS50ZXh0LnNwbGl0KCcgJylbMF0udG9Mb3dlckNhc2UoKSkge1xuICAgICAgY2FzZSAnL3N0YXJ0JzpcbiAgICAgIGNhc2UgJy9oZWxwJzpcbiAgICAgIGNhc2UgJy93ZWF0aGVyJzpcbiAgICAgICAgZXZlbnRlci5lbWl0KGRhdGFQYXJzZS5tZXNzYWdlLnRleHQuc3BsaXQoJyAnKVswXS50b0xvd2VyQ2FzZSgpLCBkYXRhUGFyc2UubWVzc2FnZS5jaGF0LmlkLCBkYXRhUGFyc2UpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGV2ZW50ZXIuZW1pdCgndW5kZWZpbmVkJywgZGF0YVBhcnNlLm1lc3NhZ2UuY2hhdC5pZCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gMDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gU2VydmVyKCkge1xuICBjb25zdCBzZXJ2ZXIgPSBodHRwLmNyZWF0ZVNlcnZlcigpO1xuICBzZXJ2ZXIubGlzdGVuKHByb2Nlc3MuZW52LlBPUlQpO1xuICBzZXJ2ZXIub24oJ3JlcXVlc3QnLCAocmVxdWVzdCwgcmVzcG9uc2UpID0+IHtcbiAgICBsZXQgcmVxdWVzdERhdGEgPSAnJztcbiAgICByZXF1ZXN0Lm9uKCdkYXRhJywgKGRhdGEpID0+IHtcbiAgICAgIHJlcXVlc3REYXRhICs9IGRhdGE7XG4gICAgfSk7XG4gICAgcmVxdWVzdC5vbignZW5kJywgKCkgPT4ge1xuICAgICAgcmVxUGFyc2UocmVxdWVzdERhdGEpO1xuICAgICAgcmVzcG9uc2UuZW5kKCk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5ldmVudGVyLm9uKCcvd2VhdGhlcicsIGJvdENvbW1hbmRzWycvd2VhdGhlciddLmhhbmRsZXIpO1xuZXZlbnRlci5vbignL3N0YXJ0JywgYm90Q29tbWFuZHNbJy9zdGFydCddLmhhbmRsZXIpO1xuZXZlbnRlci5vbignL2hlbHAnLCBib3RDb21tYW5kc1snL2hlbHAnXS5oYW5kbGVyKTtcbmV2ZW50ZXIub24oJ3VuZGVmaW5lZCcsIGJvdENvbW1hbmRzLnVuZGVmaW5lZC5oYW5kbGVyKTtcblxuXG5jb25zdCBzZXRXZWJIb29rVXJsID0gbmV3IFVSTCgnaHR0cHM6Ly9hcGkudGVsZWdyYW0ub3JnLycpO1xuc2V0V2ViSG9va1VybC5wYXRobmFtZSA9IGBib3Qke3Rva2VufSR7Q01ELnNldFdlYkhvb2t9YDtcbnNldFdlYkhvb2tVcmwuc2VhcmNoUGFyYW1zLmFwcGVuZChcbiAgJ3VybCcsXG4gICdodHRwczovL3RlbGVib3RlZWVlLmhlcm9rdWFwcC5jb20vJyxcbik7XG5odHRwUmVxdWVzdChzZXRXZWJIb29rVXJsLCB7fSwgbnVsbCwgJ0dFVCcpLnRoZW4oU2VydmVyKTtcbiJdfQ==