"use strict";

var _http = _interopRequireDefault(require("http"));

var _url = require("url");

var _events = require("events");

var _httpRequest = _interopRequireDefault(require("./httpRequest"));

var _yandexmap = _interopRequireDefault(require("./yandexmap"));

var _yandexweather = _interopRequireDefault(require("./yandexweather"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const eventer = new _events.EventEmitter();
const map = new _yandexmap.default();
const weather = new _yandexweather.default('40f0e52b-168d-40a4-ba38-0c2bf4d98726');
const CMD = {
  setWebHook: 'setWebhook',
  getUpdates: 'getUpdates',
  sendMessage: 'sendMessage'
};
const token = '674082318:AAG4e5AXQu_SbJkYSVji4chwaiggtGrMLBc';
const telegramUrl = new _url.URL('https://api.telegram.org');
telegramUrl.pathname = `bot${token}/${CMD.sendMessage}`;
const botCommands = {
  '/start': {
    descripion: 'Начать работу с ботом',
    handler: async (chatId, data) => {
      const answer = `Hello, ${data.message.from.first_name}`;
      await (0, _httpRequest.default)(telegramUrl, {
        'Content-Type': 'application/json'
      }, {
        method: CMD.sendMessage,
        chat_id: chatId,
        text: answer
      }, 'POST');
    }
  },
  '/help': {
    descripion: 'Помощь',
    handler: async chatId => {
      const answer = '/start - поздороваться\n/weather - текущая погода\n/help - эта справка';
      await (0, _httpRequest.default)(telegramUrl, {
        'Content-Type': 'application/json'
      }, {
        method: CMD.sendMessage,
        chat_id: chatId,
        text: answer
      }, 'POST');
    }
  },
  '/weather': {
    descripion: 'Погода',
    handler: async (chatId, data) => {
      let city = 'Tyumen';
      let lat = 57;
      let lon = 65;
      let answer = '';

      if (data.message.text.split(' ')[1] !== undefined) {
        [city, lon, lat] = await map.getLocation(data.message.text.split(' ')[1]);
      }

      if (lon !== 0 || lat !== 0) {
        const [temp, tempFeel, wind] = await weather.getWeather(lon, lat);
        answer = `Погода в: ${city}\n` + `Текущая температура: ${temp}\n` + `Ощущается как: ${tempFeel}\n` + `Ветер: ${wind}`;
      } else {
        answer = 'Не удалось найти город';
      }

      await (0, _httpRequest.default)(telegramUrl, {
        'Content-Type': 'application/json'
      }, {
        method: CMD.sendMessage,
        chat_id: chatId,
        text: answer
      }, 'POST');
    }
  },
  undefined: {
    descripion: 'Неизвестная команда',
    handler: async chatId => {
      const answer = 'Неизвестная команда, воспользуйтесь справкой /help';
      await (0, _httpRequest.default)(telegramUrl, {
        'Content-Type': 'application/json'
      }, {
        method: CMD.sendMessage,
        chat_id: chatId,
        text: answer
      }, 'POST');
    }
  }
};

function reqParse(data) {
  const dataParse = JSON.parse(data);
  const entities = dataParse.message.entities[0] || '';

  if (entities.type === 'bot_command') {
    switch (dataParse.message.text.split(' ')[0].toLowerCase()) {
      case '/start':
      case '/help':
      case '/weather':
        eventer.emit(dataParse.message.text.split(' ')[0].toLowerCase(), dataParse.message.chat.id, dataParse);
        break;

      default:
        eventer.emit('undefined', dataParse.message.chat.id);
        break;
    }
  }

  return 0;
}

async function Server() {
  const server = _http.default.createServer();

  server.listen(process.env.PORT);
  server.on('request', (request, response) => {
    let requestData = '';
    request.on('data', data => {
      requestData += data;
    });
    request.on('end', () => {
      reqParse(requestData);
      response.end();
    });
  });
}

eventer.on('/weather', botCommands['/weather'].handler);
eventer.on('/start', botCommands['/start'].handler);
eventer.on('/help', botCommands['/help'].handler);
eventer.on('undefined', botCommands.undefined.handler);
const setWebHookUrl = new _url.URL('https://api.telegram.org/');
setWebHookUrl.pathname = `bot${token}${CMD.setWebHook}`;
setWebHookUrl.searchParams.append('url', 'https://teleboteeee.herokuapp.com/');
(0, _httpRequest.default)(setWebHookUrl, {}, null, 'GET').then(Server);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,