"use strict";

var _http = _interopRequireDefault(require("http"));

var _url = require("url");

var _events = require("events");

var _httpRequest = _interopRequireDefault(require("./httpRequest"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import { https } from 'https';
const eventer = new _events.EventEmitter();
const CMD = {
  setWebHook: 'setWebhook',
  getUpdates: 'getUpdates',
  sendMessage: 'sendMessage'
};
const token = '674082318:AAG4e5AXQu_SbJkYSVji4chwaiggtGrMLBc';
const telegramUrl = new _url.URL('https://api.telegram.org');
telegramUrl.pathname = `bot${token}/${CMD.sendMessage}`;
/*
async function sendHttpRequest_(urlReq, headers, dataReq, method) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: urlReq.hostname,
      port: 443,
      path: urlReq.pathname + urlReq.search,
    };
    options.method = method;
    options.headers = headers;

    const req = https.request(options, (res) => {
      let answer = '';
      res.on('data', (dataRes) => {
        answer += dataRes;
      });
      res.on('end', () => {
        resolve(answer);
      });
      res.on('error', () => {
        reject(answer);
      });
    });
    if (options.headers !== undefined) {
      if ('Content-Type' in options.headers) {
        if (options.headers['Content-Type'] === 'application/json') {
          req.write(JSON.stringify(dataReq));
        }
      }
    }
    req.end();
  });
}
*/

const yaApi = {
  getLocation: async city => {
    const geoUrl = new _url.URL('https://geocode-maps.yandex.ru');
    geoUrl.pathname = '/1.x/';
    geoUrl.searchParams.append('format', 'json');
    geoUrl.searchParams.append('results', '1');
    geoUrl.searchParams.append('geocode', city);
    const geoLocation = await (0, _httpRequest.default)(geoUrl, {}, null, 'GET');
    const geoLocationParse = JSON.parse(geoLocation);
    let cityParse;
    let lon;
    let lat;

    if (geoLocationParse.response.GeoObjectCollection.metaDataProperty.GeocoderResponseMetaData.found !== '0') {
      cityParse = geoLocationParse.response.GeoObjectCollection.featureMember[0].GeoObject.metaDataProperty.GeocoderMetaData.text;
      [lon, lat] = geoLocationParse.response.GeoObjectCollection.featureMember[0].GeoObject.Point.pos.split(' ');
    }

    return [cityParse || city, lon || 0, lat || 0];
  },
  getWeather: async (lon, lat) => {
    const weatherUrl = new _url.URL('https://api.weather.yandex.ru');
    weatherUrl.pathname = '/v1/informers';
    weatherUrl.searchParams.append('lang', 'ru_RU');
    weatherUrl.searchParams.append('lat', lat);
    weatherUrl.searchParams.append('lon', lon);
    const weatherHeader = {
      'X-Yandex-API-Key': '40f0e52b-168d-40a4-ba38-0c2bf4d98726'
    };
    let weather = await (0, _httpRequest.default)(weatherUrl, weatherHeader, null, 'GET');
    weather = JSON.parse(weather);
    return [weather.fact.temp, weather.fact.feels_like, weather.fact.wind_speed];
  }
};
const botCommands = {
  '/start': {
    descripion: 'Начать работу с ботом',
    handler: async (chatId, data) => {
      const answer = `Hello, ${data.message.from.first_name}`;
      await (0, _httpRequest.default)(telegramUrl, {
        'Content-Type': 'application/json'
      }, {
        method: CMD.sendMessage,
        chat_id: chatId,
        text: answer
      }, 'POST');
    }
  },
  '/help': {
    descripion: 'Помощь',
    handler: async chatId => {
      const answer = '/start - поздороваться\n/weather - текущая погода\n/help - эта справка';
      await (0, _httpRequest.default)(telegramUrl, {
        'Content-Type': 'application/json'
      }, {
        method: CMD.sendMessage,
        chat_id: chatId,
        text: answer
      }, 'POST');
    }
  },
  '/weather': {
    descripion: 'Погода',
    handler: async (chatId, data) => {
      let city = 'Tyumen';
      let lat = 57;
      let lon = 65;
      let answer = '';

      if (data.message.text.split(' ')[1] !== undefined) {
        [city, lon, lat] = await yaApi.getLocation(data.message.text.split(' ')[1]);
      }

      if (lon !== 0 || lat !== 0) {
        const [temp, tempFeel, wind] = await yaApi.getWeather(lon, lat);
        answer = `Погода в: ${city}\n` + `Текущая температура: ${temp}\n` + `Ощущается как: ${tempFeel}\n` + `Ветер: ${wind}`;
      } else {
        answer = 'Не удалось найти город';
      }

      await (0, _httpRequest.default)(telegramUrl, {
        'Content-Type': 'application/json'
      }, {
        method: CMD.sendMessage,
        chat_id: chatId,
        text: answer
      }, 'POST');
    }
  },
  undefined: {
    descripion: 'Неизвестная команда',
    handler: async chatId => {
      const answer = 'Неизвестная команда, воспользуйтесь справкой /help';
      await (0, _httpRequest.default)(telegramUrl, {
        'Content-Type': 'application/json'
      }, {
        method: CMD.sendMessage,
        chat_id: chatId,
        text: answer
      }, 'POST');
    }
  }
};

function reqParse(data) {
  const dataParse = JSON.parse(data);
  const entities = dataParse.message.entities[0] || '';

  if (entities.type === 'bot_command') {
    switch (dataParse.message.text.split(' ')[0].toLowerCase()) {
      case '/start':
      case '/help':
      case '/weather':
        eventer.emit(dataParse.message.text.split(' ')[0].toLowerCase(), dataParse.message.chat.id, dataParse);
        break;

      default:
        eventer.emit('undefined', dataParse.message.chat.id);
        break;
    }
  }

  return 0;
}

async function Server() {
  console.log(_http.default);

  const server = _http.default.createServer();

  server.listen(process.env.PORT);
  server.on('request', (request, response) => {
    let requestData = '';
    request.on('data', data => {
      requestData += data;
    });
    request.on('end', () => {
      reqParse(requestData);
      response.end();
    });
  });
}

eventer.on('/weather', botCommands['/weather'].handler);
eventer.on('/start', botCommands['/start'].handler);
eventer.on('/help', botCommands['/help'].handler);
eventer.on('undefined', botCommands.undefined.handler);
const setWebHookUrl = new _url.URL('https://api.telegram.org/');
setWebHookUrl.pathname = `bot${token}${CMD.setWebHook}`;
setWebHookUrl.searchParams.append('url', 'https://teleboteeee.herokuapp.com/');
(0, _httpRequest.default)(setWebHookUrl, {}, null, 'GET').then(Server);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJldmVudGVyIiwiRXZlbnRFbWl0dGVyIiwiQ01EIiwic2V0V2ViSG9vayIsImdldFVwZGF0ZXMiLCJzZW5kTWVzc2FnZSIsInRva2VuIiwidGVsZWdyYW1VcmwiLCJVUkwiLCJwYXRobmFtZSIsInlhQXBpIiwiZ2V0TG9jYXRpb24iLCJjaXR5IiwiZ2VvVXJsIiwic2VhcmNoUGFyYW1zIiwiYXBwZW5kIiwiZ2VvTG9jYXRpb24iLCJnZW9Mb2NhdGlvblBhcnNlIiwiSlNPTiIsInBhcnNlIiwiY2l0eVBhcnNlIiwibG9uIiwibGF0IiwicmVzcG9uc2UiLCJHZW9PYmplY3RDb2xsZWN0aW9uIiwibWV0YURhdGFQcm9wZXJ0eSIsIkdlb2NvZGVyUmVzcG9uc2VNZXRhRGF0YSIsImZvdW5kIiwiZmVhdHVyZU1lbWJlciIsIkdlb09iamVjdCIsIkdlb2NvZGVyTWV0YURhdGEiLCJ0ZXh0IiwiUG9pbnQiLCJwb3MiLCJzcGxpdCIsImdldFdlYXRoZXIiLCJ3ZWF0aGVyVXJsIiwid2VhdGhlckhlYWRlciIsIndlYXRoZXIiLCJmYWN0IiwidGVtcCIsImZlZWxzX2xpa2UiLCJ3aW5kX3NwZWVkIiwiYm90Q29tbWFuZHMiLCJkZXNjcmlwaW9uIiwiaGFuZGxlciIsImNoYXRJZCIsImRhdGEiLCJhbnN3ZXIiLCJtZXNzYWdlIiwiZnJvbSIsImZpcnN0X25hbWUiLCJtZXRob2QiLCJjaGF0X2lkIiwidW5kZWZpbmVkIiwidGVtcEZlZWwiLCJ3aW5kIiwicmVxUGFyc2UiLCJkYXRhUGFyc2UiLCJlbnRpdGllcyIsInR5cGUiLCJ0b0xvd2VyQ2FzZSIsImVtaXQiLCJjaGF0IiwiaWQiLCJTZXJ2ZXIiLCJjb25zb2xlIiwibG9nIiwiaHR0cCIsInNlcnZlciIsImNyZWF0ZVNlcnZlciIsImxpc3RlbiIsInByb2Nlc3MiLCJlbnYiLCJQT1JUIiwib24iLCJyZXF1ZXN0IiwicmVxdWVzdERhdGEiLCJlbmQiLCJzZXRXZWJIb29r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QkUsT0FBM0M7QUFDQTdDLE9BQU8sQ0FBQzJFLEVBQVIsQ0FBVyxPQUFYLEVBQW9CaEMsV0FBVyxDQUFDLE9BQUQsQ0FBWCxDQUFxQkUsT0FBekM7QUFDQTdDLE9BQU8sQ0FBQzJFLEVBQVIsQ0FBVyxXQUFYLEVBQXdCaEMsV0FBVyxDQUFDVyxTQUFaLENBQXNCVCxPQUE5QztBQUdBLE1BQU1rQyxhQUFhLEdBQUcsSUFBSXZFLFFBQUosQ0FBUSwyQkFBUixDQUF0QjtBQUNBdUUsYUFBYSxDQUFDdEUsUUFBZCxHQUEwQixNQUFLSCxLQUFNLEdBQUVKLEdBQUcsQ0FBQ0MsVUFBVyxFQUF0RDtBQUNBNEUsYUFBYSxDQUFDakUsWUFBZCxDQUEyQkMsTUFBM0IsQ0FDRSxLQURGLEVBRUUsb0NBRkY7QUFJQSwwQkFBZ0JnRSxhQUFoQixFQUErQixFQUEvQixFQUFtQyxJQUFuQyxFQUF5QyxLQUF6QyxFQUFnREMsSUFBaEQsQ0FBcURmLE1BQXJEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGh0dHAgZnJvbSAnaHR0cCc7XG4vLyBpbXBvcnQgeyBodHRwcyB9IGZyb20gJ2h0dHBzJztcbmltcG9ydCB7IFVSTCB9IGZyb20gJ3VybCc7XG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdldmVudHMnO1xuaW1wb3J0IHNlbmRIdHRwUmVxdWVzdCBmcm9tICcuL2h0dHBSZXF1ZXN0JztcblxuY29uc3QgZXZlbnRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuY29uc3QgQ01EID0ge1xuICBzZXRXZWJIb29rOiAnc2V0V2ViaG9vaycsXG4gIGdldFVwZGF0ZXM6ICdnZXRVcGRhdGVzJyxcbiAgc2VuZE1lc3NhZ2U6ICdzZW5kTWVzc2FnZScsXG59O1xuXG5jb25zdCB0b2tlbiA9ICc2NzQwODIzMTg6QUFHNGU1QVhRdV9TYkprWVNWamk0Y2h3YWlnZ3RHck1MQmMnO1xuY29uc3QgdGVsZWdyYW1VcmwgPSBuZXcgVVJMKCdodHRwczovL2FwaS50ZWxlZ3JhbS5vcmcnKTtcbnRlbGVncmFtVXJsLnBhdGhuYW1lID0gYGJvdCR7dG9rZW59LyR7Q01ELnNlbmRNZXNzYWdlfWA7XG5cbi8qXG5hc3luYyBmdW5jdGlvbiBzZW5kSHR0cFJlcXVlc3RfKHVybFJlcSwgaGVhZGVycywgZGF0YVJlcSwgbWV0aG9kKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIGhvc3RuYW1lOiB1cmxSZXEuaG9zdG5hbWUsXG4gICAgICBwb3J0OiA0NDMsXG4gICAgICBwYXRoOiB1cmxSZXEucGF0aG5hbWUgKyB1cmxSZXEuc2VhcmNoLFxuICAgIH07XG4gICAgb3B0aW9ucy5tZXRob2QgPSBtZXRob2Q7XG4gICAgb3B0aW9ucy5oZWFkZXJzID0gaGVhZGVycztcblxuICAgIGNvbnN0IHJlcSA9IGh0dHBzLnJlcXVlc3Qob3B0aW9ucywgKHJlcykgPT4ge1xuICAgICAgbGV0IGFuc3dlciA9ICcnO1xuICAgICAgcmVzLm9uKCdkYXRhJywgKGRhdGFSZXMpID0+IHtcbiAgICAgICAgYW5zd2VyICs9IGRhdGFSZXM7XG4gICAgICB9KTtcbiAgICAgIHJlcy5vbignZW5kJywgKCkgPT4ge1xuICAgICAgICByZXNvbHZlKGFuc3dlcik7XG4gICAgICB9KTtcbiAgICAgIHJlcy5vbignZXJyb3InLCAoKSA9PiB7XG4gICAgICAgIHJlamVjdChhbnN3ZXIpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaWYgKG9wdGlvbnMuaGVhZGVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoJ0NvbnRlbnQtVHlwZScgaW4gb3B0aW9ucy5oZWFkZXJzKSB7XG4gICAgICAgIGlmIChvcHRpb25zLmhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID09PSAnYXBwbGljYXRpb24vanNvbicpIHtcbiAgICAgICAgICByZXEud3JpdGUoSlNPTi5zdHJpbmdpZnkoZGF0YVJlcSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJlcS5lbmQoKTtcbiAgfSk7XG59XG4qL1xuXG5jb25zdCB5YUFwaSA9IHtcbiAgZ2V0TG9jYXRpb246IGFzeW5jIChjaXR5KSA9PiB7XG4gICAgY29uc3QgZ2VvVXJsID0gbmV3IFVSTCgnaHR0cHM6Ly9nZW9jb2RlLW1hcHMueWFuZGV4LnJ1Jyk7XG4gICAgZ2VvVXJsLnBhdGhuYW1lID0gJy8xLngvJztcbiAgICBnZW9Vcmwuc2VhcmNoUGFyYW1zLmFwcGVuZCgnZm9ybWF0JywgJ2pzb24nKTtcbiAgICBnZW9Vcmwuc2VhcmNoUGFyYW1zLmFwcGVuZCgncmVzdWx0cycsICcxJyk7XG4gICAgZ2VvVXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoJ2dlb2NvZGUnLCBjaXR5KTtcblxuICAgIGNvbnN0IGdlb0xvY2F0aW9uID0gYXdhaXQgc2VuZEh0dHBSZXF1ZXN0KGdlb1VybCwge30sIG51bGwsICdHRVQnKTtcbiAgICBjb25zdCBnZW9Mb2NhdGlvblBhcnNlID0gSlNPTi5wYXJzZShnZW9Mb2NhdGlvbik7XG4gICAgbGV0IGNpdHlQYXJzZTtcbiAgICBsZXQgbG9uO1xuICAgIGxldCBsYXQ7XG4gICAgaWYgKFxuICAgICAgZ2VvTG9jYXRpb25QYXJzZS5yZXNwb25zZS5HZW9PYmplY3RDb2xsZWN0aW9uXG4gICAgICAgIC5tZXRhRGF0YVByb3BlcnR5Lkdlb2NvZGVyUmVzcG9uc2VNZXRhRGF0YVxuICAgICAgICAuZm91bmQgIT09ICcwJ1xuICAgICkge1xuICAgICAgY2l0eVBhcnNlID0gZ2VvTG9jYXRpb25QYXJzZS5yZXNwb25zZS5HZW9PYmplY3RDb2xsZWN0aW9uLmZlYXR1cmVNZW1iZXJbMF1cbiAgICAgICAgLkdlb09iamVjdC5tZXRhRGF0YVByb3BlcnR5Lkdlb2NvZGVyTWV0YURhdGEudGV4dDtcbiAgICAgIFtsb24sIGxhdF0gPSBnZW9Mb2NhdGlvblBhcnNlLnJlc3BvbnNlLkdlb09iamVjdENvbGxlY3Rpb24uZmVhdHVyZU1lbWJlclswXS5HZW9PYmplY3QuUG9pbnQucG9zLnNwbGl0KCcgJyk7XG4gICAgfVxuICAgIHJldHVybiBbY2l0eVBhcnNlIHx8IGNpdHksIGxvbiB8fCAwLCBsYXQgfHwgMF07XG4gIH0sXG4gIGdldFdlYXRoZXI6IGFzeW5jIChsb24sIGxhdCkgPT4ge1xuICAgIGNvbnN0IHdlYXRoZXJVcmwgPSBuZXcgVVJMKCdodHRwczovL2FwaS53ZWF0aGVyLnlhbmRleC5ydScpO1xuICAgIHdlYXRoZXJVcmwucGF0aG5hbWUgPSAnL3YxL2luZm9ybWVycyc7XG4gICAgd2VhdGhlclVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKCdsYW5nJywgJ3J1X1JVJyk7XG4gICAgd2VhdGhlclVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKCdsYXQnLCBsYXQpO1xuICAgIHdlYXRoZXJVcmwuc2VhcmNoUGFyYW1zLmFwcGVuZCgnbG9uJywgbG9uKTtcbiAgICBjb25zdCB3ZWF0aGVySGVhZGVyID0geyAnWC1ZYW5kZXgtQVBJLUtleSc6ICc0MGYwZTUyYi0xNjhkLTQwYTQtYmEzOC0wYzJiZjRkOTg3MjYnIH07XG5cbiAgICBsZXQgd2VhdGhlciA9IGF3YWl0IHNlbmRIdHRwUmVxdWVzdCh3ZWF0aGVyVXJsLCB3ZWF0aGVySGVhZGVyLCBudWxsLCAnR0VUJyk7XG4gICAgd2VhdGhlciA9IEpTT04ucGFyc2Uod2VhdGhlcik7XG4gICAgcmV0dXJuIFt3ZWF0aGVyLmZhY3QudGVtcCwgd2VhdGhlci5mYWN0LmZlZWxzX2xpa2UsIHdlYXRoZXIuZmFjdC53aW5kX3NwZWVkXTtcbiAgfSxcbn07XG5cbmNvbnN0IGJvdENvbW1hbmRzID0ge1xuICAnL3N0YXJ0Jzoge1xuICAgIGRlc2NyaXBpb246ICfQndCw0YfQsNGC0Ywg0YDQsNCx0L7RgtGDINGBINCx0L7RgtC+0LwnLFxuICAgIGhhbmRsZXI6XG4gICAgYXN5bmMgKGNoYXRJZCwgZGF0YSkgPT4ge1xuICAgICAgY29uc3QgYW5zd2VyID0gYEhlbGxvLCAke2RhdGEubWVzc2FnZS5mcm9tLmZpcnN0X25hbWV9YDtcbiAgICAgIGF3YWl0IHNlbmRIdHRwUmVxdWVzdCh0ZWxlZ3JhbVVybCwgeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sIHsgbWV0aG9kOiBDTUQuc2VuZE1lc3NhZ2UsIGNoYXRfaWQ6IGNoYXRJZCwgdGV4dDogYW5zd2VyIH0sICdQT1NUJyk7XG4gICAgfSxcbiAgfSxcbiAgJy9oZWxwJzoge1xuICAgIGRlc2NyaXBpb246ICfQn9C+0LzQvtGJ0YwnLFxuICAgIGhhbmRsZXI6XG4gICAgYXN5bmMgKGNoYXRJZCkgPT4ge1xuICAgICAgY29uc3QgYW5zd2VyID0gJy9zdGFydCAtINC/0L7Qt9C00L7RgNC+0LLQsNGC0YzRgdGPXFxuL3dlYXRoZXIgLSDRgtC10LrRg9GJ0LDRjyDQv9C+0LPQvtC00LBcXG4vaGVscCAtINGN0YLQsCDRgdC/0YDQsNCy0LrQsCc7XG4gICAgICBhd2FpdCBzZW5kSHR0cFJlcXVlc3QodGVsZWdyYW1VcmwsIHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LCB7IG1ldGhvZDogQ01ELnNlbmRNZXNzYWdlLCBjaGF0X2lkOiBjaGF0SWQsIHRleHQ6IGFuc3dlciB9LCAnUE9TVCcpO1xuICAgIH0sXG4gIH0sXG4gICcvd2VhdGhlcic6IHtcbiAgICBkZXNjcmlwaW9uOiAn0J/QvtCz0L7QtNCwJyxcbiAgICBoYW5kbGVyOlxuICAgIGFzeW5jIChjaGF0SWQsIGRhdGEpID0+IHtcbiAgICAgIGxldCBjaXR5ID0gJ1R5dW1lbic7XG4gICAgICBsZXQgbGF0ID0gNTc7XG4gICAgICBsZXQgbG9uID0gNjU7XG4gICAgICBsZXQgYW5zd2VyID0gJyc7XG4gICAgICBpZiAoZGF0YS5tZXNzYWdlLnRleHQuc3BsaXQoJyAnKVsxXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIFtjaXR5LCBsb24sIGxhdF0gPSBhd2FpdCB5YUFwaS5nZXRMb2NhdGlvbihkYXRhLm1lc3NhZ2UudGV4dC5zcGxpdCgnICcpWzFdKTtcbiAgICAgIH1cbiAgICAgIGlmIChsb24gIT09IDAgfHwgbGF0ICE9PSAwKSB7XG4gICAgICAgIGNvbnN0IFt0ZW1wLCB0ZW1wRmVlbCwgd2luZF0gPSBhd2FpdCB5YUFwaS5nZXRXZWF0aGVyKGxvbiwgbGF0KTtcbiAgICAgICAgYW5zd2VyID0gYNCf0L7Qs9C+0LTQsCDQsjogJHtjaXR5fVxcbmBcbiAgICAgICAgKyBg0KLQtdC60YPRidCw0Y8g0YLQtdC80L/QtdGA0LDRgtGD0YDQsDogJHt0ZW1wfVxcbmBcbiAgICAgICAgKyBg0J7RidGD0YnQsNC10YLRgdGPINC60LDQujogJHt0ZW1wRmVlbH1cXG5gXG4gICAgICAgICsgYNCS0LXRgtC10YA6ICR7d2luZH1gO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYW5zd2VyID0gJ9Cd0LUg0YPQtNCw0LvQvtGB0Ywg0L3QsNC50YLQuCDQs9C+0YDQvtC0JztcbiAgICAgIH1cbiAgICAgIGF3YWl0IHNlbmRIdHRwUmVxdWVzdCh0ZWxlZ3JhbVVybCwgeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sIHsgbWV0aG9kOiBDTUQuc2VuZE1lc3NhZ2UsIGNoYXRfaWQ6IGNoYXRJZCwgdGV4dDogYW5zd2VyIH0sICdQT1NUJyk7XG4gICAgfSxcbiAgfSxcbiAgdW5kZWZpbmVkOiB7XG4gICAgZGVzY3JpcGlvbjogJ9Cd0LXQuNC30LLQtdGB0YLQvdCw0Y8g0LrQvtC80LDQvdC00LAnLFxuICAgIGhhbmRsZXI6XG4gICAgYXN5bmMgKGNoYXRJZCkgPT4ge1xuICAgICAgY29uc3QgYW5zd2VyID0gJ9Cd0LXQuNC30LLQtdGB0YLQvdCw0Y8g0LrQvtC80LDQvdC00LAsINCy0L7RgdC/0L7Qu9GM0LfRg9C50YLQtdGB0Ywg0YHQv9GA0LDQstC60L7QuSAvaGVscCc7XG4gICAgICBhd2FpdCBzZW5kSHR0cFJlcXVlc3QodGVsZWdyYW1VcmwsIHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LCB7IG1ldGhvZDogQ01ELnNlbmRNZXNzYWdlLCBjaGF0X2lkOiBjaGF0SWQsIHRleHQ6IGFuc3dlciB9LCAnUE9TVCcpO1xuICAgIH0sXG4gIH0sXG59O1xuXG5mdW5jdGlvbiByZXFQYXJzZShkYXRhKSB7XG4gIGNvbnN0IGRhdGFQYXJzZSA9IEpTT04ucGFyc2UoZGF0YSk7XG4gIGNvbnN0IGVudGl0aWVzID0gZGF0YVBhcnNlLm1lc3NhZ2UuZW50aXRpZXNbMF0gfHwgJyc7XG4gIGlmIChlbnRpdGllcy50eXBlID09PSAnYm90X2NvbW1hbmQnKSB7XG4gICAgc3dpdGNoIChkYXRhUGFyc2UubWVzc2FnZS50ZXh0LnNwbGl0KCcgJylbMF0udG9Mb3dlckNhc2UoKSkge1xuICAgICAgY2FzZSAnL3N0YXJ0JzpcbiAgICAgIGNhc2UgJy9oZWxwJzpcbiAgICAgIGNhc2UgJy93ZWF0aGVyJzpcbiAgICAgICAgZXZlbnRlci5lbWl0KGRhdGFQYXJzZS5tZXNzYWdlLnRleHQuc3BsaXQoJyAnKVswXS50b0xvd2VyQ2FzZSgpLCBkYXRhUGFyc2UubWVzc2FnZS5jaGF0LmlkLCBkYXRhUGFyc2UpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGV2ZW50ZXIuZW1pdCgndW5kZWZpbmVkJywgZGF0YVBhcnNlLm1lc3NhZ2UuY2hhdC5pZCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gMDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gU2VydmVyKCkge1xuICBjb25zb2xlLmxvZyhodHRwKTtcbiAgY29uc3Qgc2VydmVyID0gaHR0cC5jcmVhdGVTZXJ2ZXIoKTtcbiAgc2VydmVyLmxpc3Rlbihwcm9jZXNzLmVudi5QT1JUKTtcbiAgc2VydmVyLm9uKCdyZXF1ZXN0JywgKHJlcXVlc3QsIHJlc3BvbnNlKSA9PiB7XG4gICAgbGV0IHJlcXVlc3REYXRhID0gJyc7XG4gICAgcmVxdWVzdC5vbignZGF0YScsIChkYXRhKSA9PiB7XG4gICAgICByZXF1ZXN0RGF0YSArPSBkYXRhO1xuICAgIH0pO1xuICAgIHJlcXVlc3Qub24oJ2VuZCcsICgpID0+IHtcbiAgICAgIHJlcVBhcnNlKHJlcXVlc3REYXRhKTtcbiAgICAgIHJlc3BvbnNlLmVuZCgpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZXZlbnRlci5vbignL3dlYXRoZXInLCBib3RDb21tYW5kc1snL3dlYXRoZXInXS5oYW5kbGVyKTtcbmV2ZW50ZXIub24oJy9zdGFydCcsIGJvdENvbW1hbmRzWycvc3RhcnQnXS5oYW5kbGVyKTtcbmV2ZW50ZXIub24oJy9oZWxwJywgYm90Q29tbWFuZHNbJy9oZWxwJ10uaGFuZGxlcik7XG5ldmVudGVyLm9uKCd1bmRlZmluZWQnLCBib3RDb21tYW5kcy51bmRlZmluZWQuaGFuZGxlcik7XG5cblxuY29uc3Qgc2V0V2ViSG9va1VybCA9IG5ldyBVUkwoJ2h0dHBzOi8vYXBpLnRlbGVncmFtLm9yZy8nKTtcbnNldFdlYkhvb2tVcmwucGF0aG5hbWUgPSBgYm90JHt0b2tlbn0ke0NNRC5zZXRXZWJIb29rfWA7XG5zZXRXZWJIb29rVXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoXG4gICd1cmwnLFxuICAnaHR0cHM6Ly90ZWxlYm90ZWVlZS5oZXJva3VhcHAuY29tLycsXG4pO1xuc2VuZEh0dHBSZXF1ZXN0KHNldFdlYkhvb2tVcmwsIHt9LCBudWxsLCAnR0VUJykudGhlbihTZXJ2ZXIpO1xuIl19