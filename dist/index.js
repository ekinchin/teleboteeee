"use strict";

var _http = _interopRequireDefault(require("http"));

var _url = require("url");

var _events = require("events");

var _httpRequest = _interopRequireDefault(require("./httpRequest"));

var _yandexmap = _interopRequireDefault(require("./yandexmap"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const eventer = new _events.EventEmitter();
const CMD = {
  setWebHook: 'setWebhook',
  getUpdates: 'getUpdates',
  sendMessage: 'sendMessage'
};
const token = '674082318:AAG4e5AXQu_SbJkYSVji4chwaiggtGrMLBc';
const telegramUrl = new _url.URL('https://api.telegram.org');
telegramUrl.pathname = `bot${token}/${CMD.sendMessage}`;
const map = new _yandexmap.default();
const yaApi = {
  getLocation: async city => {
    const geoUrl = new _url.URL('https://geocode-maps.yandex.ru');
    geoUrl.pathname = '/1.x/';
    geoUrl.searchParams.append('format', 'json');
    geoUrl.searchParams.append('results', '1');
    geoUrl.searchParams.append('geocode', city);
    const geoLocation = await (0, _httpRequest.default)(geoUrl, {}, null, 'GET');
    const geoLocationParse = JSON.parse(geoLocation);
    let cityParse;
    let lon;
    let lat;

    if (geoLocationParse.response.GeoObjectCollection.metaDataProperty.GeocoderResponseMetaData.found !== '0') {
      cityParse = geoLocationParse.response.GeoObjectCollection.featureMember[0].GeoObject.metaDataProperty.GeocoderMetaData.text;
      [lon, lat] = geoLocationParse.response.GeoObjectCollection.featureMember[0].GeoObject.Point.pos.split(' ');
    }

    return [cityParse || city, lon || 0, lat || 0];
  },
  getWeather: async (lon, lat) => {
    const weatherUrl = new _url.URL('https://api.weather.yandex.ru');
    weatherUrl.pathname = '/v1/informers';
    weatherUrl.searchParams.append('lang', 'ru_RU');
    weatherUrl.searchParams.append('lat', lat);
    weatherUrl.searchParams.append('lon', lon);
    const weatherHeader = {
      'X-Yandex-API-Key': '40f0e52b-168d-40a4-ba38-0c2bf4d98726'
    };
    let weather = await (0, _httpRequest.default)(weatherUrl, weatherHeader, null, 'GET');
    weather = JSON.parse(weather);
    return [weather.fact.temp, weather.fact.feels_like, weather.fact.wind_speed];
  }
};
const botCommands = {
  '/start': {
    descripion: 'Начать работу с ботом',
    handler: async (chatId, data) => {
      const answer = `Hello, ${data.message.from.first_name}`;
      await (0, _httpRequest.default)(telegramUrl, {
        'Content-Type': 'application/json'
      }, {
        method: CMD.sendMessage,
        chat_id: chatId,
        text: answer
      }, 'POST');
    }
  },
  '/help': {
    descripion: 'Помощь',
    handler: async chatId => {
      const answer = '/start - поздороваться\n/weather - текущая погода\n/help - эта справка';
      await (0, _httpRequest.default)(telegramUrl, {
        'Content-Type': 'application/json'
      }, {
        method: CMD.sendMessage,
        chat_id: chatId,
        text: answer
      }, 'POST');
    }
  },
  '/weather': {
    descripion: 'Погода',
    handler: async (chatId, data) => {
      let city = 'Tyumen';
      let lat = 57;
      let lon = 65;
      let answer = '';

      if (data.message.text.split(' ')[1] !== undefined) {
        [city, lon, lat] = await map.getLocation(data.message.text.split(' ')[1]);
      }

      if (lon !== 0 || lat !== 0) {
        const [temp, tempFeel, wind] = await yaApi.getWeather(lon, lat);
        answer = `Погода в: ${city}\n` + `Текущая температура: ${temp}\n` + `Ощущается как: ${tempFeel}\n` + `Ветер: ${wind}`;
      } else {
        answer = 'Не удалось найти город';
      }

      await (0, _httpRequest.default)(telegramUrl, {
        'Content-Type': 'application/json'
      }, {
        method: CMD.sendMessage,
        chat_id: chatId,
        text: answer
      }, 'POST');
    }
  },
  undefined: {
    descripion: 'Неизвестная команда',
    handler: async chatId => {
      const answer = 'Неизвестная команда, воспользуйтесь справкой /help';
      await (0, _httpRequest.default)(telegramUrl, {
        'Content-Type': 'application/json'
      }, {
        method: CMD.sendMessage,
        chat_id: chatId,
        text: answer
      }, 'POST');
    }
  }
};

function reqParse(data) {
  const dataParse = JSON.parse(data);
  const entities = dataParse.message.entities[0] || '';

  if (entities.type === 'bot_command') {
    switch (dataParse.message.text.split(' ')[0].toLowerCase()) {
      case '/start':
      case '/help':
      case '/weather':
        eventer.emit(dataParse.message.text.split(' ')[0].toLowerCase(), dataParse.message.chat.id, dataParse);
        break;

      default:
        eventer.emit('undefined', dataParse.message.chat.id);
        break;
    }
  }

  return 0;
}

async function Server() {
  const server = _http.default.createServer();

  server.listen(process.env.PORT);
  server.on('request', (request, response) => {
    let requestData = '';
    request.on('data', data => {
      requestData += data;
    });
    request.on('end', () => {
      reqParse(requestData);
      response.end();
    });
  });
}

eventer.on('/weather', botCommands['/weather'].handler);
eventer.on('/start', botCommands['/start'].handler);
eventer.on('/help', botCommands['/help'].handler);
eventer.on('undefined', botCommands.undefined.handler);
const setWebHookUrl = new _url.URL('https://api.telegram.org/');
setWebHookUrl.pathname = `bot${token}${CMD.setWebHook}`;
setWebHookUrl.searchParams.append('url', 'https://teleboteeee.herokuapp.com/');
(0, _httpRequest.default)(setWebHookUrl, {}, null, 'GET').then(Server);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJldmVudGVyIiwiRXZlbnRFbWl0dGVyIiwiQ01EIiwic2V0V2ViSG9vayIsImdldFVwZGF0ZXMiLCJzZW5kTWVzc2FnZSIsInRva2VuIiwidGVsZWdyYW1VcmwiLCJVUkwiLCJwYXRobmFtZSIsIm1hcCIsIllhbmRleG1hcCIsInlhQXBpIiwiZ2V0TG9jYXRpb24iLCJjaXR5IiwiZ2VvVXJsIiwic2VhcmNoUGFyYW1zIiwiYXBwZW5kIiwiZ2VvTG9jYXRpb24iLCJnZW9Mb2NhdGlvblBhcnNlIiwiSlNPTiIsInBhcnNlIiwiY2l0eVBhcnNlIiwibG9uIiwibGF0IiwicmVzcG9uc2UiLCJHZW9PYmplY3RDb2xsZWN0aW9uIiwibWV0YURhdGFQcm9wZXJ0eSIsIkdlb2NvZGVyUmVzcG9uc2VNZXRhRGF0YSIsImZvdW5kIiwiZmVhdHVyZU1lbWJlciIsIkdlb09iamVjdCIsIkdlb2NvZGVyTWV0YURhdGEiLCJ0ZXh0IiwiUG9pbnQiLCJwb3MiLCJzcGxpdCIsImdldFdlYXRoZXIiLCJ3ZWF0aGVyVXJsIiwid2VhdGhlckhlYWRlciIsIndlYXRoZXIiLCJmYWN0IiwidGVtcCIsImZlZWxzX2xpa2UiLCJ3aW5kX3NwZWVkIiwiYm90Q29tbWFuZHMiLCJkZXNjcmlwaW9uIiwiaGFuZGxlciIsImNoYXRJZCIsImRhdGEiLCJhbnN3ZXIiLCJtZXNzYWdlIiwiZnJvbSIsImZpcnN0X25hbWUiLCJtZXRob2QiLCJjaGF0X2lkIiwidW5kZWZpbmVkIiwidGVtcEZlZWwiLCJ3aW5kIiwicmVxUGFyc2UiLCJkYXRhUGFyc2UiLCJlbnRpdGllcyIsInR5cGUiLCJ0b0xvd2VyQ2FzZSIsImVtaXQiLCJjaGF0IiwiaWQiLCJTZXJ2ZXIiLCJzZXJ2ZXIiLCJodHRwIiwiY3JlYXRlU2VydmVyIiwibGlzdGVuIiwicHJvY2VzcyIsImVudiIsIlBPUlQiLCJvbiIsInJlcXVlc3QiLCJyZXF1ZXN0RGF0YSIsImVuZCIsInNldFdlYkhv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V0FBVyxDQUFDLE9BQUQsQ0FBWCxDQUFxQkUsT0FBekM7QUFDQS9DLE9BQU8sQ0FBQzJFLEVBQVIsQ0FBVyxXQUFYLEVBQXdCOUIsV0FBVyxDQUFDVyxTQUFaLENBQXNCVCxPQUE5QztBQUdBLE1BQU1nQyxhQUFhLEdBQUcsSUFBSXZFLFFBQUosQ0FBUSwyQkFBUixDQUF0QjtBQUNBdUUsYUFBYSxDQUFDdEUsUUFBZCxHQUEwQixNQUFLSCxLQUFNLEdBQUVKLEdBQUcsQ0FBQ0MsVUFBVyxFQUF0RDtBQUNBNEUsYUFBYSxDQUFDL0QsWUFBZCxDQUEyQkMsTUFBM0IsQ0FDRSxLQURGLEVBRUUsb0NBRkY7QUFJQSwwQkFBWThELGFBQVosRUFBMkIsRUFBM0IsRUFBK0IsSUFBL0IsRUFBcUMsS0FBckMsRUFBNENDLElBQTVDLENBQWlEYixNQUFqRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBodHRwIGZyb20gJ2h0dHAnO1xuaW1wb3J0IHsgVVJMIH0gZnJvbSAndXJsJztcbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ2V2ZW50cyc7XG5pbXBvcnQgaHR0cFJlcXVlc3QgZnJvbSAnLi9odHRwUmVxdWVzdCc7XG5pbXBvcnQgWWFuZGV4bWFwIGZyb20gJy4veWFuZGV4bWFwJztcblxuY29uc3QgZXZlbnRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuY29uc3QgQ01EID0ge1xuICBzZXRXZWJIb29rOiAnc2V0V2ViaG9vaycsXG4gIGdldFVwZGF0ZXM6ICdnZXRVcGRhdGVzJyxcbiAgc2VuZE1lc3NhZ2U6ICdzZW5kTWVzc2FnZScsXG59O1xuXG5jb25zdCB0b2tlbiA9ICc2NzQwODIzMTg6QUFHNGU1QVhRdV9TYkprWVNWamk0Y2h3YWlnZ3RHck1MQmMnO1xuY29uc3QgdGVsZWdyYW1VcmwgPSBuZXcgVVJMKCdodHRwczovL2FwaS50ZWxlZ3JhbS5vcmcnKTtcbnRlbGVncmFtVXJsLnBhdGhuYW1lID0gYGJvdCR7dG9rZW59LyR7Q01ELnNlbmRNZXNzYWdlfWA7XG5cbmNvbnN0IG1hcCA9IG5ldyBZYW5kZXhtYXAoKTtcblxuY29uc3QgeWFBcGkgPSB7XG4gIGdldExvY2F0aW9uOiBhc3luYyAoY2l0eSkgPT4ge1xuICAgIGNvbnN0IGdlb1VybCA9IG5ldyBVUkwoJ2h0dHBzOi8vZ2VvY29kZS1tYXBzLnlhbmRleC5ydScpO1xuICAgIGdlb1VybC5wYXRobmFtZSA9ICcvMS54Lyc7XG4gICAgZ2VvVXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoJ2Zvcm1hdCcsICdqc29uJyk7XG4gICAgZ2VvVXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoJ3Jlc3VsdHMnLCAnMScpO1xuICAgIGdlb1VybC5zZWFyY2hQYXJhbXMuYXBwZW5kKCdnZW9jb2RlJywgY2l0eSk7XG5cbiAgICBjb25zdCBnZW9Mb2NhdGlvbiA9IGF3YWl0IGh0dHBSZXF1ZXN0KGdlb1VybCwge30sIG51bGwsICdHRVQnKTtcbiAgICBjb25zdCBnZW9Mb2NhdGlvblBhcnNlID0gSlNPTi5wYXJzZShnZW9Mb2NhdGlvbik7XG4gICAgbGV0IGNpdHlQYXJzZTtcbiAgICBsZXQgbG9uO1xuICAgIGxldCBsYXQ7XG4gICAgaWYgKFxuICAgICAgZ2VvTG9jYXRpb25QYXJzZS5yZXNwb25zZS5HZW9PYmplY3RDb2xsZWN0aW9uXG4gICAgICAgIC5tZXRhRGF0YVByb3BlcnR5Lkdlb2NvZGVyUmVzcG9uc2VNZXRhRGF0YVxuICAgICAgICAuZm91bmQgIT09ICcwJ1xuICAgICkge1xuICAgICAgY2l0eVBhcnNlID0gZ2VvTG9jYXRpb25QYXJzZS5yZXNwb25zZS5HZW9PYmplY3RDb2xsZWN0aW9uLmZlYXR1cmVNZW1iZXJbMF1cbiAgICAgICAgLkdlb09iamVjdC5tZXRhRGF0YVByb3BlcnR5Lkdlb2NvZGVyTWV0YURhdGEudGV4dDtcbiAgICAgIFtsb24sIGxhdF0gPSBnZW9Mb2NhdGlvblBhcnNlLnJlc3BvbnNlLkdlb09iamVjdENvbGxlY3Rpb24uZmVhdHVyZU1lbWJlclswXS5HZW9PYmplY3QuUG9pbnQucG9zLnNwbGl0KCcgJyk7XG4gICAgfVxuICAgIHJldHVybiBbY2l0eVBhcnNlIHx8IGNpdHksIGxvbiB8fCAwLCBsYXQgfHwgMF07XG4gIH0sXG4gIGdldFdlYXRoZXI6IGFzeW5jIChsb24sIGxhdCkgPT4ge1xuICAgIGNvbnN0IHdlYXRoZXJVcmwgPSBuZXcgVVJMKCdodHRwczovL2FwaS53ZWF0aGVyLnlhbmRleC5ydScpO1xuICAgIHdlYXRoZXJVcmwucGF0aG5hbWUgPSAnL3YxL2luZm9ybWVycyc7XG4gICAgd2VhdGhlclVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKCdsYW5nJywgJ3J1X1JVJyk7XG4gICAgd2VhdGhlclVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKCdsYXQnLCBsYXQpO1xuICAgIHdlYXRoZXJVcmwuc2VhcmNoUGFyYW1zLmFwcGVuZCgnbG9uJywgbG9uKTtcbiAgICBjb25zdCB3ZWF0aGVySGVhZGVyID0geyAnWC1ZYW5kZXgtQVBJLUtleSc6ICc0MGYwZTUyYi0xNjhkLTQwYTQtYmEzOC0wYzJiZjRkOTg3MjYnIH07XG5cbiAgICBsZXQgd2VhdGhlciA9IGF3YWl0IGh0dHBSZXF1ZXN0KHdlYXRoZXJVcmwsIHdlYXRoZXJIZWFkZXIsIG51bGwsICdHRVQnKTtcbiAgICB3ZWF0aGVyID0gSlNPTi5wYXJzZSh3ZWF0aGVyKTtcbiAgICByZXR1cm4gW3dlYXRoZXIuZmFjdC50ZW1wLCB3ZWF0aGVyLmZhY3QuZmVlbHNfbGlrZSwgd2VhdGhlci5mYWN0LndpbmRfc3BlZWRdO1xuICB9LFxufTtcblxuY29uc3QgYm90Q29tbWFuZHMgPSB7XG4gICcvc3RhcnQnOiB7XG4gICAgZGVzY3JpcGlvbjogJ9Cd0LDRh9Cw0YLRjCDRgNCw0LHQvtGC0YMg0YEg0LHQvtGC0L7QvCcsXG4gICAgaGFuZGxlcjpcbiAgICBhc3luYyAoY2hhdElkLCBkYXRhKSA9PiB7XG4gICAgICBjb25zdCBhbnN3ZXIgPSBgSGVsbG8sICR7ZGF0YS5tZXNzYWdlLmZyb20uZmlyc3RfbmFtZX1gO1xuICAgICAgYXdhaXQgaHR0cFJlcXVlc3QodGVsZWdyYW1VcmwsIHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LCB7IG1ldGhvZDogQ01ELnNlbmRNZXNzYWdlLCBjaGF0X2lkOiBjaGF0SWQsIHRleHQ6IGFuc3dlciB9LCAnUE9TVCcpO1xuICAgIH0sXG4gIH0sXG4gICcvaGVscCc6IHtcbiAgICBkZXNjcmlwaW9uOiAn0J/QvtC80L7RidGMJyxcbiAgICBoYW5kbGVyOlxuICAgIGFzeW5jIChjaGF0SWQpID0+IHtcbiAgICAgIGNvbnN0IGFuc3dlciA9ICcvc3RhcnQgLSDQv9C+0LfQtNC+0YDQvtCy0LDRgtGM0YHRj1xcbi93ZWF0aGVyIC0g0YLQtdC60YPRidCw0Y8g0L/QvtCz0L7QtNCwXFxuL2hlbHAgLSDRjdGC0LAg0YHQv9GA0LDQstC60LAnO1xuICAgICAgYXdhaXQgaHR0cFJlcXVlc3QodGVsZWdyYW1VcmwsIHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LCB7IG1ldGhvZDogQ01ELnNlbmRNZXNzYWdlLCBjaGF0X2lkOiBjaGF0SWQsIHRleHQ6IGFuc3dlciB9LCAnUE9TVCcpO1xuICAgIH0sXG4gIH0sXG4gICcvd2VhdGhlcic6IHtcbiAgICBkZXNjcmlwaW9uOiAn0J/QvtCz0L7QtNCwJyxcbiAgICBoYW5kbGVyOlxuICAgIGFzeW5jIChjaGF0SWQsIGRhdGEpID0+IHtcbiAgICAgIGxldCBjaXR5ID0gJ1R5dW1lbic7XG4gICAgICBsZXQgbGF0ID0gNTc7XG4gICAgICBsZXQgbG9uID0gNjU7XG4gICAgICBsZXQgYW5zd2VyID0gJyc7XG4gICAgICBpZiAoZGF0YS5tZXNzYWdlLnRleHQuc3BsaXQoJyAnKVsxXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIFtjaXR5LCBsb24sIGxhdF0gPSBhd2FpdCBtYXAuZ2V0TG9jYXRpb24oZGF0YS5tZXNzYWdlLnRleHQuc3BsaXQoJyAnKVsxXSk7XG4gICAgICB9XG4gICAgICBpZiAobG9uICE9PSAwIHx8IGxhdCAhPT0gMCkge1xuICAgICAgICBjb25zdCBbdGVtcCwgdGVtcEZlZWwsIHdpbmRdID0gYXdhaXQgeWFBcGkuZ2V0V2VhdGhlcihsb24sIGxhdCk7XG4gICAgICAgIGFuc3dlciA9IGDQn9C+0LPQvtC00LAg0LI6ICR7Y2l0eX1cXG5gXG4gICAgICAgICsgYNCi0LXQutGD0YnQsNGPINGC0LXQvNC/0LXRgNCw0YLRg9GA0LA6ICR7dGVtcH1cXG5gXG4gICAgICAgICsgYNCe0YnRg9GJ0LDQtdGC0YHRjyDQutCw0Lo6ICR7dGVtcEZlZWx9XFxuYFxuICAgICAgICArIGDQktC10YLQtdGAOiAke3dpbmR9YDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFuc3dlciA9ICfQndC1INGD0LTQsNC70L7RgdGMINC90LDQudGC0Lgg0LPQvtGA0L7QtCc7XG4gICAgICB9XG4gICAgICBhd2FpdCBodHRwUmVxdWVzdCh0ZWxlZ3JhbVVybCwgeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sIHsgbWV0aG9kOiBDTUQuc2VuZE1lc3NhZ2UsIGNoYXRfaWQ6IGNoYXRJZCwgdGV4dDogYW5zd2VyIH0sICdQT1NUJyk7XG4gICAgfSxcbiAgfSxcbiAgdW5kZWZpbmVkOiB7XG4gICAgZGVzY3JpcGlvbjogJ9Cd0LXQuNC30LLQtdGB0YLQvdCw0Y8g0LrQvtC80LDQvdC00LAnLFxuICAgIGhhbmRsZXI6XG4gICAgYXN5bmMgKGNoYXRJZCkgPT4ge1xuICAgICAgY29uc3QgYW5zd2VyID0gJ9Cd0LXQuNC30LLQtdGB0YLQvdCw0Y8g0LrQvtC80LDQvdC00LAsINCy0L7RgdC/0L7Qu9GM0LfRg9C50YLQtdGB0Ywg0YHQv9GA0LDQstC60L7QuSAvaGVscCc7XG4gICAgICBhd2FpdCBodHRwUmVxdWVzdCh0ZWxlZ3JhbVVybCwgeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sIHsgbWV0aG9kOiBDTUQuc2VuZE1lc3NhZ2UsIGNoYXRfaWQ6IGNoYXRJZCwgdGV4dDogYW5zd2VyIH0sICdQT1NUJyk7XG4gICAgfSxcbiAgfSxcbn07XG5cbmZ1bmN0aW9uIHJlcVBhcnNlKGRhdGEpIHtcbiAgY29uc3QgZGF0YVBhcnNlID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgY29uc3QgZW50aXRpZXMgPSBkYXRhUGFyc2UubWVzc2FnZS5lbnRpdGllc1swXSB8fCAnJztcbiAgaWYgKGVudGl0aWVzLnR5cGUgPT09ICdib3RfY29tbWFuZCcpIHtcbiAgICBzd2l0Y2ggKGRhdGFQYXJzZS5tZXNzYWdlLnRleHQuc3BsaXQoJyAnKVswXS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICBjYXNlICcvc3RhcnQnOlxuICAgICAgY2FzZSAnL2hlbHAnOlxuICAgICAgY2FzZSAnL3dlYXRoZXInOlxuICAgICAgICBldmVudGVyLmVtaXQoZGF0YVBhcnNlLm1lc3NhZ2UudGV4dC5zcGxpdCgnICcpWzBdLnRvTG93ZXJDYXNlKCksIGRhdGFQYXJzZS5tZXNzYWdlLmNoYXQuaWQsIGRhdGFQYXJzZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgZXZlbnRlci5lbWl0KCd1bmRlZmluZWQnLCBkYXRhUGFyc2UubWVzc2FnZS5jaGF0LmlkKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiAwO1xufVxuXG5hc3luYyBmdW5jdGlvbiBTZXJ2ZXIoKSB7XG4gIGNvbnN0IHNlcnZlciA9IGh0dHAuY3JlYXRlU2VydmVyKCk7XG4gIHNlcnZlci5saXN0ZW4ocHJvY2Vzcy5lbnYuUE9SVCk7XG4gIHNlcnZlci5vbigncmVxdWVzdCcsIChyZXF1ZXN0LCByZXNwb25zZSkgPT4ge1xuICAgIGxldCByZXF1ZXN0RGF0YSA9ICcnO1xuICAgIHJlcXVlc3Qub24oJ2RhdGEnLCAoZGF0YSkgPT4ge1xuICAgICAgcmVxdWVzdERhdGEgKz0gZGF0YTtcbiAgICB9KTtcbiAgICByZXF1ZXN0Lm9uKCdlbmQnLCAoKSA9PiB7XG4gICAgICByZXFQYXJzZShyZXF1ZXN0RGF0YSk7XG4gICAgICByZXNwb25zZS5lbmQoKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmV2ZW50ZXIub24oJy93ZWF0aGVyJywgYm90Q29tbWFuZHNbJy93ZWF0aGVyJ10uaGFuZGxlcik7XG5ldmVudGVyLm9uKCcvc3RhcnQnLCBib3RDb21tYW5kc1snL3N0YXJ0J10uaGFuZGxlcik7XG5ldmVudGVyLm9uKCcvaGVscCcsIGJvdENvbW1hbmRzWycvaGVscCddLmhhbmRsZXIpO1xuZXZlbnRlci5vbigndW5kZWZpbmVkJywgYm90Q29tbWFuZHMudW5kZWZpbmVkLmhhbmRsZXIpO1xuXG5cbmNvbnN0IHNldFdlYkhvb2tVcmwgPSBuZXcgVVJMKCdodHRwczovL2FwaS50ZWxlZ3JhbS5vcmcvJyk7XG5zZXRXZWJIb29rVXJsLnBhdGhuYW1lID0gYGJvdCR7dG9rZW59JHtDTUQuc2V0V2ViSG9va31gO1xuc2V0V2ViSG9va1VybC5zZWFyY2hQYXJhbXMuYXBwZW5kKFxuICAndXJsJyxcbiAgJ2h0dHBzOi8vdGVsZWJvdGVlZWUuaGVyb2t1YXBwLmNvbS8nLFxuKTtcbmh0dHBSZXF1ZXN0KHNldFdlYkhvb2tVcmwsIHt9LCBudWxsLCAnR0VUJykudGhlbihTZXJ2ZXIpO1xuIl19