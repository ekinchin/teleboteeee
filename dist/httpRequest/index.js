"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _https = _interopRequireDefault(require("https"));

var _querystring = _interopRequireDefault(require("querystring"));

var _url = require("url");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const request = (url, options, data, resolve, reject) => {
  const req = _https.default.request(url, options, res => {
    let answer = '';
    res.on('data', dataRes => {
      answer += dataRes;
    });
    res.on('end', () => {
      resolve(answer);
    });
    res.on('error', e => {
      reject(e);
    });
  });

  if (data) {
    const postData = _querystring.default.stringify(data);

    req.write(postData);
  }

  req.end();
};

const construct = (url, headers, method, data) => {
  const options = {
    headers,
    method
  };
  return (newData = data, newUrl = url) => new Promise((resolve, reject) => request(newUrl, options, newData, resolve, reject));
};

const link = new _url.URL('https://ya.ru/');
const get = construct(link, {}, 'GET');
get().then(resolve => {
  console.log(resolve);
}, reject => {
  console.log(reject);
});
get(null, new _url.URL('https://www.google.com/')).then(resolve => {
  console.log('\n\n\n', resolve);
}, reject => {
  console.log(reject);
});
var _default = construct;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9odHRwUmVxdWVzdC9pbmRleC5qcyJdLCJuYW1lcyI6WyJyZXF1ZXN0IiwidXJsIiwib3B0aW9ucyIsImRhdGEiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVxIiwiaHR0cHMiLCJyZXMiLCJhbnN3ZXIiLCJvbiIsImRhdGFSZXMiLCJlIiwicG9zdERhdGEiLCJxdWVyeXN0cmluZyIsInN0cmluZ2lmeSIsIndyaXRlIiwiZW5kIiwiY29uc3RydWN0IiwiaGVhZGVycyIsIm1ldGhvZCIsIm5ld0RhdGEiLCJuZXdVcmwiLCJQcm9taXNlIiwibGluayIsIlVSTCIsImdldCIsInRoZW4iLCJjb25zb2xlIiwibG9nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxNQUFNQSxPQUFPLEdBQUcsQ0FBQ0MsR0FBRCxFQUFNQyxPQUFOLEVBQWVDLElBQWYsRUFBcUJDLE9BQXJCLEVBQThCQyxNQUE5QixLQUF5QztBQUN2RCxRQUFNQyxHQUFHLEdBQUdDLGVBQU1QLE9BQU4sQ0FBY0MsR0FBZCxFQUFtQkMsT0FBbkIsRUFBNkJNLEdBQUQsSUFBUztBQUMvQyxRQUFJQyxNQUFNLEdBQUcsRUFBYjtBQUNBRCxJQUFBQSxHQUFHLENBQUNFLEVBQUosQ0FBTyxNQUFQLEVBQWdCQyxPQUFELElBQWE7QUFDMUJGLE1BQUFBLE1BQU0sSUFBSUUsT0FBVjtBQUNELEtBRkQ7QUFHQUgsSUFBQUEsR0FBRyxDQUFDRSxFQUFKLENBQU8sS0FBUCxFQUFjLE1BQU07QUFDbEJOLE1BQUFBLE9BQU8sQ0FBQ0ssTUFBRCxDQUFQO0FBQ0QsS0FGRDtBQUdBRCxJQUFBQSxHQUFHLENBQUNFLEVBQUosQ0FBTyxPQUFQLEVBQWlCRSxDQUFELElBQU87QUFDckJQLE1BQUFBLE1BQU0sQ0FBQ08sQ0FBRCxDQUFOO0FBQ0QsS0FGRDtBQUdELEdBWFcsQ0FBWjs7QUFZQSxNQUFHVCxJQUFILEVBQVM7QUFDUCxVQUFNVSxRQUFRLEdBQUdDLHFCQUFZQyxTQUFaLENBQXNCWixJQUF0QixDQUFqQjs7QUFDQUcsSUFBQUEsR0FBRyxDQUFDVSxLQUFKLENBQVVILFFBQVY7QUFDRDs7QUFDRFAsRUFBQUEsR0FBRyxDQUFDVyxHQUFKO0FBQ0QsQ0FsQkQ7O0FBb0JBLE1BQU1DLFNBQVMsR0FBRyxDQUFDakIsR0FBRCxFQUFNa0IsT0FBTixFQUFlQyxNQUFmLEVBQXVCakIsSUFBdkIsS0FBZ0M7QUFDaEQsUUFBTUQsT0FBTyxHQUFHO0FBQ2RpQixJQUFBQSxPQURjO0FBRWRDLElBQUFBO0FBRmMsR0FBaEI7QUFJQSxTQUFPLENBQUNDLE9BQU8sR0FBQ2xCLElBQVQsRUFBZW1CLE1BQU0sR0FBQ3JCLEdBQXRCLEtBQThCLElBQUlzQixPQUFKLENBQVksQ0FBQ25CLE9BQUQsRUFBVUMsTUFBVixLQUFxQkwsT0FBTyxDQUFDc0IsTUFBRCxFQUFTcEIsT0FBVCxFQUFrQm1CLE9BQWxCLEVBQTJCakIsT0FBM0IsRUFBb0NDLE1BQXBDLENBQXhDLENBQXJDO0FBQ0QsQ0FORDs7QUFRQSxNQUFNbUIsSUFBSSxHQUFHLElBQUlDLFFBQUosQ0FBUSxnQkFBUixDQUFiO0FBQ0EsTUFBTUMsR0FBRyxHQUFHUixTQUFTLENBQUNNLElBQUQsRUFBTyxFQUFQLEVBQVcsS0FBWCxDQUFyQjtBQUNBRSxHQUFHLEdBQUdDLElBQU4sQ0FBWXZCLE9BQUQsSUFBVztBQUFDd0IsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVl6QixPQUFaO0FBQXFCLENBQTVDLEVBQStDQyxNQUFELElBQVU7QUFBQ3VCLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZeEIsTUFBWjtBQUFvQixDQUE3RTtBQUNBcUIsR0FBRyxDQUFDLElBQUQsRUFBTyxJQUFJRCxRQUFKLENBQVEseUJBQVIsQ0FBUCxDQUFILENBQThDRSxJQUE5QyxDQUFvRHZCLE9BQUQsSUFBVztBQUFDd0IsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksUUFBWixFQUFzQnpCLE9BQXRCO0FBQStCLENBQTlGLEVBQWlHQyxNQUFELElBQVU7QUFBQ3VCLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZeEIsTUFBWjtBQUFvQixDQUEvSDtlQUdlYSxTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGh0dHBzIGZyb20gJ2h0dHBzJztcbmltcG9ydCBxdWVyeXN0cmluZyBmcm9tICdxdWVyeXN0cmluZyc7XG5pbXBvcnQgeyBVUkwgfSBmcm9tICd1cmwnO1xuXG5jb25zdCByZXF1ZXN0ID0gKHVybCwgb3B0aW9ucywgZGF0YSwgcmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gIGNvbnN0IHJlcSA9IGh0dHBzLnJlcXVlc3QodXJsLCBvcHRpb25zLCAocmVzKSA9PiB7XG4gICAgbGV0IGFuc3dlciA9ICcnO1xuICAgIHJlcy5vbignZGF0YScsIChkYXRhUmVzKSA9PiB7XG4gICAgICBhbnN3ZXIgKz0gZGF0YVJlcztcbiAgICB9KTtcbiAgICByZXMub24oJ2VuZCcsICgpID0+IHtcbiAgICAgIHJlc29sdmUoYW5zd2VyKTtcbiAgICB9KTtcbiAgICByZXMub24oJ2Vycm9yJywgKGUpID0+IHtcbiAgICAgIHJlamVjdChlKTtcbiAgICB9KTtcbiAgfSk7XG4gIGlmKGRhdGEpIHtcbiAgICBjb25zdCBwb3N0RGF0YSA9IHF1ZXJ5c3RyaW5nLnN0cmluZ2lmeShkYXRhKTtcbiAgICByZXEud3JpdGUocG9zdERhdGEpO1xuICB9XG4gIHJlcS5lbmQoKTtcbn1cblxuY29uc3QgY29uc3RydWN0ID0gKHVybCwgaGVhZGVycywgbWV0aG9kLCBkYXRhKSA9PiB7XG4gIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgaGVhZGVycyxcbiAgICBtZXRob2QsXG4gIH1cbiAgcmV0dXJuIChuZXdEYXRhPWRhdGEsIG5ld1VybD11cmwpID0+IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHJlcXVlc3QobmV3VXJsLCBvcHRpb25zLCBuZXdEYXRhLCByZXNvbHZlLCByZWplY3QpKTtcbn1cblxuY29uc3QgbGluayA9IG5ldyBVUkwoJ2h0dHBzOi8veWEucnUvJyk7XG5jb25zdCBnZXQgPSBjb25zdHJ1Y3QobGluaywge30sICdHRVQnKTtcbmdldCgpLnRoZW4oKHJlc29sdmUpPT57Y29uc29sZS5sb2cocmVzb2x2ZSl9LCAocmVqZWN0KT0+e2NvbnNvbGUubG9nKHJlamVjdCl9KTtcbmdldChudWxsLCBuZXcgVVJMKCdodHRwczovL3d3dy5nb29nbGUuY29tLycpKS50aGVuKChyZXNvbHZlKT0+e2NvbnNvbGUubG9nKCdcXG5cXG5cXG4nLCByZXNvbHZlKX0sIChyZWplY3QpPT57Y29uc29sZS5sb2cocmVqZWN0KX0pO1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnN0cnVjdDtcbiJdfQ==