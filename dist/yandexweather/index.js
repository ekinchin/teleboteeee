"use strict";

const yaApi = {
  getLocation: async city => {
    const geoUrl = new url.URL('https://geocode-maps.yandex.ru');
    geoUrl.pathname = '/1.x/';
    geoUrl.searchParams.append('format', 'json');
    geoUrl.searchParams.append('results', '1');
    geoUrl.searchParams.append('geocode', city);
    const geoLocation = await sendHttpRequest(geoUrl, {}, null, 'GET');
    const geoLocationParse = JSON.parse(geoLocation);
    let cityParse;
    let lon;
    let lat;

    if (geoLocationParse.response.GeoObjectCollection.metaDataProperty.GeocoderResponseMetaData.found !== '0') {
      cityParse = geoLocationParse.response.GeoObjectCollection.featureMember[0].GeoObject.metaDataProperty.GeocoderMetaData.text;
      [lon, lat] = geoLocationParse.response.GeoObjectCollection.featureMember[0].GeoObject.Point.pos.split(' ');
    }

    return [cityParse || city, lon || 0, lat || 0];
  },
  getWeather: async (lon, lat) => {
    const weatherUrl = new url.URL('https://api.weather.yandex.ru');
    weatherUrl.pathname = '/v1/informers';
    weatherUrl.searchParams.append('lang', 'ru_RU');
    weatherUrl.searchParams.append('lat', lat);
    weatherUrl.searchParams.append('lon', lon);
    const weatherHeader = {
      'X-Yandex-API-Key': '40f0e52b-168d-40a4-ba38-0c2bf4d98726'
    };
    let weather = await sendHttpRequest(weatherUrl, weatherHeader, null, 'GET');
    weather = JSON.parse(weather);
    return [weather.fact.temp, weather.fact.feels_like, weather.fact.wind_speed];
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy95YW5kZXh3ZWF0aGVyL2luZGV4LmpzIl0sIm5hbWVzIjpbInlhQXBpIiwiZ2V0TG9jYXRpb24iLCJjaXR5IiwiZ2VvVXJsIiwidXJsIiwiVVJMIiwicGF0aG5hbWUiLCJzZWFyY2hQYXJhbXMiLCJhcHBlbmQiLCJnZW9Mb2NhdGlvbiIsInNlbmRIdHRwUmVxdWVzdCIsImdlb0xvY2F0aW9uUGFyc2UiLCJKU09OIiwicGFyc2UiLCJjaXR5UGFyc2UiLCJsb24iLCJsYXQiLCJyZXNwb25zZSIsIkdlb09iamVjdENvbGxlY3Rpb24iLCJtZXRhRGF0YVByb3BlcnR5IiwiR2VvY29kZXJSZXNwb25zZU1ldGFEYXRhIiwiZm91bmQiLCJmZWF0dXJlTWVtYmVyIiwiR2VvT2JqZWN0IiwiR2VvY29kZXJNZXRhRGF0YSIsInRleHQiLCJQb2ludCIsInBvcyIsInNwbGl0IiwiZ2V0V2VhdGhlciIsIndlYXRoZXJVcmwiLCJ3ZWF0aGVySGVhZGVyIiwid2VhdGhlciIsImZhY3QiLCJ0ZW1wIiwiZmVlbHNfbGlrZSIsIndpbmRfc3BlZWQiXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTUEsS0FBSyxHQUFHO0FBQ1pDLEVBQUFBLFdBQVcsRUFBRSxNQUFPQyxJQUFQLElBQWdCO0FBQzNCLFVBQU1DLE1BQU0sR0FBRyxJQUFJQyxHQUFHLENBQUNDLEdBQVIsQ0FBWSxnQ0FBWixDQUFmO0FBQ0FGLElBQUFBLE1BQU0sQ0FBQ0csUUFBUCxHQUFrQixPQUFsQjtBQUNBSCxJQUFBQSxNQUFNLENBQUNJLFlBQVAsQ0FBb0JDLE1BQXBCLENBQTJCLFFBQTNCLEVBQXFDLE1BQXJDO0FBQ0FMLElBQUFBLE1BQU0sQ0FBQ0ksWUFBUCxDQUFvQkMsTUFBcEIsQ0FBMkIsU0FBM0IsRUFBc0MsR0FBdEM7QUFDQUwsSUFBQUEsTUFBTSxDQUFDSSxZQUFQLENBQW9CQyxNQUFwQixDQUEyQixTQUEzQixFQUFzQ04sSUFBdEM7QUFFQSxVQUFNTyxXQUFXLEdBQUcsTUFBTUMsZUFBZSxDQUFDUCxNQUFELEVBQVMsRUFBVCxFQUFhLElBQWIsRUFBbUIsS0FBbkIsQ0FBekM7QUFDQSxVQUFNUSxnQkFBZ0IsR0FBR0MsSUFBSSxDQUFDQyxLQUFMLENBQVdKLFdBQVgsQ0FBekI7QUFDQSxRQUFJSyxTQUFKO0FBQ0EsUUFBSUMsR0FBSjtBQUNBLFFBQUlDLEdBQUo7O0FBQ0EsUUFDRUwsZ0JBQWdCLENBQUNNLFFBQWpCLENBQTBCQyxtQkFBMUIsQ0FDR0MsZ0JBREgsQ0FDb0JDLHdCQURwQixDQUVHQyxLQUZILEtBRWEsR0FIZixFQUlFO0FBQ0FQLE1BQUFBLFNBQVMsR0FBR0gsZ0JBQWdCLENBQUNNLFFBQWpCLENBQTBCQyxtQkFBMUIsQ0FBOENJLGFBQTlDLENBQTRELENBQTVELEVBQ1RDLFNBRFMsQ0FDQ0osZ0JBREQsQ0FDa0JLLGdCQURsQixDQUNtQ0MsSUFEL0M7QUFFQSxPQUFDVixHQUFELEVBQU1DLEdBQU4sSUFBYUwsZ0JBQWdCLENBQUNNLFFBQWpCLENBQTBCQyxtQkFBMUIsQ0FBOENJLGFBQTlDLENBQTRELENBQTVELEVBQStEQyxTQUEvRCxDQUF5RUcsS0FBekUsQ0FBK0VDLEdBQS9FLENBQW1GQyxLQUFuRixDQUF5RixHQUF6RixDQUFiO0FBQ0Q7O0FBQ0QsV0FBTyxDQUFDZCxTQUFTLElBQUlaLElBQWQsRUFBb0JhLEdBQUcsSUFBSSxDQUEzQixFQUE4QkMsR0FBRyxJQUFJLENBQXJDLENBQVA7QUFDRCxHQXZCVztBQXdCWmEsRUFBQUEsVUFBVSxFQUFFLE9BQU9kLEdBQVAsRUFBWUMsR0FBWixLQUFvQjtBQUM5QixVQUFNYyxVQUFVLEdBQUcsSUFBSTFCLEdBQUcsQ0FBQ0MsR0FBUixDQUFZLCtCQUFaLENBQW5CO0FBQ0F5QixJQUFBQSxVQUFVLENBQUN4QixRQUFYLEdBQXNCLGVBQXRCO0FBQ0F3QixJQUFBQSxVQUFVLENBQUN2QixZQUFYLENBQXdCQyxNQUF4QixDQUErQixNQUEvQixFQUF1QyxPQUF2QztBQUNBc0IsSUFBQUEsVUFBVSxDQUFDdkIsWUFBWCxDQUF3QkMsTUFBeEIsQ0FBK0IsS0FBL0IsRUFBc0NRLEdBQXRDO0FBQ0FjLElBQUFBLFVBQVUsQ0FBQ3ZCLFlBQVgsQ0FBd0JDLE1BQXhCLENBQStCLEtBQS9CLEVBQXNDTyxHQUF0QztBQUNBLFVBQU1nQixhQUFhLEdBQUc7QUFBRSwwQkFBb0I7QUFBdEIsS0FBdEI7QUFFQSxRQUFJQyxPQUFPLEdBQUcsTUFBTXRCLGVBQWUsQ0FBQ29CLFVBQUQsRUFBYUMsYUFBYixFQUE0QixJQUE1QixFQUFrQyxLQUFsQyxDQUFuQztBQUNBQyxJQUFBQSxPQUFPLEdBQUdwQixJQUFJLENBQUNDLEtBQUwsQ0FBV21CLE9BQVgsQ0FBVjtBQUNBLFdBQU8sQ0FBQ0EsT0FBTyxDQUFDQyxJQUFSLENBQWFDLElBQWQsRUFBb0JGLE9BQU8sQ0FBQ0MsSUFBUixDQUFhRSxVQUFqQyxFQUE2Q0gsT0FBTyxDQUFDQyxJQUFSLENBQWFHLFVBQTFELENBQVA7QUFDRDtBQW5DVyxDQUFkIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeWFBcGkgPSB7XG4gIGdldExvY2F0aW9uOiBhc3luYyAoY2l0eSkgPT4ge1xuICAgIGNvbnN0IGdlb1VybCA9IG5ldyB1cmwuVVJMKCdodHRwczovL2dlb2NvZGUtbWFwcy55YW5kZXgucnUnKTtcbiAgICBnZW9VcmwucGF0aG5hbWUgPSAnLzEueC8nO1xuICAgIGdlb1VybC5zZWFyY2hQYXJhbXMuYXBwZW5kKCdmb3JtYXQnLCAnanNvbicpO1xuICAgIGdlb1VybC5zZWFyY2hQYXJhbXMuYXBwZW5kKCdyZXN1bHRzJywgJzEnKTtcbiAgICBnZW9Vcmwuc2VhcmNoUGFyYW1zLmFwcGVuZCgnZ2VvY29kZScsIGNpdHkpO1xuXG4gICAgY29uc3QgZ2VvTG9jYXRpb24gPSBhd2FpdCBzZW5kSHR0cFJlcXVlc3QoZ2VvVXJsLCB7fSwgbnVsbCwgJ0dFVCcpO1xuICAgIGNvbnN0IGdlb0xvY2F0aW9uUGFyc2UgPSBKU09OLnBhcnNlKGdlb0xvY2F0aW9uKTtcbiAgICBsZXQgY2l0eVBhcnNlO1xuICAgIGxldCBsb247XG4gICAgbGV0IGxhdDtcbiAgICBpZiAoXG4gICAgICBnZW9Mb2NhdGlvblBhcnNlLnJlc3BvbnNlLkdlb09iamVjdENvbGxlY3Rpb25cbiAgICAgICAgLm1ldGFEYXRhUHJvcGVydHkuR2VvY29kZXJSZXNwb25zZU1ldGFEYXRhXG4gICAgICAgIC5mb3VuZCAhPT0gJzAnXG4gICAgKSB7XG4gICAgICBjaXR5UGFyc2UgPSBnZW9Mb2NhdGlvblBhcnNlLnJlc3BvbnNlLkdlb09iamVjdENvbGxlY3Rpb24uZmVhdHVyZU1lbWJlclswXVxuICAgICAgICAuR2VvT2JqZWN0Lm1ldGFEYXRhUHJvcGVydHkuR2VvY29kZXJNZXRhRGF0YS50ZXh0O1xuICAgICAgW2xvbiwgbGF0XSA9IGdlb0xvY2F0aW9uUGFyc2UucmVzcG9uc2UuR2VvT2JqZWN0Q29sbGVjdGlvbi5mZWF0dXJlTWVtYmVyWzBdLkdlb09iamVjdC5Qb2ludC5wb3Muc3BsaXQoJyAnKTtcbiAgICB9XG4gICAgcmV0dXJuIFtjaXR5UGFyc2UgfHwgY2l0eSwgbG9uIHx8IDAsIGxhdCB8fCAwXTtcbiAgfSxcbiAgZ2V0V2VhdGhlcjogYXN5bmMgKGxvbiwgbGF0KSA9PiB7XG4gICAgY29uc3Qgd2VhdGhlclVybCA9IG5ldyB1cmwuVVJMKCdodHRwczovL2FwaS53ZWF0aGVyLnlhbmRleC5ydScpO1xuICAgIHdlYXRoZXJVcmwucGF0aG5hbWUgPSAnL3YxL2luZm9ybWVycyc7XG4gICAgd2VhdGhlclVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKCdsYW5nJywgJ3J1X1JVJyk7XG4gICAgd2VhdGhlclVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKCdsYXQnLCBsYXQpO1xuICAgIHdlYXRoZXJVcmwuc2VhcmNoUGFyYW1zLmFwcGVuZCgnbG9uJywgbG9uKTtcbiAgICBjb25zdCB3ZWF0aGVySGVhZGVyID0geyAnWC1ZYW5kZXgtQVBJLUtleSc6ICc0MGYwZTUyYi0xNjhkLTQwYTQtYmEzOC0wYzJiZjRkOTg3MjYnIH07XG5cbiAgICBsZXQgd2VhdGhlciA9IGF3YWl0IHNlbmRIdHRwUmVxdWVzdCh3ZWF0aGVyVXJsLCB3ZWF0aGVySGVhZGVyLCBudWxsLCAnR0VUJyk7XG4gICAgd2VhdGhlciA9IEpTT04ucGFyc2Uod2VhdGhlcik7XG4gICAgcmV0dXJuIFt3ZWF0aGVyLmZhY3QudGVtcCwgd2VhdGhlci5mYWN0LmZlZWxzX2xpa2UsIHdlYXRoZXIuZmFjdC53aW5kX3NwZWVkXTtcbiAgfSxcbn07XG4iXX0=