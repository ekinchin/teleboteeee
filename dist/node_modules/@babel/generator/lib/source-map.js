"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _sourceMap() {
  const data = _interopRequireDefault(require("source-map"));

  _sourceMap = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

class SourceMap {
  constructor(opts, code) {
    this._cachedMap = null;
    this._code = code;
    this._opts = opts;
    this._rawMappings = [];
  }

  get() {
    if (!this._cachedMap) {
      const map = this._cachedMap = new (_sourceMap().default.SourceMapGenerator)({
        sourceRoot: this._opts.sourceRoot
      });
      const code = this._code;

      if (typeof code === "string") {
        map.setSourceContent(this._opts.sourceFileName, code);
      } else if (typeof code === "object") {
        Object.keys(code).forEach(sourceFileName => {
          map.setSourceContent(sourceFileName, code[sourceFileName]);
        });
      }

      this._rawMappings.forEach(map.addMapping, map);
    }

    return this._cachedMap.toJSON();
  }

  getRawMappings() {
    return this._rawMappings.slice();
  }

  mark(generatedLine, generatedColumn, line, column, identifierName, filename, force) {
    if (this._lastGenLine !== generatedLine && line === null) return;

    if (!force && this._lastGenLine === generatedLine && this._lastSourceLine === line && this._lastSourceColumn === column) {
      return;
    }

    this._cachedMap = null;
    this._lastGenLine = generatedLine;
    this._lastSourceLine = line;
    this._lastSourceColumn = column;

    this._rawMappings.push({
      name: identifierName || undefined,
      generated: {
        line: generatedLine,
        column: generatedColumn
      },
      source: line == null ? undefined : filename || this._opts.sourceFileName,
      original: line == null ? undefined : {
        line: line,
        column: column
      }
    });
  }

}

exports.default = SourceMap;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvZ2VuZXJhdG9yL2xpYi9zb3VyY2UtbWFwLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIl9zb3VyY2VNYXAiLCJkYXRhIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJvYmoiLCJfX2VzTW9kdWxlIiwiU291cmNlTWFwIiwiY29uc3RydWN0b3IiLCJvcHRzIiwiY29kZSIsIl9jYWNoZWRNYXAiLCJfY29kZSIsIl9vcHRzIiwiX3Jhd01hcHBpbmdzIiwiZ2V0IiwibWFwIiwiU291cmNlTWFwR2VuZXJhdG9yIiwic291cmNlUm9vdCIsInNldFNvdXJjZUNvbnRlbnQiLCJzb3VyY2VGaWxlTmFtZSIsImtleXMiLCJmb3JFYWNoIiwiYWRkTWFwcGluZyIsInRvSlNPTiIsImdldFJhd01hcHBpbmdzIiwic2xpY2UiLCJtYXJrIiwiZ2VuZXJhdGVkTGluZSIsImdlbmVyYXRlZENvbHVtbiIsImxpbmUiLCJjb2x1bW4iLCJpZGVudGlmaWVyTmFtZSIsImZpbGVuYW1lIiwiZm9yY2UiLCJfbGFzdEdlbkxpbmUiLCJfbGFzdFNvdXJjZUxpbmUiLCJfbGFzdFNvdXJjZUNvbHVtbiIsInB1c2giLCJuYW1lIiwidW5kZWZpbmVkIiwiZ2VuZXJhdGVkIiwic291cmNlIiwib3JpZ2luYWwiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzNDQyxFQUFBQSxLQUFLLEVBQUU7QUFEb0MsQ0FBN0M7QUFHQUQsT0FBTyxDQUFDRSxPQUFSLEdBQWtCLEtBQUssQ0FBdkI7O0FBRUEsU0FBU0MsVUFBVCxHQUFzQjtBQUNwQixRQUFNQyxJQUFJLEdBQUdDLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsWUFBRCxDQUFSLENBQW5DOztBQUVBSCxF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ckJ1QixNQUFBQSxRQUFRLEVBQUViLElBQUksSUFBSSxJQUFSLEdBQWVVLFNBQWYsR0FBMkI7QUFDbkNWLFFBQUFBLElBQUksRUFBRUEsSUFENkI7QUFFbkNDLFFBQUFBLE1BQU0sRUFBRUE7QUFGMkI7QUFQaEIsS0FBdkI7QUFZRDs7QUF6RGE7O0FBNkRoQmpDLE9BQU8sQ0FBQ0UsT0FBUixHQUFrQk8sU0FBbEIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxuZnVuY3Rpb24gX3NvdXJjZU1hcCgpIHtcbiAgY29uc3QgZGF0YSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInNvdXJjZS1tYXBcIikpO1xuXG4gIF9zb3VyY2VNYXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmNsYXNzIFNvdXJjZU1hcCB7XG4gIGNvbnN0cnVjdG9yKG9wdHMsIGNvZGUpIHtcbiAgICB0aGlzLl9jYWNoZWRNYXAgPSBudWxsO1xuICAgIHRoaXMuX2NvZGUgPSBjb2RlO1xuICAgIHRoaXMuX29wdHMgPSBvcHRzO1xuICAgIHRoaXMuX3Jhd01hcHBpbmdzID0gW107XG4gIH1cblxuICBnZXQoKSB7XG4gICAgaWYgKCF0aGlzLl9jYWNoZWRNYXApIHtcbiAgICAgIGNvbnN0IG1hcCA9IHRoaXMuX2NhY2hlZE1hcCA9IG5ldyAoX3NvdXJjZU1hcCgpLmRlZmF1bHQuU291cmNlTWFwR2VuZXJhdG9yKSh7XG4gICAgICAgIHNvdXJjZVJvb3Q6IHRoaXMuX29wdHMuc291cmNlUm9vdFxuICAgICAgfSk7XG4gICAgICBjb25zdCBjb2RlID0gdGhpcy5fY29kZTtcblxuICAgICAgaWYgKHR5cGVvZiBjb2RlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIG1hcC5zZXRTb3VyY2VDb250ZW50KHRoaXMuX29wdHMuc291cmNlRmlsZU5hbWUsIGNvZGUpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgY29kZSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICBPYmplY3Qua2V5cyhjb2RlKS5mb3JFYWNoKHNvdXJjZUZpbGVOYW1lID0+IHtcbiAgICAgICAgICBtYXAuc2V0U291cmNlQ29udGVudChzb3VyY2VGaWxlTmFtZSwgY29kZVtzb3VyY2VGaWxlTmFtZV0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fcmF3TWFwcGluZ3MuZm9yRWFjaChtYXAuYWRkTWFwcGluZywgbWFwKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fY2FjaGVkTWFwLnRvSlNPTigpO1xuICB9XG5cbiAgZ2V0UmF3TWFwcGluZ3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Jhd01hcHBpbmdzLnNsaWNlKCk7XG4gIH1cblxuICBtYXJrKGdlbmVyYXRlZExpbmUsIGdlbmVyYXRlZENvbHVtbiwgbGluZSwgY29sdW1uLCBpZGVudGlmaWVyTmFtZSwgZmlsZW5hbWUsIGZvcmNlKSB7XG4gICAgaWYgKHRoaXMuX2xhc3RHZW5MaW5lICE9PSBnZW5lcmF0ZWRMaW5lICYmIGxpbmUgPT09IG51bGwpIHJldHVybjtcblxuICAgIGlmICghZm9yY2UgJiYgdGhpcy5fbGFzdEdlbkxpbmUgPT09IGdlbmVyYXRlZExpbmUgJiYgdGhpcy5fbGFzdFNvdXJjZUxpbmUgPT09IGxpbmUgJiYgdGhpcy5fbGFzdFNvdXJjZUNvbHVtbiA9PT0gY29sdW1uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fY2FjaGVkTWFwID0gbnVsbDtcbiAgICB0aGlzLl9sYXN0R2VuTGluZSA9IGdlbmVyYXRlZExpbmU7XG4gICAgdGhpcy5fbGFzdFNvdXJjZUxpbmUgPSBsaW5lO1xuICAgIHRoaXMuX2xhc3RTb3VyY2VDb2x1bW4gPSBjb2x1bW47XG5cbiAgICB0aGlzLl9yYXdNYXBwaW5ncy5wdXNoKHtcbiAgICAgIG5hbWU6IGlkZW50aWZpZXJOYW1lIHx8IHVuZGVmaW5lZCxcbiAgICAgIGdlbmVyYXRlZDoge1xuICAgICAgICBsaW5lOiBnZW5lcmF0ZWRMaW5lLFxuICAgICAgICBjb2x1bW46IGdlbmVyYXRlZENvbHVtblxuICAgICAgfSxcbiAgICAgIHNvdXJjZTogbGluZSA9PSBudWxsID8gdW5kZWZpbmVkIDogZmlsZW5hbWUgfHwgdGhpcy5fb3B0cy5zb3VyY2VGaWxlTmFtZSxcbiAgICAgIG9yaWdpbmFsOiBsaW5lID09IG51bGwgPyB1bmRlZmluZWQgOiB7XG4gICAgICAgIGxpbmU6IGxpbmUsXG4gICAgICAgIGNvbHVtbjogY29sdW1uXG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxufVxuXG5leHBvcnRzLmRlZmF1bHQgPSBTb3VyY2VNYXA7Il19