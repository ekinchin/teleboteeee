"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FunctionTypeAnnotation = exports.NullableTypeAnnotation = NullableTypeAnnotation;
exports.UpdateExpression = UpdateExpression;
exports.ObjectExpression = ObjectExpression;
exports.DoExpression = DoExpression;
exports.Binary = Binary;
exports.IntersectionTypeAnnotation = exports.UnionTypeAnnotation = UnionTypeAnnotation;
exports.TSAsExpression = TSAsExpression;
exports.TSTypeAssertion = TSTypeAssertion;
exports.BinaryExpression = BinaryExpression;
exports.SequenceExpression = SequenceExpression;
exports.AwaitExpression = exports.YieldExpression = YieldExpression;
exports.ClassExpression = ClassExpression;
exports.UnaryLike = UnaryLike;
exports.FunctionExpression = FunctionExpression;
exports.ArrowFunctionExpression = ArrowFunctionExpression;
exports.ConditionalExpression = ConditionalExpression;
exports.OptionalMemberExpression = OptionalMemberExpression;
exports.AssignmentExpression = AssignmentExpression;
exports.NewExpression = NewExpression;

function t() {
  const data = _interopRequireWildcard(require("@babel/types"));

  t = function () {
    return data;
  };

  return data;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};

    if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};

          if (desc.get || desc.set) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
    }

    newObj.default = obj;
    return newObj;
  }
}

const PRECEDENCE = {
  "||": 0,
  "&&": 1,
  "|": 2,
  "^": 3,
  "&": 4,
  "==": 5,
  "===": 5,
  "!=": 5,
  "!==": 5,
  "<": 6,
  ">": 6,
  "<=": 6,
  ">=": 6,
  in: 6,
  instanceof: 6,
  ">>": 7,
  "<<": 7,
  ">>>": 7,
  "+": 8,
  "-": 8,
  "*": 9,
  "/": 9,
  "%": 9,
  "**": 10
};

const isClassExtendsClause = (node, parent) => (t().isClassDeclaration(parent) || t().isClassExpression(parent)) && parent.superClass === node;

function NullableTypeAnnotation(node, parent) {
  return t().isArrayTypeAnnotation(parent);
}

function UpdateExpression(node, parent) {
  return t().isMemberExpression(parent, {
    object: node
  }) || t().isCallExpression(parent, {
    callee: node
  }) || t().isNewExpression(parent, {
    callee: node
  }) || isClassExtendsClause(node, parent);
}

function ObjectExpression(node, parent, printStack) {
  return isFirstInStatement(printStack, {
    considerArrow: true
  });
}

function DoExpression(node, parent, printStack) {
  return isFirstInStatement(printStack);
}

function Binary(node, parent) {
  if (node.operator === "**" && t().isBinaryExpression(parent, {
    operator: "**"
  })) {
    return parent.left === node;
  }

  if (isClassExtendsClause(node, parent)) {
    return true;
  }

  if ((t().isCallExpression(parent) || t().isNewExpression(parent)) && parent.callee === node || t().isUnaryLike(parent) || t().isMemberExpression(parent) && parent.object === node || t().isAwaitExpression(parent)) {
    return true;
  }

  if (t().isBinary(parent)) {
    const parentOp = parent.operator;
    const parentPos = PRECEDENCE[parentOp];
    const nodeOp = node.operator;
    const nodePos = PRECEDENCE[nodeOp];

    if (parentPos === nodePos && parent.right === node && !t().isLogicalExpression(parent) || parentPos > nodePos) {
      return true;
    }
  }

  return false;
}

function UnionTypeAnnotation(node, parent) {
  return t().isArrayTypeAnnotation(parent) || t().isNullableTypeAnnotation(parent) || t().isIntersectionTypeAnnotation(parent) || t().isUnionTypeAnnotation(parent);
}

function TSAsExpression() {
  return true;
}

function TSTypeAssertion() {
  return true;
}

function BinaryExpression(node, parent) {
  return node.operator === "in" && (t().isVariableDeclarator(parent) || t().isFor(parent));
}

function SequenceExpression(node, parent) {
  if (t().isForStatement(parent) || t().isThrowStatement(parent) || t().isReturnStatement(parent) || t().isIfStatement(parent) && parent.test === node || t().isWhileStatement(parent) && parent.test === node || t().isForInStatement(parent) && parent.right === node || t().isSwitchStatement(parent) && parent.discriminant === node || t().isExpressionStatement(parent) && parent.expression === node) {
    return false;
  }

  return true;
}

function YieldExpression(node, parent) {
  return t().isBinary(parent) || t().isUnaryLike(parent) || t().isCallExpression(parent) || t().isMemberExpression(parent) || t().isNewExpression(parent) || t().isConditionalExpression(parent) && node === parent.test || isClassExtendsClause(node, parent);
}

function ClassExpression(node, parent, printStack) {
  return isFirstInStatement(printStack, {
    considerDefaultExports: true
  });
}

function UnaryLike(node, parent) {
  return t().isMemberExpression(parent, {
    object: node
  }) || t().isCallExpression(parent, {
    callee: node
  }) || t().isNewExpression(parent, {
    callee: node
  }) || t().isBinaryExpression(parent, {
    operator: "**",
    left: node
  }) || isClassExtendsClause(node, parent);
}

function FunctionExpression(node, parent, printStack) {
  return isFirstInStatement(printStack, {
    considerDefaultExports: true
  });
}

function ArrowFunctionExpression(node, parent) {
  return t().isExportDeclaration(parent) || ConditionalExpression(node, parent);
}

function ConditionalExpression(node, parent) {
  if (t().isUnaryLike(parent) || t().isBinary(parent) || t().isConditionalExpression(parent, {
    test: node
  }) || t().isAwaitExpression(parent) || t().isOptionalMemberExpression(parent) || t().isTaggedTemplateExpression(parent) || t().isTSTypeAssertion(parent) || t().isTSAsExpression(parent)) {
    return true;
  }

  return UnaryLike(node, parent);
}

function OptionalMemberExpression(node, parent) {
  return t().isCallExpression(parent) || t().isMemberExpression(parent);
}

function AssignmentExpression(node) {
  if (t().isObjectPattern(node.left)) {
    return true;
  } else {
    return ConditionalExpression(...arguments);
  }
}

function NewExpression(node, parent) {
  return isClassExtendsClause(node, parent);
}

function isFirstInStatement(printStack, {
  considerArrow = false,
  considerDefaultExports = false
} = {}) {
  let i = printStack.length - 1;
  let node = printStack[i];
  i--;
  let parent = printStack[i];

  while (i > 0) {
    if (t().isExpressionStatement(parent, {
      expression: node
    }) || t().isTaggedTemplateExpression(parent) || considerDefaultExports && t().isExportDefaultDeclaration(parent, {
      declaration: node
    }) || considerArrow && t().isArrowFunctionExpression(parent, {
      body: node
    })) {
      return true;
    }

    if (t().isCallExpression(parent, {
      callee: node
    }) || t().isSequenceExpression(parent) && parent.expressions[0] === node || t().isMemberExpression(parent, {
      object: node
    }) || t().isConditional(parent, {
      test: node
    }) || t().isBinary(parent, {
      left: node
    }) || t().isAssignmentExpression(parent, {
      left: node
    })) {
      node = parent;
      i--;
      parent = printStack[i];
    } else {
      return false;
    }
  }

  return false;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvZ2VuZXJhdG9yL2xpYi9ub2RlL3BhcmVudGhlc2VzLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiRnVuY3Rpb25UeXBlQW5ub3RhdGlvbiIsIk51bGxhYmxlVHlwZUFubm90YXRpb24iLCJVcGRhdGVFeHByZXNzaW9uIiwiT2JqZWN0RXhwcmVzc2lvbiIsIkRvRXhwcmVzc2lvbiIsIkJpbmFyeSIsIkludGVyc2VjdGlvblR5cGVBbm5vdGF0aW9uIiwiVW5pb25UeXBlQW5ub3RhdGlvbiIsIlRTQXNFeHByZXNzaW9uIiwiVFNUeXBlQXNzZXJ0aW9uIiwiQmluYXJ5RXhwcmVzc2lvbiIsIlNlcXVlbmNlRXhwcmVzc2lvbiIsIkF3YWl0RXhwcmVzc2lvbiIsIllpZWxkRXhwcmVzc2lvbiIsIkNsYXNzRXhwcmVzc2lvbiIsIlVuYXJ5TGlrZSIsIkZ1bmN0aW9uRXhwcmVzc2lvbiIsIkFycm93RnVuY3Rpb25FeHByZXNzaW9uIiwiQ29uZGl0aW9uYWxFeHByZXNzaW9uIiwiT3B0aW9uYWxNZW1iZXJFeHByZXNzaW9uIiwiQXNzaWdubWVudEV4cHJlc3Npb24iLCJOZXdFeHByZXNzaW9uIiwidCIsImRhdGEiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJvYmoiLCJfX2VzTW9kdWxlIiwibmV3T2JqIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldCIsInNldCIsImRlZmF1bHQiLCJQUkVDRURFTkNFIiwiaW4iLCJpbnN0YW5jZW9mIiwiaXNDbGFzc0V4dGVuZHNDbGF1c2UiLCJub2RlIiwicGFyZW50IiwiaXNDbGFzc0RlY2xhcmF0aW9uIiwiaXNDbGFzc0V4cHJlc3Npb24iLCJzdXBlckNsYXNzIiwiaXNBcnJheVR5cGVBbm5vdGF0aW9uIiwiaXNNZW1iZXJFeHByZXNzaW9uIiwib2JqZWN0IiwiaXNDYWxsRXhwcmVzc2lvbiIsImNhbGxlZSIsImlzTmV3RXhwcmVzc2lvbiIsInByaW50U3RhY2siLCJpc0ZpcnN0SW5TdGF0ZW1lbnQiLCJjb25zaWRlckFycm93Iiwib3BlcmF0b3IiLCJpc0JpbmFyeUV4cHJlc3Npb24iLCJsZWZ0IiwiaXNVbmFyeUxpa2UiLCJpc0F3YWl0RXhwcmVzc2lvbiIsImlzQmluYXJ5IiwicGFyZW50T3AiLCJwYXJlbnRQb3MiLCJub2RlT3AiLCJub2RlUG9zIiwicmlnaHQiLCJpc0xvZ2ljYWxFeHByZXNzaW9uIiwiaXNOdWxsYWJsZVR5cGVBbm5vdGF0aW9uIiwiaXNJbnRlcnNlY3Rpb25UeXBlQW5ub3RhdGlvbiIsImlzVW5pb25UeXBlQW5ub3RhdGlvbiIsImlzVmFyaWFibGVEZWNsYXJhdG9yIiwiaXNGb3IiLCJpc0ZvclN0YXRlbWVudCIsImlzVGhyb3dTdGF0ZW1lbnQiLCJpc1JldHVyblN0YXRlbWVudCIsImlzSWZTdGF0ZW1lbnQiLCJ0ZXN0IiwiaXNXaGlsZVN0YXRlbWVudCIsImlzRm9ySW5TdGF0ZW1lbnQiLCJpc1N3aXRjaFN0YXRlbWVudCIsImRpc2NyaW1pbmFudCIsImlzRXhwcmVzc2lvblN0YXRlbWVudCIsImV4cHJlc3Npb24iLCJpc0NvbmRpdGlvbmFsRXhwcmVzc2lvbiIsImNvbnNpZGVyRGVmYXVsdEV4cG9ydHMiLCJpc0V4cG9ydERlY2xhcmF0aW9uIiwiaXNPcHRpb25hbE1lbWJlckV4cHJlc3Npb24iLCJpc1RhZ2dlZFRlbXBsYXRlRXhwcmVzc2lvbiIsImlzVFNUeXBlQXNzZXJ0aW9uIiwiaXNUU0FzRXhwcmVzc2lvbiIsImlzT2JqZWN0UGF0dGVybiIsImFyZ3VtZW50cyIsImkiLCJsZW5ndGgiLCJpc0V4cG9ydERlZmF1bHREZWNsYXJhdGlvbiIsImRlY2xhcmF0aW9uIiwiaXNBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbiIsImJvZHkiLCJpc1NlcXVlbmNlRXhwcmVzc2lvbiIsImV4cHJlc3Npb25zIiwiaXNDb25kaXRpb25hbCIsImlzQXNzaWdubWVudEV4cHJlc3Npb24iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzNDQyxFQUFBQSxLQUFLLEVBQUU7QUFEb0MsQ0FBN0M7QUFHQUQsT0FBTyxDQUFDRSxzQkFBUixHQUFpQ0YsT0FBTyxDQUFDRyxzQkFBUixHQUFpQ0Esc0JBQWxFO0FBQ0FILE9BQU8sQ0FBQ0ksZ0JBQVIsR0FBMkJBLGdCQUEzQjtBQUNBSixPQUFPLENBQUNLLGdCQUFSLEdBQTJCQSxnQkFBM0I7QUFDQUwsT0FBTyxDQUFDTSxZQUFSLEdBQXVCQSxZQUF2QjtBQUNBTixPQUFPLENBQUNPLE1BQVIsR0FBaUJBLE1BQWpCO0FBQ0FQLE9BQU8sQ0FBQ1EsMEJBQVIsR0FBcUNSLE9BQU8sQ0FBQ1MsbUJBQVIsR0FBOEJBLG1CQUFuRTtBQUNBVCxPQUFPLENBQUNVLGNBQVIsR0FBeUJBLGNBQXpCO0FBQ0FWLE9BQU8sQ0FBQ1csZUFBUixHQUEwQkEsZUFBMUI7QUFDQVgsT0FBTyxDQUFDWSxnQkFBUixHQUEyQkEsZ0JBQTNCO0FBQ0FaLE9BQU8sQ0FBQ2Esa0JBQVIsR0FBNkJBLGtCQUE3QjtBQUNBYixPQUFPLENBQUNjLGVBQVIsR0FBMEJkLE9BQU8sQ0FBQ2UsZUFBUixHQUEwQkEsZUFBcEQ7QUFDQWYsT0FBTyxDQUFDZ0IsZUFBUixHQUEwQkEsZUFBMUI7QUFDQWhCLE9BQU8sQ0FBQ2lCLFNBQVIsR0FBb0JBLFNBQXBCO0FBQ0FqQixPQUFPLENBQUNrQixrQkFBUixHQUE2QkEsa0JBQTdCO0FBQ0FsQixPQUFPLENBQUNtQix1QkFBUixHQUFrQ0EsdUJBQWxDO0FBQ0FuQixPQUFPLENBQUNvQixxQkFBUixHQUFnQ0EscUJBQWhDO0FBQ0FwQixPQUFPLENBQUNxQix3QkFBUixHQUFtQ0Esd0JBQW5DO0FBQ0FyQixPQUFPLENBQUNzQixvQkFBUixHQUEr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bnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkZ1bmN0aW9uVHlwZUFubm90YXRpb24gPSBleHBvcnRzLk51bGxhYmxlVHlwZUFubm90YXRpb24gPSBOdWxsYWJsZVR5cGVBbm5vdGF0aW9uO1xuZXhwb3J0cy5VcGRhdGVFeHByZXNzaW9uID0gVXBkYXRlRXhwcmVzc2lvbjtcbmV4cG9ydHMuT2JqZWN0RXhwcmVzc2lvbiA9IE9iamVjdEV4cHJlc3Npb247XG5leHBvcnRzLkRvRXhwcmVzc2lvbiA9IERvRXhwcmVzc2lvbjtcbmV4cG9ydHMuQmluYXJ5ID0gQmluYXJ5O1xuZXhwb3J0cy5JbnRlcnNlY3Rpb25UeXBlQW5ub3RhdGlvbiA9IGV4cG9ydHMuVW5pb25UeXBlQW5ub3RhdGlvbiA9IFVuaW9uVHlwZUFubm90YXRpb247XG5leHBvcnRzLlRTQXNFeHByZXNzaW9uID0gVFNBc0V4cHJlc3Npb247XG5leHBvcnRzLlRTVHlwZUFzc2VydGlvbiA9IFRTVHlwZUFzc2VydGlvbjtcbmV4cG9ydHMuQmluYXJ5RXhwcmVzc2lvbiA9IEJpbmFyeUV4cHJlc3Npb247XG5leHBvcnRzLlNlcXVlbmNlRXhwcmVzc2lvbiA9IFNlcXVlbmNlRXhwcmVzc2lvbjtcbmV4cG9ydHMuQXdhaXRFeHByZXNzaW9uID0gZXhwb3J0cy5ZaWVsZEV4cHJlc3Npb24gPSBZaWVsZEV4cHJlc3Npb247XG5leHBvcnRzLkNsYXNzRXhwcmVzc2lvbiA9IENsYXNzRXhwcmVzc2lvbjtcbmV4cG9ydHMuVW5hcnlMaWtlID0gVW5hcnlMaWtlO1xuZXhwb3J0cy5GdW5jdGlvbkV4cHJlc3Npb24gPSBGdW5jdGlvbkV4cHJlc3Npb247XG5leHBvcnRzLkFycm93RnVuY3Rpb25FeHByZXNzaW9uID0gQXJyb3dGdW5jdGlvbkV4cHJlc3Npb247XG5leHBvcnRzLkNvbmRpdGlvbmFsRXhwcmVzc2lvbiA9IENvbmRpdGlvbmFsRXhwcmVzc2lvbjtcbmV4cG9ydHMuT3B0aW9uYWxNZW1iZXJFeHByZXNzaW9uID0gT3B0aW9uYWxNZW1iZXJFeHByZXNzaW9uO1xuZXhwb3J0cy5Bc3NpZ25tZW50RXhwcmVzc2lvbiA9IEFzc2lnbm1lbnRFeHByZXNzaW9uO1xuZXhwb3J0cy5OZXdFeHByZXNzaW9uID0gTmV3RXhwcmVzc2lvbjtcblxuZnVuY3Rpb24gdCgpIHtcbiAgY29uc3QgZGF0YSA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJAYmFiZWwvdHlwZXNcIikpO1xuXG4gIHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307IGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuY29uc3QgUFJFQ0VERU5DRSA9IHtcbiAgXCJ8fFwiOiAwLFxuICBcIiYmXCI6IDEsXG4gIFwifFwiOiAyLFxuICBcIl5cIjogMyxcbiAgXCImXCI6IDQsXG4gIFwiPT1cIjogNSxcbiAgXCI9PT1cIjogNSxcbiAgXCIhPVwiOiA1LFxuICBcIiE9PVwiOiA1LFxuICBcIjxcIjogNixcbiAgXCI+XCI6IDYsXG4gIFwiPD1cIjogNixcbiAgXCI+PVwiOiA2LFxuICBpbjogNixcbiAgaW5zdGFuY2VvZjogNixcbiAgXCI+PlwiOiA3LFxuICBcIjw8XCI6IDcsXG4gIFwiPj4+XCI6IDcsXG4gIFwiK1wiOiA4LFxuICBcIi1cIjogOCxcbiAgXCIqXCI6IDksXG4gIFwiL1wiOiA5LFxuICBcIiVcIjogOSxcbiAgXCIqKlwiOiAxMFxufTtcblxuY29uc3QgaXNDbGFzc0V4dGVuZHNDbGF1c2UgPSAobm9kZSwgcGFyZW50KSA9PiAodCgpLmlzQ2xhc3NEZWNsYXJhdGlvbihwYXJlbnQpIHx8IHQoKS5pc0NsYXNzRXhwcmVzc2lvbihwYXJlbnQpKSAmJiBwYXJlbnQuc3VwZXJDbGFzcyA9PT0gbm9kZTtcblxuZnVuY3Rpb24gTnVsbGFibGVUeXBlQW5ub3RhdGlvbihub2RlLCBwYXJlbnQpIHtcbiAgcmV0dXJuIHQoKS5pc0FycmF5VHlwZUFubm90YXRpb24ocGFyZW50KTtcbn1cblxuZnVuY3Rpb24gVXBkYXRlRXhwcmVzc2lvbihub2RlLCBwYXJlbnQpIHtcbiAgcmV0dXJuIHQoKS5pc01lbWJlckV4cHJlc3Npb24ocGFyZW50LCB7XG4gICAgb2JqZWN0OiBub2RlXG4gIH0pIHx8IHQoKS5pc0NhbGxFeHByZXNzaW9uKHBhcmVudCwge1xuICAgIGNhbGxlZTogbm9kZVxuICB9KSB8fCB0KCkuaXNOZXdFeHByZXNzaW9uKHBhcmVudCwge1xuICAgIGNhbGxlZTogbm9kZVxuICB9KSB8fCBpc0NsYXNzRXh0ZW5kc0NsYXVzZShub2RlLCBwYXJlbnQpO1xufVxuXG5mdW5jdGlvbiBPYmplY3RFeHByZXNzaW9uKG5vZGUsIHBhcmVudCwgcHJpbnRTdGFjaykge1xuICByZXR1cm4gaXNGaXJzdEluU3RhdGVtZW50KHByaW50U3RhY2ssIHtcbiAgICBjb25zaWRlckFycm93OiB0cnVlXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBEb0V4cHJlc3Npb24obm9kZSwgcGFyZW50LCBwcmludFN0YWNrKSB7XG4gIHJldHVybiBpc0ZpcnN0SW5TdGF0ZW1lbnQocHJpbnRTdGFjayk7XG59XG5cbmZ1bmN0aW9uIEJpbmFyeShub2RlLCBwYXJlbnQpIHtcbiAgaWYgKG5vZGUub3BlcmF0b3IgPT09IFwiKipcIiAmJiB0KCkuaXNCaW5hcnlFeHByZXNzaW9uKHBhcmVudCwge1xuICAgIG9wZXJhdG9yOiBcIioqXCJcbiAgfSkpIHtcbiAgICByZXR1cm4gcGFyZW50LmxlZnQgPT09IG5vZGU7XG4gIH1cblxuICBpZiAoaXNDbGFzc0V4dGVuZHNDbGF1c2Uobm9kZSwgcGFyZW50KSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKCh0KCkuaXNDYWxsRXhwcmVzc2lvbihwYXJlbnQpIHx8IHQoKS5pc05ld0V4cHJlc3Npb24ocGFyZW50KSkgJiYgcGFyZW50LmNhbGxlZSA9PT0gbm9kZSB8fCB0KCkuaXNVbmFyeUxpa2UocGFyZW50KSB8fCB0KCkuaXNNZW1iZXJFeHByZXNzaW9uKHBhcmVudCkgJiYgcGFyZW50Lm9iamVjdCA9PT0gbm9kZSB8fCB0KCkuaXNBd2FpdEV4cHJlc3Npb24ocGFyZW50KSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHQoKS5pc0JpbmFyeShwYXJlbnQpKSB7XG4gICAgY29uc3QgcGFyZW50T3AgPSBwYXJlbnQub3BlcmF0b3I7XG4gICAgY29uc3QgcGFyZW50UG9zID0gUFJFQ0VERU5DRVtwYXJlbnRPcF07XG4gICAgY29uc3Qgbm9kZU9wID0gbm9kZS5vcGVyYXRvcjtcbiAgICBjb25zdCBub2RlUG9zID0gUFJFQ0VERU5DRVtub2RlT3BdO1xuXG4gICAgaWYgKHBhcmVudFBvcyA9PT0gbm9kZVBvcyAmJiBwYXJlbnQucmlnaHQgPT09IG5vZGUgJiYgIXQoKS5pc0xvZ2ljYWxFeHByZXNzaW9uKHBhcmVudCkgfHwgcGFyZW50UG9zID4gbm9kZVBvcykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBVbmlvblR5cGVBbm5vdGF0aW9uKG5vZGUsIHBhcmVudCkge1xuICByZXR1cm4gdCgpLmlzQXJyYXlUeXBlQW5ub3RhdGlvbihwYXJlbnQpIHx8IHQoKS5pc051bGxhYmxlVHlwZUFubm90YXRpb24ocGFyZW50KSB8fCB0KCkuaXNJbnRlcnNlY3Rpb25UeXBlQW5ub3RhdGlvbihwYXJlbnQpIHx8IHQoKS5pc1VuaW9uVHlwZUFubm90YXRpb24ocGFyZW50KTtcbn1cblxuZnVuY3Rpb24gVFNBc0V4cHJlc3Npb24oKSB7XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBUU1R5cGVBc3NlcnRpb24oKSB7XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBCaW5hcnlFeHByZXNzaW9uKG5vZGUsIHBhcmVudCkge1xuICByZXR1cm4gbm9kZS5vcGVyYXRvciA9PT0gXCJpblwiICYmICh0KCkuaXNWYXJpYWJsZURlY2xhcmF0b3IocGFyZW50KSB8fCB0KCkuaXNGb3IocGFyZW50KSk7XG59XG5cbmZ1bmN0aW9uIFNlcXVlbmNlRXhwcmVzc2lvbihub2RlLCBwYXJlbnQpIHtcbiAgaWYgKHQoKS5pc0ZvclN0YXRlbWVudChwYXJlbnQpIHx8IHQoKS5pc1Rocm93U3RhdGVtZW50KHBhcmVudCkgfHwgdCgpLmlzUmV0dXJuU3RhdGVtZW50KHBhcmVudCkgfHwgdCgpLmlzSWZTdGF0ZW1lbnQocGFyZW50KSAmJiBwYXJlbnQudGVzdCA9PT0gbm9kZSB8fCB0KCkuaXNXaGlsZVN0YXRlbWVudChwYXJlbnQpICYmIHBhcmVudC50ZXN0ID09PSBub2RlIHx8IHQoKS5pc0ZvckluU3RhdGVtZW50KHBhcmVudCkgJiYgcGFyZW50LnJpZ2h0ID09PSBub2RlIHx8IHQoKS5pc1N3aXRjaFN0YXRlbWVudChwYXJlbnQpICYmIHBhcmVudC5kaXNjcmltaW5hbnQgPT09IG5vZGUgfHwgdCgpLmlzRXhwcmVzc2lvblN0YXRlbWVudChwYXJlbnQpICYmIHBhcmVudC5leHByZXNzaW9uID09PSBub2RlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIFlpZWxkRXhwcmVzc2lvbihub2RlLCBwYXJlbnQpIHtcbiAgcmV0dXJuIHQoKS5pc0JpbmFyeShwYXJlbnQpIHx8IHQoKS5pc1VuYXJ5TGlrZShwYXJlbnQpIHx8IHQoKS5pc0NhbGxFeHByZXNzaW9uKHBhcmVudCkgfHwgdCgpLmlzTWVtYmVyRXhwcmVzc2lvbihwYXJlbnQpIHx8IHQoKS5pc05ld0V4cHJlc3Npb24ocGFyZW50KSB8fCB0KCkuaXNDb25kaXRpb25hbEV4cHJlc3Npb24ocGFyZW50KSAmJiBub2RlID09PSBwYXJlbnQudGVzdCB8fCBpc0NsYXNzRXh0ZW5kc0NsYXVzZShub2RlLCBwYXJlbnQpO1xufVxuXG5mdW5jdGlvbiBDbGFzc0V4cHJlc3Npb24obm9kZSwgcGFyZW50LCBwcmludFN0YWNrKSB7XG4gIHJldHVybiBpc0ZpcnN0SW5TdGF0ZW1lbnQocHJpbnRTdGFjaywge1xuICAgIGNvbnNpZGVyRGVmYXVsdEV4cG9ydHM6IHRydWVcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIFVuYXJ5TGlrZShub2RlLCBwYXJlbnQpIHtcbiAgcmV0dXJuIHQoKS5pc01lbWJlckV4cHJlc3Npb24ocGFyZW50LCB7XG4gICAgb2JqZWN0OiBub2RlXG4gIH0pIHx8IHQoKS5pc0NhbGxFeHByZXNzaW9uKHBhcmVudCwge1xuICAgIGNhbGxlZTogbm9kZVxuICB9KSB8fCB0KCkuaXNOZXdFeHByZXNzaW9uKHBhcmVudCwge1xuICAgIGNhbGxlZTogbm9kZVxuICB9KSB8fCB0KCkuaXNCaW5hcnlFeHByZXNzaW9uKHBhcmVudCwge1xuICAgIG9wZXJhdG9yOiBcIioqXCIsXG4gICAgbGVmdDogbm9kZVxuICB9KSB8fCBpc0NsYXNzRXh0ZW5kc0NsYXVzZShub2RlLCBwYXJlbnQpO1xufVxuXG5mdW5jdGlvbiBGdW5jdGlvbkV4cHJlc3Npb24obm9kZSwgcGFyZW50LCBwcmludFN0YWNrKSB7XG4gIHJldHVybiBpc0ZpcnN0SW5TdGF0ZW1lbnQocHJpbnRTdGFjaywge1xuICAgIGNvbnNpZGVyRGVmYXVsdEV4cG9ydHM6IHRydWVcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIEFycm93RnVuY3Rpb25FeHByZXNzaW9uKG5vZGUsIHBhcmVudCkge1xuICByZXR1cm4gdCgpLmlzRXhwb3J0RGVjbGFyYXRpb24ocGFyZW50KSB8fCBDb25kaXRpb25hbEV4cHJlc3Npb24obm9kZSwgcGFyZW50KTtcbn1cblxuZnVuY3Rpb24gQ29uZGl0aW9uYWxFeHByZXNzaW9uKG5vZGUsIHBhcmVudCkge1xuICBpZiAodCgpLmlzVW5hcnlMaWtlKHBhcmVudCkgfHwgdCgpLmlzQmluYXJ5KHBhcmVudCkgfHwgdCgpLmlzQ29uZGl0aW9uYWxFeHByZXNzaW9uKHBhcmVudCwge1xuICAgIHRlc3Q6IG5vZGVcbiAgfSkgfHwgdCgpLmlzQXdhaXRFeHByZXNzaW9uKHBhcmVudCkgfHwgdCgpLmlzT3B0aW9uYWxNZW1iZXJFeHByZXNzaW9uKHBhcmVudCkgfHwgdCgpLmlzVGFnZ2VkVGVtcGxhdGVFeHByZXNzaW9uKHBhcmVudCkgfHwgdCgpLmlzVFNUeXBlQXNzZXJ0aW9uKHBhcmVudCkgfHwgdCgpLmlzVFNBc0V4cHJlc3Npb24ocGFyZW50KSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIFVuYXJ5TGlrZShub2RlLCBwYXJlbnQpO1xufVxuXG5mdW5jdGlvbiBPcHRpb25hbE1lbWJlckV4cHJlc3Npb24obm9kZSwgcGFyZW50KSB7XG4gIHJldHVybiB0KCkuaXNDYWxsRXhwcmVzc2lvbihwYXJlbnQpIHx8IHQoKS5pc01lbWJlckV4cHJlc3Npb24ocGFyZW50KTtcbn1cblxuZnVuY3Rpb24gQXNzaWdubWVudEV4cHJlc3Npb24obm9kZSkge1xuICBpZiAodCgpLmlzT2JqZWN0UGF0dGVybihub2RlLmxlZnQpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIENvbmRpdGlvbmFsRXhwcmVzc2lvbiguLi5hcmd1bWVudHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIE5ld0V4cHJlc3Npb24obm9kZSwgcGFyZW50KSB7XG4gIHJldHVybiBpc0NsYXNzRXh0ZW5kc0NsYXVzZShub2RlLCBwYXJlbnQpO1xufVxuXG5mdW5jdGlvbiBpc0ZpcnN0SW5TdGF0ZW1lbnQocHJpbnRTdGFjaywge1xuICBjb25zaWRlckFycm93ID0gZmFsc2UsXG4gIGNvbnNpZGVyRGVmYXVsdEV4cG9ydHMgPSBmYWxzZVxufSA9IHt9KSB7XG4gIGxldCBpID0gcHJpbnRTdGFjay5sZW5ndGggLSAxO1xuICBsZXQgbm9kZSA9IHByaW50U3RhY2tbaV07XG4gIGktLTtcbiAgbGV0IHBhcmVudCA9IHByaW50U3RhY2tbaV07XG5cbiAgd2hpbGUgKGkgPiAwKSB7XG4gICAgaWYgKHQoKS5pc0V4cHJlc3Npb25TdGF0ZW1lbnQocGFyZW50LCB7XG4gICAgICBleHByZXNzaW9uOiBub2RlXG4gICAgfSkgfHwgdCgpLmlzVGFnZ2VkVGVtcGxhdGVFeHByZXNzaW9uKHBhcmVudCkgfHwgY29uc2lkZXJEZWZhdWx0RXhwb3J0cyAmJiB0KCkuaXNFeHBvcnREZWZhdWx0RGVjbGFyYXRpb24ocGFyZW50LCB7XG4gICAgICBkZWNsYXJhdGlvbjogbm9kZVxuICAgIH0pIHx8IGNvbnNpZGVyQXJyb3cgJiYgdCgpLmlzQXJyb3dGdW5jdGlvbkV4cHJlc3Npb24ocGFyZW50LCB7XG4gICAgICBib2R5OiBub2RlXG4gICAgfSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0KCkuaXNDYWxsRXhwcmVzc2lvbihwYXJlbnQsIHtcbiAgICAgIGNhbGxlZTogbm9kZVxuICAgIH0pIHx8IHQoKS5pc1NlcXVlbmNlRXhwcmVzc2lvbihwYXJlbnQpICYmIHBhcmVudC5leHByZXNzaW9uc1swXSA9PT0gbm9kZSB8fCB0KCkuaXNNZW1iZXJFeHByZXNzaW9uKHBhcmVudCwge1xuICAgICAgb2JqZWN0OiBub2RlXG4gICAgfSkgfHwgdCgpLmlzQ29uZGl0aW9uYWwocGFyZW50LCB7XG4gICAgICB0ZXN0OiBub2RlXG4gICAgfSkgfHwgdCgpLmlzQmluYXJ5KHBhcmVudCwge1xuICAgICAgbGVmdDogbm9kZVxuICAgIH0pIHx8IHQoKS5pc0Fzc2lnbm1lbnRFeHByZXNzaW9uKHBhcmVudCwge1xuICAgICAgbGVmdDogbm9kZVxuICAgIH0pKSB7XG4gICAgICBub2RlID0gcGFyZW50O1xuICAgICAgaS0tO1xuICAgICAgcGFyZW50ID0gcHJpbnRTdGFja1tpXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn0iXX0=