"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.File = File;
exports.Program = Program;
exports.BlockStatement = BlockStatement;
exports.Noop = Noop;
exports.Directive = Directive;
exports.InterpreterDirective = InterpreterDirective;
Object.defineProperty(exports, "DirectiveLiteral", {
  enumerable: true,
  get: function () {
    return _types.StringLiteral;
  }
});

var _types = require("./types");

function File(node) {
  if (node.program) {
    this.print(node.program.interpreter, node);
  }

  this.print(node.program, node);
}

function Program(node) {
  this.printInnerComments(node, false);
  this.printSequence(node.directives, node);
  if (node.directives && node.directives.length) this.newline();
  this.printSequence(node.body, node);
}

function BlockStatement(node) {
  this.token("{");
  this.printInnerComments(node);
  const hasDirectives = node.directives && node.directives.length;

  if (node.body.length || hasDirectives) {
    this.newline();
    this.printSequence(node.directives, node, {
      indent: true
    });
    if (hasDirectives) this.newline();
    this.printSequence(node.body, node, {
      indent: true
    });
    this.removeTrailingNewline();
    this.source("end", node.loc);
    if (!this.endsWith("\n")) this.newline();
    this.rightBrace();
  } else {
    this.source("end", node.loc);
    this.token("}");
  }
}

function Noop() {}

function Directive(node) {
  this.print(node.value, node);
  this.semicolon();
}

function InterpreterDirective(node) {
  this.token(`#!${node.value}\n`);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvZ2VuZXJhdG9yL2xpYi9nZW5lcmF0b3JzL2Jhc2UuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJGaWxlIiwiUHJvZ3JhbSIsIkJsb2NrU3RhdGVtZW50IiwiTm9vcCIsIkRpcmVjdGl2ZSIsIkludGVycHJldGVyRGlyZWN0aXZlIiwiZW51bWVyYWJsZSIsImdldCIsIl90eXBlcyIsIlN0cmluZ0xpdGVyYWwiLCJyZXF1aXJlIiwibm9kZSIsInByb2dyYW0iLCJwcmludCIsImludGVycHJldGVyIiwicHJpbnRJbm5lckNvbW1lbnRzIiwicHJpbnRTZXF1ZW5jZSIsImRpcmVjdGl2ZXMiLCJsZW5ndGgiLCJuZXdsaW5lIiwiYm9keSIsInRva2VuIiwiaGFzRGlyZWN0aXZlcyIsImluZGVudCIsInJlbW92ZVRyYWlsaW5nTmV3bGluZSIsInNvdXJjZSIsImxvYyIsImVuZHNXaXRoIiwicmlnaHRCcmFjZSIsInNlbWljb2xvbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLEVBQUFBLEtBQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLElBQVIsR0FBZUEsSUFBZjtBQUNBRixPQUFPLENBQUNHLE9BQVIsR0FBa0JBLE9BQWxCO0FBQ0FILE9BQU8sQ0FBQ0ksY0FBUixHQUF5QkEsY0FBekI7QUFDQUosT0FBTyxDQUFDSyxJQUFSLEdBQWVBLElBQWY7QUFDQUwsT0FBTyxDQUFDTSxTQUFSLEdBQW9CQSxTQUFwQjtBQUNBTixPQUFPLENBQUNPLG9CQUFSLEdBQStCQSxvQkFBL0I7QUFDQVQsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixrQkFBL0IsRUFBbUQ7QUFDakRRLEVBQUFBLFVBQVUsRUFBRSxJQURxQztBQUVqREMsRUFBQUEsR0FBRyxFQUFFLFlBQVk7QUFDZixXQUFPQyxNQUFNLENBQUNDLGFBQWQ7QUFDRDtBQUpnRCxDQUFuRDs7QUFPQSxJQUFJRCxNQUFNLEdBQUdFLE9BQU8sQ0FBQyxTQUFELENBQXBCOztBQUVBLFNBQVNWLElBQVQsQ0FBY1csSUFBZCxFQUFvQjtBQUNsQixNQUFJQSxJQUFJLENBQUNDLE9BQVQsRUFBa0I7QUFDaEIsU0FBS0MsS0FBTCxDQUFXRixJQUFJLENBQUNDLE9BQUwsQ0FBYUUsV0FBeEIsRUFBcUNILElBQXJDO0FBQ0Q7O0FBRUQsT0FBS0UsS0FBTCxDQUFXRixJQUFJLENBQUNDLE9BQWhCLEVBQXlCRCxJQUF6QjtBQUNEOztBQUVELFNBQVNWLE9BQVQsQ0FBaUJVLElBQWpCLEVBQXVCO0FBQ3JCLE9BQUtJLGtCQUFMLENBQXdCSixJQUF4QixFQUE4QixLQUE5QjtBQUNBLE9BQUtLLGFBQUwsQ0FBbUJMLElBQUksQ0FBQ00sVUFBeEIsRUFBb0NOLElBQXBDO0FBQ0EsTUFBSUEsSUFBSSxDQUFDTSxVQUFMLElBQW1CTixJQUFJLENBQUNNLFVBQUwsQ0FBZ0JDLE1BQXZDLEVBQStDLEtBQUtDLE9BQUw7QUFDL0MsT0FBS0gsYUFBTCxDQUFtQkwsSUFBSSxDQUFDUyxJQUF4QixFQUE4QlQsSUFBOUI7QUFDRDs7QUFFRCxTQUFTVCxjQUFULENBQXdCUyxJQUF4QixFQUE4QjtBQUM1QixPQUFLVSxLQUFMLENBQVcsR0FBWDtBQUNBLE9BQUtOLGtCQUFMLENBQXdCSixJQUF4QjtBQUNBLFFBQU1XLGFBQWEsR0FBR1gsSUFBSSxDQUFDTSxVQUFMLElBQW1CTixJQUFJLENBQUNNLFVBQUwsQ0FBZ0JDLE1BQXpEOztBQUVBLE1BQUlQLElBQUksQ0FBQ1MsSUFBTCxDQUFVRixNQUFWLElBQW9CSSxhQUF4QixFQUF1QztBQUNyQyxTQUFLSCxPQUFMO0FBQ0EsU0FBS0gsYUFBTCxDQUFtQkwsSUFBSSxDQUFDTSxVQUF4QixFQUFvQ04sSUFBcEMsRUFBMEM7QUFDeENZLE1BQUFBLE1BQU0sRUFBRTtBQURnQyxLQUExQztBQUdBLFFBQUlELGFBQUosRUFBbUIsS0FBS0gsT0FBTDtBQUNuQixTQUFLSCxhQUFMLENBQW1CTCxJQUFJLENBQUNTLElBQXhCLEVBQThCVCxJQUE5QixFQUFvQztBQUNsQ1ksTUFBQUEsTUFBTSxFQUFFO0FBRDBCLEtBQXBDO0FBR0EsU0FBS0MscUJBQUw7QUFDQSxTQUFLQyxNQUFMLENBQVksS0FBWixFQUFtQmQsSUFBSSxDQUFDZSxHQUF4QjtBQUNBLFFBQUksQ0FBQyxLQUFLQyxRQUFMLENBQWMsSUFBZCxDQUFMLEVBQTBCLEtBQUtSLE9BQUw7QUFDMUIsU0FBS1MsVUFBTDtBQUNELEdBYkQsTUFhTztBQUNMLFNBQUtILE1BQUwsQ0FBWSxLQUFaLEVBQW1CZCxJQUFJLENBQUNlLEdBQXhCO0FBQ0EsU0FBS0wsS0FBTCxDQUFXLEdBQVg7QUFDRDtBQUNGOztBQUVELFNBQVNsQixJQUFULEdBQWdCLENBQUU7O0FBRWxCLFNBQVNDLFNBQVQsQ0FBbUJPLElBQW5CLEVBQXlCO0FBQ3ZCLE9BQUtFLEtBQUwsQ0FBV0YsSUFBSSxDQUFDWixLQUFoQixFQUF1QlksSUFBdkI7QUFDQSxPQUFLa0IsU0FBTDtBQUNEOztBQUVELFNBQVN4QixvQkFBVCxDQUE4Qk0sSUFBOUIsRUFBb0M7QUFDbEMsT0FBS1UsS0FBTCxDQUFZLEtBQUlWLElBQUksQ0FBQ1osS0FBTSxJQUEzQjtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkZpbGUgPSBGaWxlO1xuZXhwb3J0cy5Qcm9ncmFtID0gUHJvZ3JhbTtcbmV4cG9ydHMuQmxvY2tTdGF0ZW1lbnQgPSBCbG9ja1N0YXRlbWVudDtcbmV4cG9ydHMuTm9vcCA9IE5vb3A7XG5leHBvcnRzLkRpcmVjdGl2ZSA9IERpcmVjdGl2ZTtcbmV4cG9ydHMuSW50ZXJwcmV0ZXJEaXJlY3RpdmUgPSBJbnRlcnByZXRlckRpcmVjdGl2ZTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRpcmVjdGl2ZUxpdGVyYWxcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX3R5cGVzLlN0cmluZ0xpdGVyYWw7XG4gIH1cbn0pO1xuXG52YXIgX3R5cGVzID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG5cbmZ1bmN0aW9uIEZpbGUobm9kZSkge1xuICBpZiAobm9kZS5wcm9ncmFtKSB7XG4gICAgdGhpcy5wcmludChub2RlLnByb2dyYW0uaW50ZXJwcmV0ZXIsIG5vZGUpO1xuICB9XG5cbiAgdGhpcy5wcmludChub2RlLnByb2dyYW0sIG5vZGUpO1xufVxuXG5mdW5jdGlvbiBQcm9ncmFtKG5vZGUpIHtcbiAgdGhpcy5wcmludElubmVyQ29tbWVudHMobm9kZSwgZmFsc2UpO1xuICB0aGlzLnByaW50U2VxdWVuY2Uobm9kZS5kaXJlY3RpdmVzLCBub2RlKTtcbiAgaWYgKG5vZGUuZGlyZWN0aXZlcyAmJiBub2RlLmRpcmVjdGl2ZXMubGVuZ3RoKSB0aGlzLm5ld2xpbmUoKTtcbiAgdGhpcy5wcmludFNlcXVlbmNlKG5vZGUuYm9keSwgbm9kZSk7XG59XG5cbmZ1bmN0aW9uIEJsb2NrU3RhdGVtZW50KG5vZGUpIHtcbiAgdGhpcy50b2tlbihcIntcIik7XG4gIHRoaXMucHJpbnRJbm5lckNvbW1lbnRzKG5vZGUpO1xuICBjb25zdCBoYXNEaXJlY3RpdmVzID0gbm9kZS5kaXJlY3RpdmVzICYmIG5vZGUuZGlyZWN0aXZlcy5sZW5ndGg7XG5cbiAgaWYgKG5vZGUuYm9keS5sZW5ndGggfHwgaGFzRGlyZWN0aXZlcykge1xuICAgIHRoaXMubmV3bGluZSgpO1xuICAgIHRoaXMucHJpbnRTZXF1ZW5jZShub2RlLmRpcmVjdGl2ZXMsIG5vZGUsIHtcbiAgICAgIGluZGVudDogdHJ1ZVxuICAgIH0pO1xuICAgIGlmIChoYXNEaXJlY3RpdmVzKSB0aGlzLm5ld2xpbmUoKTtcbiAgICB0aGlzLnByaW50U2VxdWVuY2Uobm9kZS5ib2R5LCBub2RlLCB7XG4gICAgICBpbmRlbnQ6IHRydWVcbiAgICB9KTtcbiAgICB0aGlzLnJlbW92ZVRyYWlsaW5nTmV3bGluZSgpO1xuICAgIHRoaXMuc291cmNlKFwiZW5kXCIsIG5vZGUubG9jKTtcbiAgICBpZiAoIXRoaXMuZW5kc1dpdGgoXCJcXG5cIikpIHRoaXMubmV3bGluZSgpO1xuICAgIHRoaXMucmlnaHRCcmFjZSgpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuc291cmNlKFwiZW5kXCIsIG5vZGUubG9jKTtcbiAgICB0aGlzLnRva2VuKFwifVwiKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBOb29wKCkge31cblxuZnVuY3Rpb24gRGlyZWN0aXZlKG5vZGUpIHtcbiAgdGhpcy5wcmludChub2RlLnZhbHVlLCBub2RlKTtcbiAgdGhpcy5zZW1pY29sb24oKTtcbn1cblxuZnVuY3Rpb24gSW50ZXJwcmV0ZXJEaXJlY3RpdmUobm9kZSkge1xuICB0aGlzLnRva2VuKGAjISR7bm9kZS52YWx1ZX1cXG5gKTtcbn0iXX0=