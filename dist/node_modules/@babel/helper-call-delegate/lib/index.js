"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _helperHoistVariables() {
  const data = _interopRequireDefault(require("@babel/helper-hoist-variables"));

  _helperHoistVariables = function () {
    return data;
  };

  return data;
}

function t() {
  const data = _interopRequireWildcard(require("@babel/types"));

  t = function () {
    return data;
  };

  return data;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};

    if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};

          if (desc.get || desc.set) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
    }

    newObj.default = obj;
    return newObj;
  }
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

const visitor = {
  enter(path, state) {
    if (path.isThisExpression()) {
      state.foundThis = true;
    }

    if (path.isReferencedIdentifier({
      name: "arguments"
    })) {
      state.foundArguments = true;
    }
  },

  Function(path) {
    path.skip();
  }

};

function _default(path, scope = path.scope) {
  const {
    node
  } = path;
  const container = t().functionExpression(null, [], node.body, node.generator, node.async);
  let callee = container;
  let args = [];
  (0, _helperHoistVariables().default)(path, id => scope.push({
    id
  }));
  const state = {
    foundThis: false,
    foundArguments: false
  };
  path.traverse(visitor, state);

  if (state.foundArguments) {
    callee = t().memberExpression(container, t().identifier("apply"));
    args = [];

    if (state.foundThis) {
      args.push(t().thisExpression());
    }

    if (state.foundArguments) {
      if (!state.foundThis) args.push(t().nullLiteral());
      args.push(t().identifier("arguments"));
    }
  }

  let call = t().callExpression(callee, args);
  if (node.generator) call = t().yieldExpression(call, true);
  return t().returnStatement(call);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvaGVscGVyLWNhbGwtZGVsZWdhdGUvbGliL2luZGV4LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIl9kZWZhdWx0IiwiX2hlbHBlckhvaXN0VmFyaWFibGVzIiwiZGF0YSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwidCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwib2JqIiwiX19lc01vZHVsZSIsIm5ld09iaiIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXQiLCJzZXQiLCJ2aXNpdG9yIiwiZW50ZXIiLCJwYXRoIiwic3RhdGUiLCJpc1RoaXNFeHByZXNzaW9uIiwiZm91bmRUaGlzIiwiaXNSZWZlcmVuY2VkSWRlbnRpZmllciIsIm5hbWUiLCJmb3VuZEFyZ3VtZW50cyIsIkZ1bmN0aW9uIiwic2tpcCIsInNjb3BlIiwibm9kZSIsImNvbnRhaW5lciIsImZ1bmN0aW9uRXhwcmVzc2lvbiIsImJvZHkiLCJnZW5lcmF0b3IiLCJhc3luYyIsImNhbGxlZSIsImFyZ3MiLCJpZCIsInB1c2giLCJ0cmF2ZXJzZSIsIm1lbWJlckV4cHJlc3Npb24iLCJpZGVudGlmaWVyIiwidGhpc0V4cHJlc3Npb24iLCJudWxsTGl0ZXJhbCIsImNhbGxFeHByZXNzaW9uIiwieWllbGRFeHByZXNzaW9uIiwicmV0dXJuU3RhdGVtZW50Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsRUFBQUEsS0FBSyxFQUFFO0FBRG9DLENBQTdDO0FBR0FELE9BQU8sQ0FBQ0UsT0FBUixHQUFrQkMsUUFBbEI7O0FBRUEsU0FBU0MscUJB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LGVBQUosQ0FBb0JqQyxJQUFwQixFQUEwQixJQUExQixDQUFQO0FBQ3BCLFNBQU9SLENBQUMsR0FBRzBDLGVBQUosQ0FBb0JsQyxJQUFwQixDQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xuXG5mdW5jdGlvbiBfaGVscGVySG9pc3RWYXJpYWJsZXMoKSB7XG4gIGNvbnN0IGRhdGEgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvaGVscGVyLWhvaXN0LXZhcmlhYmxlc1wiKSk7XG5cbiAgX2hlbHBlckhvaXN0VmFyaWFibGVzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkYXRhO1xuICB9O1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiB0KCkge1xuICBjb25zdCBkYXRhID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIkBiYWJlbC90eXBlc1wiKSk7XG5cbiAgdCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5jb25zdCB2aXNpdG9yID0ge1xuICBlbnRlcihwYXRoLCBzdGF0ZSkge1xuICAgIGlmIChwYXRoLmlzVGhpc0V4cHJlc3Npb24oKSkge1xuICAgICAgc3RhdGUuZm91bmRUaGlzID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAocGF0aC5pc1JlZmVyZW5jZWRJZGVudGlmaWVyKHtcbiAgICAgIG5hbWU6IFwiYXJndW1lbnRzXCJcbiAgICB9KSkge1xuICAgICAgc3RhdGUuZm91bmRBcmd1bWVudHMgPSB0cnVlO1xuICAgIH1cbiAgfSxcblxuICBGdW5jdGlvbihwYXRoKSB7XG4gICAgcGF0aC5za2lwKCk7XG4gIH1cblxufTtcblxuZnVuY3Rpb24gX2RlZmF1bHQocGF0aCwgc2NvcGUgPSBwYXRoLnNjb3BlKSB7XG4gIGNvbnN0IHtcbiAgICBub2RlXG4gIH0gPSBwYXRoO1xuICBjb25zdCBjb250YWluZXIgPSB0KCkuZnVuY3Rpb25FeHByZXNzaW9uKG51bGwsIFtdLCBub2RlLmJvZHksIG5vZGUuZ2VuZXJhdG9yLCBub2RlLmFzeW5jKTtcbiAgbGV0IGNhbGxlZSA9IGNvbnRhaW5lcjtcbiAgbGV0IGFyZ3MgPSBbXTtcbiAgKDAsIF9oZWxwZXJIb2lzdFZhcmlhYmxlcygpLmRlZmF1bHQpKHBhdGgsIGlkID0+IHNjb3BlLnB1c2goe1xuICAgIGlkXG4gIH0pKTtcbiAgY29uc3Qgc3RhdGUgPSB7XG4gICAgZm91bmRUaGlzOiBmYWxzZSxcbiAgICBmb3VuZEFyZ3VtZW50czogZmFsc2VcbiAgfTtcbiAgcGF0aC50cmF2ZXJzZSh2aXNpdG9yLCBzdGF0ZSk7XG5cbiAgaWYgKHN0YXRlLmZvdW5kQXJndW1lbnRzKSB7XG4gICAgY2FsbGVlID0gdCgpLm1lbWJlckV4cHJlc3Npb24oY29udGFpbmVyLCB0KCkuaWRlbnRpZmllcihcImFwcGx5XCIpKTtcbiAgICBhcmdzID0gW107XG5cbiAgICBpZiAoc3RhdGUuZm91bmRUaGlzKSB7XG4gICAgICBhcmdzLnB1c2godCgpLnRoaXNFeHByZXNzaW9uKCkpO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZS5mb3VuZEFyZ3VtZW50cykge1xuICAgICAgaWYgKCFzdGF0ZS5mb3VuZFRoaXMpIGFyZ3MucHVzaCh0KCkubnVsbExpdGVyYWwoKSk7XG4gICAgICBhcmdzLnB1c2godCgpLmlkZW50aWZpZXIoXCJhcmd1bWVudHNcIikpO1xuICAgIH1cbiAgfVxuXG4gIGxldCBjYWxsID0gdCgpLmNhbGxFeHByZXNzaW9uKGNhbGxlZSwgYXJncyk7XG4gIGlmIChub2RlLmdlbmVyYXRvcikgY2FsbCA9IHQoKS55aWVsZEV4cHJlc3Npb24oY2FsbCwgdHJ1ZSk7XG4gIHJldHVybiB0KCkucmV0dXJuU3RhdGVtZW50KGNhbGwpO1xufSJdfQ==