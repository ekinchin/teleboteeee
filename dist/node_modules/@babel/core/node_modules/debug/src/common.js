"use strict";
/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */

function setup(env) {
  createDebug.debug = createDebug;
  createDebug.default = createDebug;
  createDebug.coerce = coerce;
  createDebug.disable = disable;
  createDebug.enable = enable;
  createDebug.enabled = enabled;
  createDebug.humanize = require('ms');
  Object.keys(env).forEach(function (key) {
    createDebug[key] = env[key];
  });
  /**
  * Active `debug` instances.
  */

  createDebug.instances = [];
  /**
  * The currently active debug mode names, and names to skip.
  */

  createDebug.names = [];
  createDebug.skips = [];
  /**
  * Map of special "%n" handling functions, for the debug "format" argument.
  *
  * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
  */

  createDebug.formatters = {};
  /**
  * Selects a color for a debug namespace
  * @param {String} namespace The namespace string for the for the debug instance to be colored
  * @return {Number|String} An ANSI color code for the given namespace
  * @api private
  */

  function selectColor(namespace) {
    var hash = 0;

    for (var i = 0; i < namespace.length; i++) {
      hash = (hash << 5) - hash + namespace.charCodeAt(i);
      hash |= 0; // Convert to 32bit integer
    }

    return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
  }

  createDebug.selectColor = selectColor;
  /**
  * Create a debugger with the given `namespace`.
  *
  * @param {String} namespace
  * @return {Function}
  * @api public
  */

  function createDebug(namespace) {
    var prevTime;

    function debug() {
      // Disabled?
      if (!debug.enabled) {
        return;
      }

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var self = debug; // Set `diff` timestamp

      var curr = Number(new Date());
      var ms = curr - (prevTime || curr);
      self.diff = ms;
      self.prev = prevTime;
      self.curr = curr;
      prevTime = curr;
      args[0] = createDebug.coerce(args[0]);

      if (typeof args[0] !== 'string') {
        // Anything else let's inspect with %O
        args.unshift('%O');
      } // Apply any `formatters` transformations


      var index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
        // If we encounter an escaped % then don't increase the array index
        if (match === '%%') {
          return match;
        }

        index++;
        var formatter = createDebug.formatters[format];

        if (typeof formatter === 'function') {
          var val = args[index];
          match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`

          args.splice(index, 1);
          index--;
        }

        return match;
      }); // Apply env-specific formatting (colors, etc.)

      createDebug.formatArgs.call(self, args);
      var logFn = self.log || createDebug.log;
      logFn.apply(self, args);
    }

    debug.namespace = namespace;
    debug.enabled = createDebug.enabled(namespace);
    debug.useColors = createDebug.useColors();
    debug.color = selectColor(namespace);
    debug.destroy = destroy;
    debug.extend = extend; // Debug.formatArgs = formatArgs;
    // debug.rawLog = rawLog;
    // env-specific initialization logic for debug instances

    if (typeof createDebug.init === 'function') {
      createDebug.init(debug);
    }

    createDebug.instances.push(debug);
    return debug;
  }

  function destroy() {
    var index = createDebug.instances.indexOf(this);

    if (index !== -1) {
      createDebug.instances.splice(index, 1);
      return true;
    }

    return false;
  }

  function extend(namespace, delimiter) {
    return createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
  }
  /**
  * Enables a debug mode by namespaces. This can include modes
  * separated by a colon and wildcards.
  *
  * @param {String} namespaces
  * @api public
  */


  function enable(namespaces) {
    createDebug.save(namespaces);
    createDebug.names = [];
    createDebug.skips = [];
    var i;
    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
    var len = split.length;

    for (i = 0; i < len; i++) {
      if (!split[i]) {
        // ignore empty strings
        continue;
      }

      namespaces = split[i].replace(/\*/g, '.*?');

      if (namespaces[0] === '-') {
        createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
      } else {
        createDebug.names.push(new RegExp('^' + namespaces + '$'));
      }
    }

    for (i = 0; i < createDebug.instances.length; i++) {
      var instance = createDebug.instances[i];
      instance.enabled = createDebug.enabled(instance.namespace);
    }
  }
  /**
  * Disable debug output.
  *
  * @api public
  */


  function disable() {
    createDebug.enable('');
  }
  /**
  * Returns true if the given mode name is enabled, false otherwise.
  *
  * @param {String} name
  * @return {Boolean}
  * @api public
  */


  function enabled(name) {
    if (name[name.length - 1] === '*') {
      return true;
    }

    var i;
    var len;

    for (i = 0, len = createDebug.skips.length; i < len; i++) {
      if (createDebug.skips[i].test(name)) {
        return false;
      }
    }

    for (i = 0, len = createDebug.names.length; i < len; i++) {
      if (createDebug.names[i].test(name)) {
        return true;
      }
    }

    return false;
  }
  /**
  * Coerce `val`.
  *
  * @param {Mixed} val
  * @return {Mixed}
  * @api private
  */


  function coerce(val) {
    if (val instanceof Error) {
      return val.stack || val.message;
    }

    return val;
  }

  createDebug.enable(createDebug.load());
  return createDebug;
}

module.exports = setup;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvY29yZS9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2NvbW1vbi5qcyJdLCJuYW1lcyI6WyJzZXR1cCIsImVudiIsImNyZWF0ZURlYnVnIiwiZGVidWciLCJkZWZhdWx0IiwiY29lcmNlIiwiZGlzYWJsZSIsImVuYWJsZSIsImVuYWJsZWQiLCJodW1hbml6ZSIsInJlcXVpcmUiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsImluc3RhbmNlcyIsIm5hbWVzIiwic2tpcHMiLCJmb3JtYXR0ZXJzIiwic2VsZWN0Q29sb3IiLCJuYW1lc3BhY2UiLCJoYXNoIiwiaSIsImxlbmd0aCIsImNoYXJDb2RlQXQiLCJjb2xvcnMiLCJNYXRoIiwiYWJzIiwicHJldlRpbWUiLCJfbGVuIiwiYXJndW1lbnRzIiwiYXJncyIsIkFycmF5IiwiX2tleSIsInNlbGYiLCJjdXJyIiwiTnVtYmVyIiwiRGF0ZSIsIm1zIiwiZGlmZiIsInByZXYiLCJ1bnNoaWZ0IiwiaW5kZXgiLCJyZXBsYWNlIiwibWF0Y2giLCJmb3JtYXQiLCJmb3JtYXR0ZXIiLCJ2YWwiLCJjYWxsIiwic3BsaWNlIiwiZm9ybWF0QXJncyIsImxvZ0ZuIiwibG9nIiwiYXBwbHkiLCJ1c2VDb2xvcnMiLCJjb2xvciIsImRlc3Ryb3kiLCJleHRlbmQiLCJpbml0IiwicHVzaCIsImluZGV4T2YiLCJkZWxpbWl0ZXIiLCJuYW1lc3BhY2VzIiwic2F2ZSIsInNwbGl0IiwibGVuIiwiUmVnRXhwIiwic3Vic3RyIiwiaW5zdGFuY2UiLCJuYW1lIiwidGVzdCIsIkVycm9yIiwic3RhY2siLCJtZXNzYWdlIiwibG9hZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBO0FBRUE7Ozs7O0FBSUEsU0FBU0EsS0FBVCxDQUFlQyxHQUFmLEVBQW9CO0FBQ2xCQyxFQUFBQSxXQUFXLENBQUNDLEtBQVosR0FBb0JELFdBQXBCO0FBQ0FB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QUEwQkQsSUFBMUIsQ0FBSixFQUFxQztBQUNuQyxlQUFPLElBQVA7QUFDRDtBQUNGOztBQUVELFdBQU8sS0FBUDtBQUNEO0FBQ0Q7Ozs7Ozs7OztBQVNBLFdBQVNoRSxNQUFULENBQWdCMEMsR0FBaEIsRUFBcUI7QUFDbkIsUUFBSUEsR0FBRyxZQUFZd0IsS0FBbkIsRUFBMEI7QUFDeEIsYUFBT3hCLEdBQUcsQ0FBQ3lCLEtBQUosSUFBYXpCLEdBQUcsQ0FBQzBCLE9BQXhCO0FBQ0Q7O0FBRUQsV0FBTzFCLEdBQVA7QUFDRDs7QUFFRDdDLEVBQUFBLFdBQVcsQ0FBQ0ssTUFBWixDQUFtQkwsV0FBVyxDQUFDd0UsSUFBWixFQUFuQjtBQUNBLFNBQU94RSxXQUFQO0FBQ0Q7O0FBRUR5RSxNQUFNLENBQUNDLE9BQVAsR0FBaUI1RSxLQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIFRoaXMgaXMgdGhlIGNvbW1vbiBsb2dpYyBmb3IgYm90aCB0aGUgTm9kZS5qcyBhbmQgd2ViIGJyb3dzZXJcbiAqIGltcGxlbWVudGF0aW9ucyBvZiBgZGVidWcoKWAuXG4gKi9cbmZ1bmN0aW9uIHNldHVwKGVudikge1xuICBjcmVhdGVEZWJ1Zy5kZWJ1ZyA9IGNyZWF0ZURlYnVnO1xuICBjcmVhdGVEZWJ1Zy5kZWZhdWx0ID0gY3JlYXRlRGVidWc7XG4gIGNyZWF0ZURlYnVnLmNvZXJjZSA9IGNvZXJjZTtcbiAgY3JlYXRlRGVidWcuZGlzYWJsZSA9IGRpc2FibGU7XG4gIGNyZWF0ZURlYnVnLmVuYWJsZSA9IGVuYWJsZTtcbiAgY3JlYXRlRGVidWcuZW5hYmxlZCA9IGVuYWJsZWQ7XG4gIGNyZWF0ZURlYnVnLmh1bWFuaXplID0gcmVxdWlyZSgnbXMnKTtcbiAgT2JqZWN0LmtleXMoZW52KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBjcmVhdGVEZWJ1Z1trZXldID0gZW52W2tleV07XG4gIH0pO1xuICAvKipcbiAgKiBBY3RpdmUgYGRlYnVnYCBpbnN0YW5jZXMuXG4gICovXG5cbiAgY3JlYXRlRGVidWcuaW5zdGFuY2VzID0gW107XG4gIC8qKlxuICAqIFRoZSBjdXJyZW50bHkgYWN0aXZlIGRlYnVnIG1vZGUgbmFtZXMsIGFuZCBuYW1lcyB0byBza2lwLlxuICAqL1xuXG4gIGNyZWF0ZURlYnVnLm5hbWVzID0gW107XG4gIGNyZWF0ZURlYnVnLnNraXBzID0gW107XG4gIC8qKlxuICAqIE1hcCBvZiBzcGVjaWFsIFwiJW5cIiBoYW5kbGluZyBmdW5jdGlvbnMsIGZvciB0aGUgZGVidWcgXCJmb3JtYXRcIiBhcmd1bWVudC5cbiAgKlxuICAqIFZhbGlkIGtleSBuYW1lcyBhcmUgYSBzaW5nbGUsIGxvd2VyIG9yIHVwcGVyLWNhc2UgbGV0dGVyLCBpLmUuIFwiblwiIGFuZCBcIk5cIi5cbiAgKi9cblxuICBjcmVhdGVEZWJ1Zy5mb3JtYXR0ZXJzID0ge307XG4gIC8qKlxuICAqIFNlbGVjdHMgYSBjb2xvciBmb3IgYSBkZWJ1ZyBuYW1lc3BhY2VcbiAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlIFRoZSBuYW1lc3BhY2Ugc3RyaW5nIGZvciB0aGUgZm9yIHRoZSBkZWJ1ZyBpbnN0YW5jZSB0byBiZSBjb2xvcmVkXG4gICogQHJldHVybiB7TnVtYmVyfFN0cmluZ30gQW4gQU5TSSBjb2xvciBjb2RlIGZvciB0aGUgZ2l2ZW4gbmFtZXNwYWNlXG4gICogQGFwaSBwcml2YXRlXG4gICovXG5cbiAgZnVuY3Rpb24gc2VsZWN0Q29sb3IobmFtZXNwYWNlKSB7XG4gICAgdmFyIGhhc2ggPSAwO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuYW1lc3BhY2UubGVuZ3RoOyBpKyspIHtcbiAgICAgIGhhc2ggPSAoaGFzaCA8PCA1KSAtIGhhc2ggKyBuYW1lc3BhY2UuY2hhckNvZGVBdChpKTtcbiAgICAgIGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG4gICAgfVxuXG4gICAgcmV0dXJuIGNyZWF0ZURlYnVnLmNvbG9yc1tNYXRoLmFicyhoYXNoKSAlIGNyZWF0ZURlYnVnLmNvbG9ycy5sZW5ndGhdO1xuICB9XG5cbiAgY3JlYXRlRGVidWcuc2VsZWN0Q29sb3IgPSBzZWxlY3RDb2xvcjtcbiAgLyoqXG4gICogQ3JlYXRlIGEgZGVidWdnZXIgd2l0aCB0aGUgZ2l2ZW4gYG5hbWVzcGFjZWAuXG4gICpcbiAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gICogQHJldHVybiB7RnVuY3Rpb259XG4gICogQGFwaSBwdWJsaWNcbiAgKi9cblxuICBmdW5jdGlvbiBjcmVhdGVEZWJ1ZyhuYW1lc3BhY2UpIHtcbiAgICB2YXIgcHJldlRpbWU7XG5cbiAgICBmdW5jdGlvbiBkZWJ1ZygpIHtcbiAgICAgIC8vIERpc2FibGVkP1xuICAgICAgaWYgKCFkZWJ1Zy5lbmFibGVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHZhciBzZWxmID0gZGVidWc7IC8vIFNldCBgZGlmZmAgdGltZXN0YW1wXG5cbiAgICAgIHZhciBjdXJyID0gTnVtYmVyKG5ldyBEYXRlKCkpO1xuICAgICAgdmFyIG1zID0gY3VyciAtIChwcmV2VGltZSB8fCBjdXJyKTtcbiAgICAgIHNlbGYuZGlmZiA9IG1zO1xuICAgICAgc2VsZi5wcmV2ID0gcHJldlRpbWU7XG4gICAgICBzZWxmLmN1cnIgPSBjdXJyO1xuICAgICAgcHJldlRpbWUgPSBjdXJyO1xuICAgICAgYXJnc1swXSA9IGNyZWF0ZURlYnVnLmNvZXJjZShhcmdzWzBdKTtcblxuICAgICAgaWYgKHR5cGVvZiBhcmdzWzBdICE9PSAnc3RyaW5nJykge1xuICAgICAgICAvLyBBbnl0aGluZyBlbHNlIGxldCdzIGluc3BlY3Qgd2l0aCAlT1xuICAgICAgICBhcmdzLnVuc2hpZnQoJyVPJyk7XG4gICAgICB9IC8vIEFwcGx5IGFueSBgZm9ybWF0dGVyc2AgdHJhbnNmb3JtYXRpb25zXG5cblxuICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgIGFyZ3NbMF0gPSBhcmdzWzBdLnJlcGxhY2UoLyUoW2EtekEtWiVdKS9nLCBmdW5jdGlvbiAobWF0Y2gsIGZvcm1hdCkge1xuICAgICAgICAvLyBJZiB3ZSBlbmNvdW50ZXIgYW4gZXNjYXBlZCAlIHRoZW4gZG9uJ3QgaW5jcmVhc2UgdGhlIGFycmF5IGluZGV4XG4gICAgICAgIGlmIChtYXRjaCA9PT0gJyUlJykge1xuICAgICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgICAgfVxuXG4gICAgICAgIGluZGV4Kys7XG4gICAgICAgIHZhciBmb3JtYXR0ZXIgPSBjcmVhdGVEZWJ1Zy5mb3JtYXR0ZXJzW2Zvcm1hdF07XG5cbiAgICAgICAgaWYgKHR5cGVvZiBmb3JtYXR0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB2YXIgdmFsID0gYXJnc1tpbmRleF07XG4gICAgICAgICAgbWF0Y2ggPSBmb3JtYXR0ZXIuY2FsbChzZWxmLCB2YWwpOyAvLyBOb3cgd2UgbmVlZCB0byByZW1vdmUgYGFyZ3NbaW5kZXhdYCBzaW5jZSBpdCdzIGlubGluZWQgaW4gdGhlIGBmb3JtYXRgXG5cbiAgICAgICAgICBhcmdzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgaW5kZXgtLTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtYXRjaDtcbiAgICAgIH0pOyAvLyBBcHBseSBlbnYtc3BlY2lmaWMgZm9ybWF0dGluZyAoY29sb3JzLCBldGMuKVxuXG4gICAgICBjcmVhdGVEZWJ1Zy5mb3JtYXRBcmdzLmNhbGwoc2VsZiwgYXJncyk7XG4gICAgICB2YXIgbG9nRm4gPSBzZWxmLmxvZyB8fCBjcmVhdGVEZWJ1Zy5sb2c7XG4gICAgICBsb2dGbi5hcHBseShzZWxmLCBhcmdzKTtcbiAgICB9XG5cbiAgICBkZWJ1Zy5uYW1lc3BhY2UgPSBuYW1lc3BhY2U7XG4gICAgZGVidWcuZW5hYmxlZCA9IGNyZWF0ZURlYnVnLmVuYWJsZWQobmFtZXNwYWNlKTtcbiAgICBkZWJ1Zy51c2VDb2xvcnMgPSBjcmVhdGVEZWJ1Zy51c2VDb2xvcnMoKTtcbiAgICBkZWJ1Zy5jb2xvciA9IHNlbGVjdENvbG9yKG5hbWVzcGFjZSk7XG4gICAgZGVidWcuZGVzdHJveSA9IGRlc3Ryb3k7XG4gICAgZGVidWcuZXh0ZW5kID0gZXh0ZW5kOyAvLyBEZWJ1Zy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbiAgICAvLyBkZWJ1Zy5yYXdMb2cgPSByYXdMb2c7XG4gICAgLy8gZW52LXNwZWNpZmljIGluaXRpYWxpemF0aW9uIGxvZ2ljIGZvciBkZWJ1ZyBpbnN0YW5jZXNcblxuICAgIGlmICh0eXBlb2YgY3JlYXRlRGVidWcuaW5pdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY3JlYXRlRGVidWcuaW5pdChkZWJ1Zyk7XG4gICAgfVxuXG4gICAgY3JlYXRlRGVidWcuaW5zdGFuY2VzLnB1c2goZGVidWcpO1xuICAgIHJldHVybiBkZWJ1ZztcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgdmFyIGluZGV4ID0gY3JlYXRlRGVidWcuaW5zdGFuY2VzLmluZGV4T2YodGhpcyk7XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBjcmVhdGVEZWJ1Zy5pbnN0YW5jZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV4dGVuZChuYW1lc3BhY2UsIGRlbGltaXRlcikge1xuICAgIHJldHVybiBjcmVhdGVEZWJ1Zyh0aGlzLm5hbWVzcGFjZSArICh0eXBlb2YgZGVsaW1pdGVyID09PSAndW5kZWZpbmVkJyA/ICc6JyA6IGRlbGltaXRlcikgKyBuYW1lc3BhY2UpO1xuICB9XG4gIC8qKlxuICAqIEVuYWJsZXMgYSBkZWJ1ZyBtb2RlIGJ5IG5hbWVzcGFjZXMuIFRoaXMgY2FuIGluY2x1ZGUgbW9kZXNcbiAgKiBzZXBhcmF0ZWQgYnkgYSBjb2xvbiBhbmQgd2lsZGNhcmRzLlxuICAqXG4gICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAgKiBAYXBpIHB1YmxpY1xuICAqL1xuXG5cbiAgZnVuY3Rpb24gZW5hYmxlKG5hbWVzcGFjZXMpIHtcbiAgICBjcmVhdGVEZWJ1Zy5zYXZlKG5hbWVzcGFjZXMpO1xuICAgIGNyZWF0ZURlYnVnLm5hbWVzID0gW107XG4gICAgY3JlYXRlRGVidWcuc2tpcHMgPSBbXTtcbiAgICB2YXIgaTtcbiAgICB2YXIgc3BsaXQgPSAodHlwZW9mIG5hbWVzcGFjZXMgPT09ICdzdHJpbmcnID8gbmFtZXNwYWNlcyA6ICcnKS5zcGxpdCgvW1xccyxdKy8pO1xuICAgIHZhciBsZW4gPSBzcGxpdC5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmICghc3BsaXRbaV0pIHtcbiAgICAgICAgLy8gaWdub3JlIGVtcHR5IHN0cmluZ3NcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIG5hbWVzcGFjZXMgPSBzcGxpdFtpXS5yZXBsYWNlKC9cXCovZywgJy4qPycpO1xuXG4gICAgICBpZiAobmFtZXNwYWNlc1swXSA9PT0gJy0nKSB7XG4gICAgICAgIGNyZWF0ZURlYnVnLnNraXBzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzLnN1YnN0cigxKSArICckJykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3JlYXRlRGVidWcubmFtZXMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMgKyAnJCcpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgY3JlYXRlRGVidWcuaW5zdGFuY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaW5zdGFuY2UgPSBjcmVhdGVEZWJ1Zy5pbnN0YW5jZXNbaV07XG4gICAgICBpbnN0YW5jZS5lbmFibGVkID0gY3JlYXRlRGVidWcuZW5hYmxlZChpbnN0YW5jZS5uYW1lc3BhY2UpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgKiBEaXNhYmxlIGRlYnVnIG91dHB1dC5cbiAgKlxuICAqIEBhcGkgcHVibGljXG4gICovXG5cblxuICBmdW5jdGlvbiBkaXNhYmxlKCkge1xuICAgIGNyZWF0ZURlYnVnLmVuYWJsZSgnJyk7XG4gIH1cbiAgLyoqXG4gICogUmV0dXJucyB0cnVlIGlmIHRoZSBnaXZlbiBtb2RlIG5hbWUgaXMgZW5hYmxlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAqXG4gICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAqIEBhcGkgcHVibGljXG4gICovXG5cblxuICBmdW5jdGlvbiBlbmFibGVkKG5hbWUpIHtcbiAgICBpZiAobmFtZVtuYW1lLmxlbmd0aCAtIDFdID09PSAnKicpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciBpO1xuICAgIHZhciBsZW47XG5cbiAgICBmb3IgKGkgPSAwLCBsZW4gPSBjcmVhdGVEZWJ1Zy5za2lwcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgaWYgKGNyZWF0ZURlYnVnLnNraXBzW2ldLnRlc3QobmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoaSA9IDAsIGxlbiA9IGNyZWF0ZURlYnVnLm5hbWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBpZiAoY3JlYXRlRGVidWcubmFtZXNbaV0udGVzdChuYW1lKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLyoqXG4gICogQ29lcmNlIGB2YWxgLlxuICAqXG4gICogQHBhcmFtIHtNaXhlZH0gdmFsXG4gICogQHJldHVybiB7TWl4ZWR9XG4gICogQGFwaSBwcml2YXRlXG4gICovXG5cblxuICBmdW5jdGlvbiBjb2VyY2UodmFsKSB7XG4gICAgaWYgKHZhbCBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICByZXR1cm4gdmFsLnN0YWNrIHx8IHZhbC5tZXNzYWdlO1xuICAgIH1cblxuICAgIHJldHVybiB2YWw7XG4gIH1cblxuICBjcmVhdGVEZWJ1Zy5lbmFibGUoY3JlYXRlRGVidWcubG9hZCgpKTtcbiAgcmV0dXJuIGNyZWF0ZURlYnVnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldHVwO1xuXG4iXX0=