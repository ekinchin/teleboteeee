"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function helpers() {
  const data = _interopRequireWildcard(require("@babel/helpers"));

  helpers = function () {
    return data;
  };

  return data;
}

function _generator() {
  const data = _interopRequireDefault(require("@babel/generator"));

  _generator = function () {
    return data;
  };

  return data;
}

function _template() {
  const data = _interopRequireDefault(require("@babel/template"));

  _template = function () {
    return data;
  };

  return data;
}

function t() {
  const data = _interopRequireWildcard(require("@babel/types"));

  t = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};

    if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};

          if (desc.get || desc.set) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
    }

    newObj.default = obj;
    return newObj;
  }
}

const buildUmdWrapper = replacements => _template().default`
    (function (root, factory) {
      if (typeof define === "function" && define.amd) {
        define(AMD_ARGUMENTS, factory);
      } else if (typeof exports === "object") {
        factory(COMMON_ARGUMENTS);
      } else {
        factory(BROWSER_ARGUMENTS);
      }
    })(UMD_ROOT, function (FACTORY_PARAMETERS) {
      FACTORY_BODY
    });
  `(replacements);

function buildGlobal(whitelist) {
  const namespace = t().identifier("babelHelpers");
  const body = [];
  const container = t().functionExpression(null, [t().identifier("global")], t().blockStatement(body));
  const tree = t().program([t().expressionStatement(t().callExpression(container, [t().conditionalExpression(t().binaryExpression("===", t().unaryExpression("typeof", t().identifier("global")), t().stringLiteral("undefined")), t().identifier("self"), t().identifier("global"))]))]);
  body.push(t().variableDeclaration("var", [t().variableDeclarator(namespace, t().assignmentExpression("=", t().memberExpression(t().identifier("global"), namespace), t().objectExpression([])))]));
  buildHelpers(body, namespace, whitelist);
  return tree;
}

function buildModule(whitelist) {
  const body = [];
  const refs = buildHelpers(body, null, whitelist);
  body.unshift(t().exportNamedDeclaration(null, Object.keys(refs).map(name => {
    return t().exportSpecifier(t().cloneNode(refs[name]), t().identifier(name));
  })));
  return t().program(body, [], "module");
}

function buildUmd(whitelist) {
  const namespace = t().identifier("babelHelpers");
  const body = [];
  body.push(t().variableDeclaration("var", [t().variableDeclarator(namespace, t().identifier("global"))]));
  buildHelpers(body, namespace, whitelist);
  return t().program([buildUmdWrapper({
    FACTORY_PARAMETERS: t().identifier("global"),
    BROWSER_ARGUMENTS: t().assignmentExpression("=", t().memberExpression(t().identifier("root"), namespace), t().objectExpression([])),
    COMMON_ARGUMENTS: t().identifier("exports"),
    AMD_ARGUMENTS: t().arrayExpression([t().stringLiteral("exports")]),
    FACTORY_BODY: body,
    UMD_ROOT: t().identifier("this")
  })]);
}

function buildVar(whitelist) {
  const namespace = t().identifier("babelHelpers");
  const body = [];
  body.push(t().variableDeclaration("var", [t().variableDeclarator(namespace, t().objectExpression([]))]));
  const tree = t().program(body);
  buildHelpers(body, namespace, whitelist);
  body.push(t().expressionStatement(namespace));
  return tree;
}

function buildHelpers(body, namespace, whitelist) {
  const getHelperReference = name => {
    return namespace ? t().memberExpression(namespace, t().identifier(name)) : t().identifier(`_${name}`);
  };

  const refs = {};
  helpers().list.forEach(function (name) {
    if (whitelist && whitelist.indexOf(name) < 0) return;
    const ref = refs[name] = getHelperReference(name);
    const {
      nodes
    } = helpers().get(name, getHelperReference, ref);
    body.push(...nodes);
  });
  return refs;
}

function _default(whitelist, outputType = "global") {
  let tree;
  const build = {
    global: buildGlobal,
    module: buildModule,
    umd: buildUmd,
    var: buildVar
  }[outputType];

  if (build) {
    tree = build(whitelist);
  } else {
    throw new Error(`Unsupported output type ${outputType}`);
  }

  return (0, _generator().default)(tree).code;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvY29yZS9saWIvdG9vbHMvYnVpbGQtZXh0ZXJuYWwtaGVscGVycy5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfZGVmYXVsdCIsImhlbHBlcnMiLCJkYXRhIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiX2dlbmVyYXRvciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfdGVtcGxhdGUiLCJ0Iiwib2JqIiwiX19lc01vZHVsZSIsIm5ld09iaiIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXQiLCJzZXQiLCJidWlsZFVtZFdyYXBwZXIiLCJyZXBsYWNlbWVudHMiLCJidWlsZEdsb2JhbCIsIndoaXRlbGlzdCIsIm5hbWVzcGFjZSIsImlkZW50aWZpZXIiLCJib2R5IiwiY29udGFpbmVyIiwiZnVuY3Rpb25FeHByZXNzaW9uIiwiYmxvY2tTdGF0ZW1lbnQiLCJ0cmVlIiwicHJvZ3JhbSIsImV4cHJlc3Npb25TdGF0ZW1lbnQiLCJjYWxsRXhwcmVzc2lvbiIsImNvbmRpdGlvbmFsRXhwcmVzc2lvbiIsImJpbmFyeUV4cHJlc3Npb24iLCJ1bmFyeUV4cHJlc3Npb24iLCJzdHJpbmdMaXRlcmFsIiwicHVzaCIsInZhcmlhYmxlRGVjbGFyYXRpb24iLCJ2YXJpYWJsZURlY2xhcmF0b3IiLCJhc3NpZ25tZW50RXhwcmVzc2lvbiIsIm1lbWJlckV4cHJlc3Npb24iLCJvYmplY3RFeHByZXNzaW9uIiwiYnVpbGRIZWxwZXJzIiwiYnVpbGRNb2R1bGUiLCJyZWZzIiwidW5zaGlmdCIsImV4cG9ydE5hbWVkRGVjbGFyYXRpb24iLCJrZXlzIiwibWFwIiwibmFtZSIsImV4cG9ydFNwZWNpZmllciIsImNsb25lTm9kZSIsImJ1aWxkVW1kIiwiRkFDVE9SWV9QQVJBTUVURVJTIiwiQlJPV1NFUl9BUkdVTUVOVFMiLCJDT01NT05fQVJHVU1FTlRTIiwiQU1EX0FSR1VNRU5UUyIsImFycmF5RXhwcmVzc2lvbiIsIkZBQ1RPUllfQk9EWSIsIlVNRF9ST09UIiwiYnVpbGRWYXIiLCJnZXRIZWxwZXJSZWZlcmVuY2UiLCJsaXN0IiwiZm9yRWFjaCIsImluZGV4T2YiLCJyZWYiLCJub2RlcyIsIm91dHB1dFR5cGUiLCJidWlsZCIsImdsb2JhbCIsIm1vZHVsZSIsInVtZCIsInZhciIsIkVycm9yIiwiY29kZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLEVBQUFBLEtBQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLE9BQVIsR0FBa0JDLFFBQWxCOztBQUVBLFNBQVNDLE9BQVQsR0FBbUI7QUFDakIsUUFBTUMsSUFBSSxHQUFHQyx1QkFBdUIsQ0FBQ0MsT0FBTyxDQUFDLGdCQUFELENBQVIsQ0FBcEM7O0FBRUFILEVBQUFBLE9BQU8sR0FBRyxZQUFZO0FBQ3BCLFdBQU9DLElBQVA7QUFDRCxHQUZEOztBQUlBLFNBQU9BLElBQVA7QUFDRDs7QUFFRCxTQUFTRyxVQUFULEdBQXNCO0FBQ3BCLFFBQU1ILElBQUksR0FBR0ksc0JBQXNCLENBQUNGLE9BQU8sQ0FBQyxrQkFBRCxDQUFSLENBQW5DOztBQUVBQyxFQUFBQSxVQUFVLEdBQUcsWUFBWTtBQUN2QixXQUFPSCxJQUFQO0FBQ0QsR0FGRDs7QUFJQSxTQUFPQSxJQUFQO0FBQ0Q7O0FBRUQsU0FBU0ssU0FBVCxHQUFxQjtBQUNuQixRQUFNTCxJQUFJLEdBQUdJLHNCQUFzQixDQUFDRixPQUFPLENBQUMsaUJBQUQsQ0FBUixDQUFuQzs7QUFFQUcsRUFBQUEsU0FBUyxHQUFHLFlBQVk7QUFDdEIsV0FBT0wsSUFBUDtBQUNELEdBRkQ7O0FBSUEsU0FBT0Es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QUFTLElBQUlBLFNBQVMsQ0FBQzJDLE9BQVYsQ0FBa0JmLElBQWxCLElBQTBCLENBQTNDLEVBQThDO0FBQzlDLFVBQU1nQixHQUFHLEdBQUdyQixJQUFJLENBQUNLLElBQUQsQ0FBSixHQUFhWSxrQkFBa0IsQ0FBQ1osSUFBRCxDQUEzQztBQUNBLFVBQU07QUFDSmlCLE1BQUFBO0FBREksUUFFRm5FLE9BQU8sR0FBR2lCLEdBQVYsQ0FBY2lDLElBQWQsRUFBb0JZLGtCQUFwQixFQUF3Q0ksR0FBeEMsQ0FGSjtBQUdBekMsSUFBQUEsSUFBSSxDQUFDWSxJQUFMLENBQVUsR0FBRzhCLEtBQWI7QUFDRCxHQVBEO0FBUUEsU0FBT3RCLElBQVA7QUFDRDs7QUFFRCxTQUFTOUMsUUFBVCxDQUFrQnVCLFNBQWxCLEVBQTZCOEMsVUFBVSxHQUFHLFFBQTFDLEVBQW9EO0FBQ2xELE1BQUl2QyxJQUFKO0FBQ0EsUUFBTXdDLEtBQUssR0FBRztBQUNaQyxJQUFBQSxNQUFNLEVBQUVqRCxXQURJO0FBRVprRCxJQUFBQSxNQUFNLEVBQUUzQixXQUZJO0FBR1o0QixJQUFBQSxHQUFHLEVBQUVuQixRQUhPO0FBSVpvQixJQUFBQSxHQUFHLEVBQUVaO0FBSk8sSUFLWk8sVUFMWSxDQUFkOztBQU9BLE1BQUlDLEtBQUosRUFBVztBQUNUeEMsSUFBQUEsSUFBSSxHQUFHd0MsS0FBSyxDQUFDL0MsU0FBRCxDQUFaO0FBQ0QsR0FGRCxNQUVPO0FBQ0wsVUFBTSxJQUFJb0QsS0FBSixDQUFXLDJCQUEwQk4sVUFBVyxFQUFoRCxDQUFOO0FBQ0Q7O0FBRUQsU0FBTyxDQUFDLEdBQUdoRSxVQUFVLEdBQUdOLE9BQWpCLEVBQTBCK0IsSUFBMUIsRUFBZ0M4QyxJQUF2QztBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcblxuZnVuY3Rpb24gaGVscGVycygpIHtcbiAgY29uc3QgZGF0YSA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJAYmFiZWwvaGVscGVyc1wiKSk7XG5cbiAgaGVscGVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gX2dlbmVyYXRvcigpIHtcbiAgY29uc3QgZGF0YSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC9nZW5lcmF0b3JcIikpO1xuXG4gIF9nZW5lcmF0b3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIF90ZW1wbGF0ZSgpIHtcbiAgY29uc3QgZGF0YSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBiYWJlbC90ZW1wbGF0ZVwiKSk7XG5cbiAgX3RlbXBsYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkYXRhO1xuICB9O1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiB0KCkge1xuICBjb25zdCBkYXRhID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIkBiYWJlbC90eXBlc1wiKSk7XG5cbiAgdCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBlbHNlIHsgdmFyIG5ld09iaiA9IHt9OyBpZiAob2JqICE9IG51bGwpIHsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiB7fTsgaWYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfVxuXG5jb25zdCBidWlsZFVtZFdyYXBwZXIgPSByZXBsYWNlbWVudHMgPT4gX3RlbXBsYXRlKCkuZGVmYXVsdGBcbiAgICAoZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcbiAgICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICBkZWZpbmUoQU1EX0FSR1VNRU5UUywgZmFjdG9yeSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGZhY3RvcnkoQ09NTU9OX0FSR1VNRU5UUyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmYWN0b3J5KEJST1dTRVJfQVJHVU1FTlRTKTtcbiAgICAgIH1cbiAgICB9KShVTURfUk9PVCwgZnVuY3Rpb24gKEZBQ1RPUllfUEFSQU1FVEVSUykge1xuICAgICAgRkFDVE9SWV9CT0RZXG4gICAgfSk7XG4gIGAocmVwbGFjZW1lbnRzKTtcblxuZnVuY3Rpb24gYnVpbGRHbG9iYWwod2hpdGVsaXN0KSB7XG4gIGNvbnN0IG5hbWVzcGFjZSA9IHQoKS5pZGVudGlmaWVyKFwiYmFiZWxIZWxwZXJzXCIpO1xuICBjb25zdCBib2R5ID0gW107XG4gIGNvbnN0IGNvbnRhaW5lciA9IHQoKS5mdW5jdGlvbkV4cHJlc3Npb24obnVsbCwgW3QoKS5pZGVudGlmaWVyKFwiZ2xvYmFsXCIpXSwgdCgpLmJsb2NrU3RhdGVtZW50KGJvZHkpKTtcbiAgY29uc3QgdHJlZSA9IHQoKS5wcm9ncmFtKFt0KCkuZXhwcmVzc2lvblN0YXRlbWVudCh0KCkuY2FsbEV4cHJlc3Npb24oY29udGFpbmVyLCBbdCgpLmNvbmRpdGlvbmFsRXhwcmVzc2lvbih0KCkuYmluYXJ5RXhwcmVzc2lvbihcIj09PVwiLCB0KCkudW5hcnlFeHByZXNzaW9uKFwidHlwZW9mXCIsIHQoKS5pZGVudGlmaWVyKFwiZ2xvYmFsXCIpKSwgdCgpLnN0cmluZ0xpdGVyYWwoXCJ1bmRlZmluZWRcIikpLCB0KCkuaWRlbnRpZmllcihcInNlbGZcIiksIHQoKS5pZGVudGlmaWVyKFwiZ2xvYmFsXCIpKV0pKV0pO1xuICBib2R5LnB1c2godCgpLnZhcmlhYmxlRGVjbGFyYXRpb24oXCJ2YXJcIiwgW3QoKS52YXJpYWJsZURlY2xhcmF0b3IobmFtZXNwYWNlLCB0KCkuYXNzaWdubWVudEV4cHJlc3Npb24oXCI9XCIsIHQoKS5tZW1iZXJFeHByZXNzaW9uKHQoKS5pZGVudGlmaWVyKFwiZ2xvYmFsXCIpLCBuYW1lc3BhY2UpLCB0KCkub2JqZWN0RXhwcmVzc2lvbihbXSkpKV0pKTtcbiAgYnVpbGRIZWxwZXJzKGJvZHksIG5hbWVzcGFjZSwgd2hpdGVsaXN0KTtcbiAgcmV0dXJuIHRyZWU7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkTW9kdWxlKHdoaXRlbGlzdCkge1xuICBjb25zdCBib2R5ID0gW107XG4gIGNvbnN0IHJlZnMgPSBidWlsZEhlbHBlcnMoYm9keSwgbnVsbCwgd2hpdGVsaXN0KTtcbiAgYm9keS51bnNoaWZ0KHQoKS5leHBvcnROYW1lZERlY2xhcmF0aW9uKG51bGwsIE9iamVjdC5rZXlzKHJlZnMpLm1hcChuYW1lID0+IHtcbiAgICByZXR1cm4gdCgpLmV4cG9ydFNwZWNpZmllcih0KCkuY2xvbmVOb2RlKHJlZnNbbmFtZV0pLCB0KCkuaWRlbnRpZmllcihuYW1lKSk7XG4gIH0pKSk7XG4gIHJldHVybiB0KCkucHJvZ3JhbShib2R5LCBbXSwgXCJtb2R1bGVcIik7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkVW1kKHdoaXRlbGlzdCkge1xuICBjb25zdCBuYW1lc3BhY2UgPSB0KCkuaWRlbnRpZmllcihcImJhYmVsSGVscGVyc1wiKTtcbiAgY29uc3QgYm9keSA9IFtdO1xuICBib2R5LnB1c2godCgpLnZhcmlhYmxlRGVjbGFyYXRpb24oXCJ2YXJcIiwgW3QoKS52YXJpYWJsZURlY2xhcmF0b3IobmFtZXNwYWNlLCB0KCkuaWRlbnRpZmllcihcImdsb2JhbFwiKSldKSk7XG4gIGJ1aWxkSGVscGVycyhib2R5LCBuYW1lc3BhY2UsIHdoaXRlbGlzdCk7XG4gIHJldHVybiB0KCkucHJvZ3JhbShbYnVpbGRVbWRXcmFwcGVyKHtcbiAgICBGQUNUT1JZX1BBUkFNRVRFUlM6IHQoKS5pZGVudGlmaWVyKFwiZ2xvYmFsXCIpLFxuICAgIEJST1dTRVJfQVJHVU1FTlRTOiB0KCkuYXNzaWdubWVudEV4cHJlc3Npb24oXCI9XCIsIHQoKS5tZW1iZXJFeHByZXNzaW9uKHQoKS5pZGVudGlmaWVyKFwicm9vdFwiKSwgbmFtZXNwYWNlKSwgdCgpLm9iamVjdEV4cHJlc3Npb24oW10pKSxcbiAgICBDT01NT05fQVJHVU1FTlRTOiB0KCkuaWRlbnRpZmllcihcImV4cG9ydHNcIiksXG4gICAgQU1EX0FSR1VNRU5UUzogdCgpLmFycmF5RXhwcmVzc2lvbihbdCgpLnN0cmluZ0xpdGVyYWwoXCJleHBvcnRzXCIpXSksXG4gICAgRkFDVE9SWV9CT0RZOiBib2R5LFxuICAgIFVNRF9ST09UOiB0KCkuaWRlbnRpZmllcihcInRoaXNcIilcbiAgfSldKTtcbn1cblxuZnVuY3Rpb24gYnVpbGRWYXIod2hpdGVsaXN0KSB7XG4gIGNvbnN0IG5hbWVzcGFjZSA9IHQoKS5pZGVudGlmaWVyKFwiYmFiZWxIZWxwZXJzXCIpO1xuICBjb25zdCBib2R5ID0gW107XG4gIGJvZHkucHVzaCh0KCkudmFyaWFibGVEZWNsYXJhdGlvbihcInZhclwiLCBbdCgpLnZhcmlhYmxlRGVjbGFyYXRvcihuYW1lc3BhY2UsIHQoKS5vYmplY3RFeHByZXNzaW9uKFtdKSldKSk7XG4gIGNvbnN0IHRyZWUgPSB0KCkucHJvZ3JhbShib2R5KTtcbiAgYnVpbGRIZWxwZXJzKGJvZHksIG5hbWVzcGFjZSwgd2hpdGVsaXN0KTtcbiAgYm9keS5wdXNoKHQoKS5leHByZXNzaW9uU3RhdGVtZW50KG5hbWVzcGFjZSkpO1xuICByZXR1cm4gdHJlZTtcbn1cblxuZnVuY3Rpb24gYnVpbGRIZWxwZXJzKGJvZHksIG5hbWVzcGFjZSwgd2hpdGVsaXN0KSB7XG4gIGNvbnN0IGdldEhlbHBlclJlZmVyZW5jZSA9IG5hbWUgPT4ge1xuICAgIHJldHVybiBuYW1lc3BhY2UgPyB0KCkubWVtYmVyRXhwcmVzc2lvbihuYW1lc3BhY2UsIHQoKS5pZGVudGlmaWVyKG5hbWUpKSA6IHQoKS5pZGVudGlmaWVyKGBfJHtuYW1lfWApO1xuICB9O1xuXG4gIGNvbnN0IHJlZnMgPSB7fTtcbiAgaGVscGVycygpLmxpc3QuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgIGlmICh3aGl0ZWxpc3QgJiYgd2hpdGVsaXN0LmluZGV4T2YobmFtZSkgPCAwKSByZXR1cm47XG4gICAgY29uc3QgcmVmID0gcmVmc1tuYW1lXSA9IGdldEhlbHBlclJlZmVyZW5jZShuYW1lKTtcbiAgICBjb25zdCB7XG4gICAgICBub2Rlc1xuICAgIH0gPSBoZWxwZXJzKCkuZ2V0KG5hbWUsIGdldEhlbHBlclJlZmVyZW5jZSwgcmVmKTtcbiAgICBib2R5LnB1c2goLi4ubm9kZXMpO1xuICB9KTtcbiAgcmV0dXJuIHJlZnM7XG59XG5cbmZ1bmN0aW9uIF9kZWZhdWx0KHdoaXRlbGlzdCwgb3V0cHV0VHlwZSA9IFwiZ2xvYmFsXCIpIHtcbiAgbGV0IHRyZWU7XG4gIGNvbnN0IGJ1aWxkID0ge1xuICAgIGdsb2JhbDogYnVpbGRHbG9iYWwsXG4gICAgbW9kdWxlOiBidWlsZE1vZHVsZSxcbiAgICB1bWQ6IGJ1aWxkVW1kLFxuICAgIHZhcjogYnVpbGRWYXJcbiAgfVtvdXRwdXRUeXBlXTtcblxuICBpZiAoYnVpbGQpIHtcbiAgICB0cmVlID0gYnVpbGQod2hpdGVsaXN0KTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIG91dHB1dCB0eXBlICR7b3V0cHV0VHlwZX1gKTtcbiAgfVxuXG4gIHJldHVybiAoMCwgX2dlbmVyYXRvcigpLmRlZmF1bHQpKHRyZWUpLmNvZGU7XG59Il19