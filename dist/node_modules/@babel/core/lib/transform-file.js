"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transformFileSync = transformFileSync;
exports.transformFileAsync = transformFileAsync;
exports.transformFile = void 0;

function _fs() {
  const data = _interopRequireDefault(require("fs"));

  _fs = function () {
    return data;
  };

  return data;
}

var _config = _interopRequireDefault(require("./config"));

var _transformation = require("./transformation");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

const transformFile = function transformFile(filename, opts, callback) {
  let options;

  if (typeof opts === "function") {
    callback = opts;
    opts = undefined;
  }

  if (opts == null) {
    options = {
      filename
    };
  } else if (opts && typeof opts === "object") {
    options = Object.assign({}, opts, {
      filename
    });
  }

  process.nextTick(() => {
    let cfg;

    try {
      cfg = (0, _config.default)(options);
      if (cfg === null) return callback(null, null);
    } catch (err) {
      return callback(err);
    }

    const config = cfg;

    _fs().default.readFile(filename, "utf8", function (err, code) {
      if (err) return callback(err, null);
      (0, _transformation.runAsync)(config, code, null, callback);
    });
  });
};

exports.transformFile = transformFile;

function transformFileSync(filename, opts) {
  let options;

  if (opts == null) {
    options = {
      filename
    };
  } else if (opts && typeof opts === "object") {
    options = Object.assign({}, opts, {
      filename
    });
  }

  const config = (0, _config.default)(options);
  if (config === null) return null;
  return (0, _transformation.runSync)(config, _fs().default.readFileSync(filename, "utf8"));
}

function transformFileAsync(filename, opts) {
  return new Promise((res, rej) => {
    transformFile(filename, opts, (err, result) => {
      if (err == null) res(result);else rej(err);
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvY29yZS9saWIvdHJhbnNmb3JtLWZpbGUuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ0cmFuc2Zvcm1GaWxlU3luYyIsInRyYW5zZm9ybUZpbGVBc3luYyIsInRyYW5zZm9ybUZpbGUiLCJfZnMiLCJkYXRhIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfY29uZmlnIiwiX3RyYW5zZm9ybWF0aW9uIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJmaWxlbmFtZSIsIm9wdHMiLCJjYWxsYmFjayIsIm9wdGlvbnMiLCJ1bmRlZmluZWQiLCJhc3NpZ24iLCJwcm9jZXNzIiwibmV4dFRpY2siLCJjZmciLCJlcnIiLCJjb25maWciLCJyZWFkRmlsZSIsImNvZGUiLCJydW5Bc3luYyIsInJ1blN5bmMiLCJyZWFkRmlsZVN5bmMiLCJQcm9taXNlIiwicmVzIiwicmVqIiwicmVzdWx0Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsRUFBQUEsS0FBSyxFQUFFO0FBRG9DLENBQTdDO0FBR0FELE9BQU8sQ0FBQ0UsaUJBQVIsR0FBNEJBLGlCQUE1QjtBQUNBRixPQUFPLENBQUNHLGtCQUFSLEdBQTZCQSxrQkFBN0I7QUFDQUgsT0FBTyxDQUFDSSxhQUFSLEdBQXdCLEtBQUssQ0FBN0I7O0FBRUEsU0FBU0MsR0FBVCxHQUFlO0FBQ2IsUUFBTUMsSUFBSSxHQUFHQyxzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLElBQUQsQ0FBUixDQUFuQzs7QUFFQUgsRUFBQUEsR0FBRyxHQUFHLFlBQVk7QUFDaEIsV0FBT0MsSUFBUDtBQUNELEdBRkQ7O0FBSUEsU0FBT0EsSUFBUDtBQUNEOztBQUVELElBQUlHLE9BQU8sR0FBR0Ysc0JBQXNC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ckMsQ0FBckMsQ0FBUDtBQUNEOztBQUVELFNBQVNYLGtCQUFULENBQTRCVyxRQUE1QixFQUFzQ0MsSUFBdEMsRUFBNEM7QUFDMUMsU0FBTyxJQUFJZSxPQUFKLENBQVksQ0FBQ0MsR0FBRCxFQUFNQyxHQUFOLEtBQWM7QUFDL0I1QixJQUFBQSxhQUFhLENBQUNVLFFBQUQsRUFBV0MsSUFBWCxFQUFpQixDQUFDUSxHQUFELEVBQU1VLE1BQU4sS0FBaUI7QUFDN0MsVUFBSVYsR0FBRyxJQUFJLElBQVgsRUFBaUJRLEdBQUcsQ0FBQ0UsTUFBRCxDQUFILENBQWpCLEtBQWtDRCxHQUFHLENBQUNULEdBQUQsQ0FBSDtBQUNuQyxLQUZZLENBQWI7QUFHRCxHQUpNLENBQVA7QUFLRCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy50cmFuc2Zvcm1GaWxlU3luYyA9IHRyYW5zZm9ybUZpbGVTeW5jO1xuZXhwb3J0cy50cmFuc2Zvcm1GaWxlQXN5bmMgPSB0cmFuc2Zvcm1GaWxlQXN5bmM7XG5leHBvcnRzLnRyYW5zZm9ybUZpbGUgPSB2b2lkIDA7XG5cbmZ1bmN0aW9uIF9mcygpIHtcbiAgY29uc3QgZGF0YSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImZzXCIpKTtcblxuICBfZnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbnZhciBfY29uZmlnID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jb25maWdcIikpO1xuXG52YXIgX3RyYW5zZm9ybWF0aW9uID0gcmVxdWlyZShcIi4vdHJhbnNmb3JtYXRpb25cIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmNvbnN0IHRyYW5zZm9ybUZpbGUgPSBmdW5jdGlvbiB0cmFuc2Zvcm1GaWxlKGZpbGVuYW1lLCBvcHRzLCBjYWxsYmFjaykge1xuICBsZXQgb3B0aW9ucztcblxuICBpZiAodHlwZW9mIG9wdHMgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGNhbGxiYWNrID0gb3B0cztcbiAgICBvcHRzID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKG9wdHMgPT0gbnVsbCkge1xuICAgIG9wdGlvbnMgPSB7XG4gICAgICBmaWxlbmFtZVxuICAgIH07XG4gIH0gZWxzZSBpZiAob3B0cyAmJiB0eXBlb2Ygb3B0cyA9PT0gXCJvYmplY3RcIikge1xuICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRzLCB7XG4gICAgICBmaWxlbmFtZVxuICAgIH0pO1xuICB9XG5cbiAgcHJvY2Vzcy5uZXh0VGljaygoKSA9PiB7XG4gICAgbGV0IGNmZztcblxuICAgIHRyeSB7XG4gICAgICBjZmcgPSAoMCwgX2NvbmZpZy5kZWZhdWx0KShvcHRpb25zKTtcbiAgICAgIGlmIChjZmcgPT09IG51bGwpIHJldHVybiBjYWxsYmFjayhudWxsLCBudWxsKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbmZpZyA9IGNmZztcblxuICAgIF9mcygpLmRlZmF1bHQucmVhZEZpbGUoZmlsZW5hbWUsIFwidXRmOFwiLCBmdW5jdGlvbiAoZXJyLCBjb2RlKSB7XG4gICAgICBpZiAoZXJyKSByZXR1cm4gY2FsbGJhY2soZXJyLCBudWxsKTtcbiAgICAgICgwLCBfdHJhbnNmb3JtYXRpb24ucnVuQXN5bmMpKGNvbmZpZywgY29kZSwgbnVsbCwgY2FsbGJhY2spO1xuICAgIH0pO1xuICB9KTtcbn07XG5cbmV4cG9ydHMudHJhbnNmb3JtRmlsZSA9IHRyYW5zZm9ybUZpbGU7XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybUZpbGVTeW5jKGZpbGVuYW1lLCBvcHRzKSB7XG4gIGxldCBvcHRpb25zO1xuXG4gIGlmIChvcHRzID09IG51bGwpIHtcbiAgICBvcHRpb25zID0ge1xuICAgICAgZmlsZW5hbWVcbiAgICB9O1xuICB9IGVsc2UgaWYgKG9wdHMgJiYgdHlwZW9mIG9wdHMgPT09IFwib2JqZWN0XCIpIHtcbiAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0cywge1xuICAgICAgZmlsZW5hbWVcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IGNvbmZpZyA9ICgwLCBfY29uZmlnLmRlZmF1bHQpKG9wdGlvbnMpO1xuICBpZiAoY29uZmlnID09PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgcmV0dXJuICgwLCBfdHJhbnNmb3JtYXRpb24ucnVuU3luYykoY29uZmlnLCBfZnMoKS5kZWZhdWx0LnJlYWRGaWxlU3luYyhmaWxlbmFtZSwgXCJ1dGY4XCIpKTtcbn1cblxuZnVuY3Rpb24gdHJhbnNmb3JtRmlsZUFzeW5jKGZpbGVuYW1lLCBvcHRzKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzLCByZWopID0+IHtcbiAgICB0cmFuc2Zvcm1GaWxlKGZpbGVuYW1lLCBvcHRzLCAoZXJyLCByZXN1bHQpID0+IHtcbiAgICAgIGlmIChlcnIgPT0gbnVsbCkgcmVzKHJlc3VsdCk7ZWxzZSByZWooZXJyKTtcbiAgICB9KTtcbiAgfSk7XG59Il19