"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.transformFromAstSync = transformFromAstSync;
exports.transformFromAstAsync = transformFromAstAsync;
exports.transformFromAst = void 0;

var _config = _interopRequireDefault(require("./config"));

var _transformation = require("./transformation");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

const transformFromAst = function transformFromAst(ast, code, opts, callback) {
  if (typeof opts === "function") {
    callback = opts;
    opts = undefined;
  }

  if (callback === undefined) return transformFromAstSync(ast, code, opts);
  const cb = callback;
  process.nextTick(() => {
    let cfg;

    try {
      cfg = (0, _config.default)(opts);
      if (cfg === null) return cb(null, null);
    } catch (err) {
      return cb(err);
    }

    if (!ast) return cb(new Error("No AST given"));
    (0, _transformation.runAsync)(cfg, code, ast, cb);
  });
};

exports.transformFromAst = transformFromAst;

function transformFromAstSync(ast, code, opts) {
  const config = (0, _config.default)(opts);
  if (config === null) return null;
  if (!ast) throw new Error("No AST given");
  return (0, _transformation.runSync)(config, code, ast);
}

function transformFromAstAsync(ast, code, opts) {
  return new Promise((res, rej) => {
    transformFromAst(ast, code, opts, (err, result) => {
      if (err == null) res(result);else rej(err);
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvY29yZS9saWIvdHJhbnNmb3JtLWFzdC5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInRyYW5zZm9ybUZyb21Bc3RTeW5jIiwidHJhbnNmb3JtRnJvbUFzdEFzeW5jIiwidHJhbnNmb3JtRnJvbUFzdCIsIl9jb25maWciLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl90cmFuc2Zvcm1hdGlvbiIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiYXN0IiwiY29kZSIsIm9wdHMiLCJjYWxsYmFjayIsInVuZGVmaW5lZCIsImNiIiwicHJvY2VzcyIsIm5leHRUaWNrIiwiY2ZnIiwiZXJyIiwiRXJyb3IiLCJydW5Bc3luYyIsImNvbmZpZyIsInJ1blN5bmMiLCJQcm9taXNlIiwicmVzIiwicmVqIiwicmVzdWx0Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsRUFBQUEsS0FBSyxFQUFFO0FBRG9DLENBQTdDO0FBR0FELE9BQU8sQ0FBQ0Usb0JBQVIsR0FBK0JBLG9CQUEvQjtBQUNBRixPQUFPLENBQUNHLHFCQUFSLEdBQWdDQSxxQkFBaEM7QUFDQUgsT0FBTyxDQUFDSSxnQkFBUixHQUEyQixLQUFLLENBQWhDOztBQUVBLElBQUlDLE9BQU8sR0FBR0Msc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxVQUFELENBQVIsQ0FBcEM7O0FBRUEsSUFBSUMsZUFBZSxHQUFHRCxPQUFPLENBQUMsa0JBQUQsQ0FBN0I7O0FBRUEsU0FBU0Qsc0JBQVQsQ0FBZ0NHLEdBQWhDLEVBQXFDO0FBQUUsU0FBT0EsR0FBRyxJQUFJQSxHQUFHLENBQUNDLFVBQVgsR0FBd0JELEdBQXhCLEdBQThCO0FBQUVFLElBQUFBLE9BQU8sRUFBRUY7QUFBWCxHQUFyQztBQUF3RDs7QUFFL0YsTUFBTUwsZ0JBQWdCLEdBQUcsU0FBU0EsZ0JBQVQsQ0FBMEJRLEdBQTFCLEVBQStCQyxJQUEvQixFQUFxQ0MsSUFBckMsRUFBMkNDLFFBQTNDLEVBQXFEO0FBQzVFLE1BQUksT0FBT0QsSUFBUCxLQUFnQixVQUFwQixFQUFnQztBQUM5QkMsSUFBQUEsUUFBUSxHQUFHRCxJQUFYO0FBQ0FBLElBQUFBLElBQUksR0FBR0UsU0FBUDtBQUNEOztBQUVELE1BQUlELFFBQVEsS0FBS0MsU0FBakIsRUFBNEIsT0FBT2Qsb0JBQW9CLENBQUNVLEdBQUQsRUFBTUMsSUFBTixFQUFZQyxJQUFaLENBQTNCO0FBQzVCLFFBQU1HLEVBQUUsR0FBR0YsUUFBWDtBQUNBRyxFQUFBQSxPQUFPLENBQUNDLFFBQVIsQ0FBaUIsTUFBTTtBQUNyQixRQUFJQyxHQUFKOztBQUVBLFFBQUk7QUFDRkEsTUFBQUEsR0FBRyxHQUFHLENBQUMsR0FBR2YsT0FBTyxDQUFDTSxPQUFaLEVBQXFCRyxJQUFyQixDQUFOO0FBQ0EsVUFBSU0sR0FBRyxLQUFLLElBQVosRUFBa0IsT0FBT0gsRUFBRSxDQUFDLElBQUQsRUFBTyxJQUFQLENBQVQ7QUFDbkIsS0FIRCxDQUdFLE9BQU9JLEdBQVAsRUFBWTtBQUNaLGFBQU9KLEVBQUUsQ0FBQ0ksR0FBRCxDQUFUO0FBQ0Q7O0FBRUQsUUFBSSxDQUFDVCxHQUFMLEVBQVUsT0FBT0ssRUFBRSxDQUFDLElBQUlLLEtBQUosQ0FBVSxjQUFWLENBQUQsQ0FBVDtBQUNWLEtBQUMsR0FBR2QsZUFBZSxDQUFDZSxRQUFwQixFQUE4QkgsR0FBOUIsRUFBbUNQLElBQW5DLEVBQXlDRCxHQUF6QyxFQUE4Q0ssRUFBOUM7QUFDRCxHQVpEO0FBYUQsQ0FyQkQ7O0FBdUJBakIsT0FBTyxDQUFDSSxnQkFBUixHQUEyQkEsZ0JBQTNCOztBQUVBLFNBQVNGLG9CQUFULENBQThCVSxHQUE5QixFQUFtQ0MsSUFBbkMsRUFBeUNDLElBQXpDLEVBQStDO0FBQzdDLFFBQU1VLE1BQU0sR0FBRyxDQUFDLEdBQUduQixPQUFPLENBQUNNLE9BQVosRUFBcUJHLElBQXJCLENBQWY7QUFDQSxNQUFJVSxNQUFNLEtBQUssSUFBZixFQUFxQixPQUFPLElBQVA7QUFDckIsTUFBSSxDQUFDWixHQUFMLEVBQVUsTUFBTSxJQUFJVSxLQUFKLENBQVUsY0FBVixDQUFOO0FBQ1YsU0FBTyxDQUFDLEdBQUdkLGVBQWUsQ0FBQ2lCLE9BQXBCLEVBQTZCRCxNQUE3QixFQUFxQ1gsSUFBckMsRUFBMkNELEdBQTNDLENBQVA7QUFDRDs7QUFFRCxTQUFTVCxxQkFBVCxDQUErQlMsR0FBL0IsRUFBb0NDLElBQXBDLEVBQTBDQyxJQUExQyxFQUFnRDtBQUM5QyxTQUFPLElBQUlZLE9BQUosQ0FBWSxDQUFDQyxHQUFELEVBQU1DLEdBQU4sS0FBYztBQUMvQnhCLElBQUFBLGdCQUFnQixDQUFDUSxHQUFELEVBQU1DLElBQU4sRUFBWUMsSUFBWixFQUFrQixDQUFDTyxHQUFELEVBQU1RLE1BQU4sS0FBaUI7QUFDakQsVUFBSVIsR0FBRyxJQUFJLElBQVgsRUFBaUJNLEdBQUcsQ0FBQ0UsTUFBRCxDQUFILENBQWpCLEtBQWtDRCxHQUFHLENBQUNQLEdBQUQsQ0FBSDtBQUNuQyxLQUZlLENBQWhCO0FBR0QsR0FKTSxDQUFQO0FBS0QiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMudHJhbnNmb3JtRnJvbUFzdFN5bmMgPSB0cmFuc2Zvcm1Gcm9tQXN0U3luYztcbmV4cG9ydHMudHJhbnNmb3JtRnJvbUFzdEFzeW5jID0gdHJhbnNmb3JtRnJvbUFzdEFzeW5jO1xuZXhwb3J0cy50cmFuc2Zvcm1Gcm9tQXN0ID0gdm9pZCAwO1xuXG52YXIgX2NvbmZpZyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY29uZmlnXCIpKTtcblxudmFyIF90cmFuc2Zvcm1hdGlvbiA9IHJlcXVpcmUoXCIuL3RyYW5zZm9ybWF0aW9uXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5jb25zdCB0cmFuc2Zvcm1Gcm9tQXN0ID0gZnVuY3Rpb24gdHJhbnNmb3JtRnJvbUFzdChhc3QsIGNvZGUsIG9wdHMsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2Ygb3B0cyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgY2FsbGJhY2sgPSBvcHRzO1xuICAgIG9wdHMgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAoY2FsbGJhY2sgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHRyYW5zZm9ybUZyb21Bc3RTeW5jKGFzdCwgY29kZSwgb3B0cyk7XG4gIGNvbnN0IGNiID0gY2FsbGJhY2s7XG4gIHByb2Nlc3MubmV4dFRpY2soKCkgPT4ge1xuICAgIGxldCBjZmc7XG5cbiAgICB0cnkge1xuICAgICAgY2ZnID0gKDAsIF9jb25maWcuZGVmYXVsdCkob3B0cyk7XG4gICAgICBpZiAoY2ZnID09PSBudWxsKSByZXR1cm4gY2IobnVsbCwgbnVsbCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gY2IoZXJyKTtcbiAgICB9XG5cbiAgICBpZiAoIWFzdCkgcmV0dXJuIGNiKG5ldyBFcnJvcihcIk5vIEFTVCBnaXZlblwiKSk7XG4gICAgKDAsIF90cmFuc2Zvcm1hdGlvbi5ydW5Bc3luYykoY2ZnLCBjb2RlLCBhc3QsIGNiKTtcbiAgfSk7XG59O1xuXG5leHBvcnRzLnRyYW5zZm9ybUZyb21Bc3QgPSB0cmFuc2Zvcm1Gcm9tQXN0O1xuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Gcm9tQXN0U3luYyhhc3QsIGNvZGUsIG9wdHMpIHtcbiAgY29uc3QgY29uZmlnID0gKDAsIF9jb25maWcuZGVmYXVsdCkob3B0cyk7XG4gIGlmIChjb25maWcgPT09IG51bGwpIHJldHVybiBudWxsO1xuICBpZiAoIWFzdCkgdGhyb3cgbmV3IEVycm9yKFwiTm8gQVNUIGdpdmVuXCIpO1xuICByZXR1cm4gKDAsIF90cmFuc2Zvcm1hdGlvbi5ydW5TeW5jKShjb25maWcsIGNvZGUsIGFzdCk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybUZyb21Bc3RBc3luYyhhc3QsIGNvZGUsIG9wdHMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXMsIHJlaikgPT4ge1xuICAgIHRyYW5zZm9ybUZyb21Bc3QoYXN0LCBjb2RlLCBvcHRzLCAoZXJyLCByZXN1bHQpID0+IHtcbiAgICAgIGlmIChlcnIgPT0gbnVsbCkgcmVzKHJlc3VsdCk7ZWxzZSByZWooZXJyKTtcbiAgICB9KTtcbiAgfSk7XG59Il19