"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findPackageData = findPackageData;

function _path() {
  const data = _interopRequireDefault(require("path"));

  _path = function () {
    return data;
  };

  return data;
}

var _utils = require("./utils");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

const PACKAGE_FILENAME = "package.json";

function findPackageData(filepath) {
  let pkg = null;
  const directories = [];
  let isPackage = true;

  let dirname = _path().default.dirname(filepath);

  while (!pkg && _path().default.basename(dirname) !== "node_modules") {
    directories.push(dirname);
    pkg = readConfigPackage(_path().default.join(dirname, PACKAGE_FILENAME));

    const nextLoc = _path().default.dirname(dirname);

    if (dirname === nextLoc) {
      isPackage = false;
      break;
    }

    dirname = nextLoc;
  }

  return {
    filepath,
    directories,
    pkg,
    isPackage
  };
}

const readConfigPackage = (0, _utils.makeStaticFileCache)((filepath, content) => {
  let options;

  try {
    options = JSON.parse(content);
  } catch (err) {
    err.message = `${filepath}: Error while parsing JSON - ${err.message}`;
    throw err;
  }

  if (typeof options !== "object") {
    throw new Error(`${filepath}: Config returned typeof ${typeof options}`);
  }

  if (Array.isArray(options)) {
    throw new Error(`${filepath}: Expected config object but found array`);
  }

  return {
    filepath,
    dirname: _path().default.dirname(filepath),
    options
  };
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvY29yZS9saWIvY29uZmlnL2ZpbGVzL3BhY2thZ2UuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJmaW5kUGFja2FnZURhdGEiLCJfcGF0aCIsImRhdGEiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl91dGlscyIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiUEFDS0FHRV9GSUxFTkFNRSIsImZpbGVwYXRoIiwicGtnIiwiZGlyZWN0b3JpZXMiLCJpc1BhY2thZ2UiLCJkaXJuYW1lIiwiYmFzZW5hbWUiLCJwdXNoIiwicmVhZENvbmZpZ1BhY2thZ2UiLCJqb2luIiwibmV4dExvYyIsIm1ha2VTdGF0aWNGaWxlQ2FjaGUiLCJjb250ZW50Iiwib3B0aW9ucyIsIkpTT04iLCJwYXJzZSIsImVyciIsIm1lc3NhZ2UiLCJFcnJvciIsIkFycmF5IiwiaXNBcnJheSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLEVBQUFBLEtBQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLGVBQVIsR0FBMEJBLGVBQTFCOztBQUVBLFNBQVNDLEtBQVQsR0FBaUI7QUFDZixRQUFNQyxJQUFJLEdBQUdDLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsTUFBRCxDQUFSLENBQW5DOztBQUVBSCxFQUFBQSxLQUFLLEdBQUcsWUFBWTtBQUNsQixXQUFPQyxJQUFQO0FBQ0QsR0FGRDs7QUFJQSxTQUFPQSxJQUFQO0FBQ0Q7O0FBRUQsSUFBSUcsTUFBTSxHQUFHRCxPQUFPLENBQUMsU0FBRCxDQUFwQjs7QUFFQSxTQUFTRCxzQkFBVCxDQUFnQ0csR0FBaEMsRUFBcUM7QUFBRSxTQUFPQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsVUFBWCxHQUF3QkQsR0FBeEIsR0FBOEI7QUFBRUUsSUFBQUEsT0FBTyxFQUFFRjtBQUFYLEdBQXJDO0FBQXdEOztBQUUvRixNQUFNRyxnQkFBZ0IsR0FBRyxjQUF6Qjs7QUFFQSxTQUFTVCxlQUFULENBQXlCVSxRQUF6QixFQUFtQztBQUNqQyxNQUFJQyxHQUFHLEdBQUcsSUFBVjtBQUNBLFFBQU1DLFdBQVcsR0FBRyxFQUFwQjtBQUNBLE1BQUlDLFNBQVMsR0FBRyxJQUFoQjs7QUFFQSxNQUFJQyxPQUFPLEdBQUdiLEtBQUssR0FBR08sT0FBUixDQUFnQk0sT0FBaEIsQ0FBd0JKLFFBQXhCLENBQWQ7O0FBRUEsU0FBTyxDQUFDQyxHQUFELElBQVFWLEtBQUssR0FBR08sT0FBUixDQUFnQk8sUUFBaEIsQ0FBeUJELE9BQXpCLE1BQXNDLGNBQXJELEVBQXFFO0FBQ25FRixJQUFBQSxXQUFXLENBQUNJLElBQVosQ0FBaUJGLE9BQWpCO0FBQ0FILElBQUFBLEdBQUcsR0FBR00saUJBQWlCLENBQUNoQixLQUFLLEdBQUdPLE9BQVIsQ0FBZ0JVLElBQWhCLENBQXFCSixPQUFyQixFQUE4QkwsZ0JBQTlCLENBQUQsQ0FBdkI7O0FBRUEsVUFBTVUsT0FBTyxHQUFHbEIsS0FBSyxHQUFHTyxPQUFSLENBQWdCTSxPQUFoQixDQUF3QkEsT0FBeEIsQ0FBaEI7O0FBRUEsUUFBSUEsT0FBTyxLQUFLSyxPQUFoQixFQUF5QjtBQUN2Qk4sTUFBQUEsU0FBUyxHQUFHLEtBQVo7QUFDQTtBQUNEOztBQUVEQyxJQUFBQSxPQUFPLEdBQUdLLE9BQVY7QUFDRDs7QUFFRCxTQUFPO0FBQ0xULElBQUFBLFFBREs7QUFFTEUsSUFBQUEsV0FGSztBQUdMRCxJQUFBQSxHQUhLO0FBSUxFLElBQUFBO0FBSkssR0FBUDtBQU1EOztBQUVELE1BQU1JLGlCQUFpQixHQUFHLENBQUMsR0FBR1osTUFBTSxDQUFDZSxtQkFBWCxFQUFnQyxDQUFDVixRQUFELEVBQVdXLE9BQVgsS0FBdUI7QUFDL0UsTUFBSUMsT0FBSjs7QUFFQSxNQUFJO0FBQ0ZBLElBQUFBLE9BQU8sR0FBR0MsSUFBSSxDQUFDQyxLQUFMLENBQVdILE9BQVgsQ0FBVjtBQUNELEdBRkQsQ0FFRSxPQUFPSSxHQUFQLEVBQVk7QUFDWkEsSUFBQUEsR0FBRyxDQUFDQyxPQUFKLEdBQWUsR0FBRWhCLFFBQVMsZ0NBQStCZSxHQUFHLENBQUNDLE9BQVEsRUFBckU7QUFDQSxVQUFNRCxHQUFOO0FBQ0Q7O0FBRUQsTUFBSSxPQUFPSCxPQUFQLEtBQW1CLFFBQXZCLEVBQWlDO0FBQy9CLFVBQU0sSUFBSUssS0FBSixDQUFXLEdBQUVqQixRQUFTLDRCQUEyQixPQUFPWSxPQUFRLEVBQWhFLENBQU47QUFDRDs7QUFFRCxNQUFJTSxLQUFLLENBQUNDLE9BQU4sQ0FBY1AsT0FBZCxDQUFKLEVBQTRCO0FBQzFCLFVBQU0sSUFBSUssS0FBSixDQUFXLEdBQUVqQixRQUFTLDBDQUF0QixDQUFOO0FBQ0Q7O0FBRUQsU0FBTztBQUNMQSxJQUFBQSxRQURLO0FBRUxJLElBQUFBLE9BQU8sRUFBRWIsS0FBSyxHQUFHTyxPQUFSLENBQWdCTSxPQUFoQixDQUF3QkosUUFBeEIsQ0FGSjtBQUdMWSxJQUFBQTtBQUhLLEdBQVA7QUFLRCxDQXZCeUIsQ0FBMUIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZmluZFBhY2thZ2VEYXRhID0gZmluZFBhY2thZ2VEYXRhO1xuXG5mdW5jdGlvbiBfcGF0aCgpIHtcbiAgY29uc3QgZGF0YSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInBhdGhcIikpO1xuXG4gIF9wYXRoID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkYXRhO1xuICB9O1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmNvbnN0IFBBQ0tBR0VfRklMRU5BTUUgPSBcInBhY2thZ2UuanNvblwiO1xuXG5mdW5jdGlvbiBmaW5kUGFja2FnZURhdGEoZmlsZXBhdGgpIHtcbiAgbGV0IHBrZyA9IG51bGw7XG4gIGNvbnN0IGRpcmVjdG9yaWVzID0gW107XG4gIGxldCBpc1BhY2thZ2UgPSB0cnVlO1xuXG4gIGxldCBkaXJuYW1lID0gX3BhdGgoKS5kZWZhdWx0LmRpcm5hbWUoZmlsZXBhdGgpO1xuXG4gIHdoaWxlICghcGtnICYmIF9wYXRoKCkuZGVmYXVsdC5iYXNlbmFtZShkaXJuYW1lKSAhPT0gXCJub2RlX21vZHVsZXNcIikge1xuICAgIGRpcmVjdG9yaWVzLnB1c2goZGlybmFtZSk7XG4gICAgcGtnID0gcmVhZENvbmZpZ1BhY2thZ2UoX3BhdGgoKS5kZWZhdWx0LmpvaW4oZGlybmFtZSwgUEFDS0FHRV9GSUxFTkFNRSkpO1xuXG4gICAgY29uc3QgbmV4dExvYyA9IF9wYXRoKCkuZGVmYXVsdC5kaXJuYW1lKGRpcm5hbWUpO1xuXG4gICAgaWYgKGRpcm5hbWUgPT09IG5leHRMb2MpIHtcbiAgICAgIGlzUGFja2FnZSA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgZGlybmFtZSA9IG5leHRMb2M7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZpbGVwYXRoLFxuICAgIGRpcmVjdG9yaWVzLFxuICAgIHBrZyxcbiAgICBpc1BhY2thZ2VcbiAgfTtcbn1cblxuY29uc3QgcmVhZENvbmZpZ1BhY2thZ2UgPSAoMCwgX3V0aWxzLm1ha2VTdGF0aWNGaWxlQ2FjaGUpKChmaWxlcGF0aCwgY29udGVudCkgPT4ge1xuICBsZXQgb3B0aW9ucztcblxuICB0cnkge1xuICAgIG9wdGlvbnMgPSBKU09OLnBhcnNlKGNvbnRlbnQpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBlcnIubWVzc2FnZSA9IGAke2ZpbGVwYXRofTogRXJyb3Igd2hpbGUgcGFyc2luZyBKU09OIC0gJHtlcnIubWVzc2FnZX1gO1xuICAgIHRocm93IGVycjtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gXCJvYmplY3RcIikge1xuICAgIHRocm93IG5ldyBFcnJvcihgJHtmaWxlcGF0aH06IENvbmZpZyByZXR1cm5lZCB0eXBlb2YgJHt0eXBlb2Ygb3B0aW9uc31gKTtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KG9wdGlvbnMpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGAke2ZpbGVwYXRofTogRXhwZWN0ZWQgY29uZmlnIG9iamVjdCBidXQgZm91bmQgYXJyYXlgKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZmlsZXBhdGgsXG4gICAgZGlybmFtZTogX3BhdGgoKS5kZWZhdWx0LmRpcm5hbWUoZmlsZXBhdGgpLFxuICAgIG9wdGlvbnNcbiAgfTtcbn0pOyJdfQ==