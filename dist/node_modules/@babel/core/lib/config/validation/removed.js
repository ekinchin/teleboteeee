"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = {
  auxiliaryComment: {
    message: "Use `auxiliaryCommentBefore` or `auxiliaryCommentAfter`"
  },
  blacklist: {
    message: "Put the specific transforms you want in the `plugins` option"
  },
  breakConfig: {
    message: "This is not a necessary option in Babel 6"
  },
  experimental: {
    message: "Put the specific transforms you want in the `plugins` option"
  },
  externalHelpers: {
    message: "Use the `external-helpers` plugin instead. " + "Check out http://babeljs.io/docs/plugins/external-helpers/"
  },
  extra: {
    message: ""
  },
  jsxPragma: {
    message: "use the `pragma` option in the `react-jsx` plugin. " + "Check out http://babeljs.io/docs/plugins/transform-react-jsx/"
  },
  loose: {
    message: "Specify the `loose` option for the relevant plugin you are using " + "or use a preset that sets the option."
  },
  metadataUsedHelpers: {
    message: "Not required anymore as this is enabled by default"
  },
  modules: {
    message: "Use the corresponding module transform plugin in the `plugins` option. " + "Check out http://babeljs.io/docs/plugins/#modules"
  },
  nonStandard: {
    message: "Use the `react-jsx` and `flow-strip-types` plugins to support JSX and Flow. " + "Also check out the react preset http://babeljs.io/docs/plugins/preset-react/"
  },
  optional: {
    message: "Put the specific transforms you want in the `plugins` option"
  },
  sourceMapName: {
    message: "The `sourceMapName` option has been removed because it makes more sense for the " + "tooling that calls Babel to assign `map.file` themselves."
  },
  stage: {
    message: "Check out the corresponding stage-x presets http://babeljs.io/docs/plugins/#presets"
  },
  whitelist: {
    message: "Put the specific transforms you want in the `plugins` option"
  },
  resolveModuleSource: {
    version: 6,
    message: "Use `babel-plugin-module-resolver@3`'s 'resolvePath' options"
  },
  metadata: {
    version: 6,
    message: "Generated plugin metadata is always included in the output result"
  },
  sourceMapTarget: {
    version: 6,
    message: "The `sourceMapTarget` option has been removed because it makes more sense for the tooling " + "that calls Babel to assign `map.file` themselves."
  }
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvY29yZS9saWIvY29uZmlnL3ZhbGlkYXRpb24vcmVtb3ZlZC5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfZGVmYXVsdCIsImF1eGlsaWFyeUNvbW1lbnQiLCJtZXNzYWdlIiwiYmxhY2tsaXN0IiwiYnJlYWtDb25maWciLCJleHBlcmltZW50YWwiLCJleHRlcm5hbEhlbHBlcnMiLCJleHRyYSIsImpzeFByYWdtYSIsImxvb3NlIiwibWV0YWRhdGFVc2VkSGVscGVycyIsIm1vZHVsZXMiLCJub25TdGFuZGFyZCIsIm9wdGlvbmFsIiwic291cmNlTWFwTmFtZSIsInN0YWdlIiwid2hpdGVsaXN0IiwicmVzb2x2ZU1vZHVsZVNvdXJjZSIsInZlcnNpb24iLCJtZXRhZGF0YSIsInNvdXJjZU1hcFRhcmdldCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLEVBQUFBLEtBQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLE9BQVIsR0FBa0IsS0FBSyxDQUF2QjtBQUNBLElBQUlDLFFBQVEsR0FBRztBQUNiQyxFQUFBQSxnQkFBZ0IsRUFBRTtBQUNoQkMsSUFBQUEsT0FBTyxFQUFFO0FBRE8sR0FETDtBQUliQyxFQUFBQSxTQUFTLEVBQUU7QUFDVEQsSUFBQUEsT0FBTyxFQUFFO0FBREEsR0FKRTtBQU9iRSxFQUFBQSxXQUFXLEVBQUU7QUFDWEYsSUFBQUEsT0FBTyxFQUFFO0FBREUsR0FQQTtBQVViRyxFQUFBQSxZQUFZLEVBQUU7QUFDWkgsSUFBQUEsT0FBTyxFQUFFO0FBREcsR0FWRDtBQWFiSSxFQUFBQSxlQUFlLEVBQUU7QUFDZkosSUFBQUEsT0FBTyxFQUFFLGdEQUFnRDtBQUQxQyxHQWJKO0FBZ0JiSyxFQUFBQSxLQUFLLEVBQUU7QUFDTEwsSUFBQUEsT0FBTyxFQUFFO0FBREosR0FoQk07QUFtQmJNLEVBQUFBLFNBQVMsRUFBRTtBQUNUTixJQUFBQSxPQUFPLEVBQUUsd0RBQXdEO0FBRHhELEdBbkJFO0FBc0JiTyxFQUFBQSxLQUFLLEVBQUU7QUFDTFAsSUFBQUEsT0FBTyxFQUFFLHNFQUFzRTtBQUQxRSxHQXRCTTtBQXlCYlEsRUFBQUEsbUJBQW1CLEVBQUU7QUFDbkJSLElBQUFBLE9BQU8sRUFBRTtBQURVLEdBekJSO0FBNEJiUyxFQUFBQSxPQUFPLEVBQUU7QUFDUFQsSUFBQUEsT0FBTyxFQUFFLDRFQUE0RTtBQUQ5RSxHQTVCSTtBQStCYlUsRUFBQUEsV0FBVyxFQUFFO0FBQ1hWLElBQUFBLE9BQU8sRUFBRSxpRkFBaUY7QUFEL0UsR0EvQkE7QUFrQ2JXLEVBQUFBLFFBQVEsRUFBRTtBQUNSWCxJQUFBQSxPQUFPLEVBQUU7QUFERCxHQWxDRztBQXFDYlksRUFBQUEsYUFBYSxFQUFFO0FBQ2JaLElBQUFBLE9BQU8sRUFBRSxxRkFBcUY7QUFEakYsR0FyQ0Y7QUF3Q2JhLEVBQUFBLEtBQUssRUFBRTtBQUNMYixJQUFBQSxPQUFPLEVBQUU7QUFESixHQXhDTTtBQTJDYmMsRUFBQUEsU0FBUyxFQUFFO0FBQ1RkLElBQUFBLE9BQU8sRUFBRTtBQURBLEdBM0NFO0FBOENiZSxFQUFBQSxtQkFBbUIsRUFBRTtBQUNuQkMsSUFBQUEsT0FBTyxFQUFFLENBRFU7QUFFbkJoQixJQUFBQSxPQUFPLEVBQUU7QUFGVSxHQTlDUjtBQWtEYmlCLEVBQUFBLFFBQVEsRUFBRTtBQUNSRCxJQUFBQSxPQUFPLEVBQUUsQ0FERDtBQUVSaEIsSUFBQUEsT0FBTyxFQUFFO0FBRkQsR0FsREc7QUFzRGJrQixFQUFBQSxlQUFlLEVBQUU7QUFDZkYsSUFBQUEsT0FBTyxFQUFFLENBRE07QUFFZmhCLElBQUFBLE9BQU8sRUFBRSwrRkFBK0Y7QUFGekY7QUF0REosQ0FBZjtBQTJEQUwsT0FBTyxDQUFDRSxPQUFSLEdBQWtCQyxRQUFsQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9kZWZhdWx0ID0ge1xuICBhdXhpbGlhcnlDb21tZW50OiB7XG4gICAgbWVzc2FnZTogXCJVc2UgYGF1eGlsaWFyeUNvbW1lbnRCZWZvcmVgIG9yIGBhdXhpbGlhcnlDb21tZW50QWZ0ZXJgXCJcbiAgfSxcbiAgYmxhY2tsaXN0OiB7XG4gICAgbWVzc2FnZTogXCJQdXQgdGhlIHNwZWNpZmljIHRyYW5zZm9ybXMgeW91IHdhbnQgaW4gdGhlIGBwbHVnaW5zYCBvcHRpb25cIlxuICB9LFxuICBicmVha0NvbmZpZzoge1xuICAgIG1lc3NhZ2U6IFwiVGhpcyBpcyBub3QgYSBuZWNlc3Nhcnkgb3B0aW9uIGluIEJhYmVsIDZcIlxuICB9LFxuICBleHBlcmltZW50YWw6IHtcbiAgICBtZXNzYWdlOiBcIlB1dCB0aGUgc3BlY2lmaWMgdHJhbnNmb3JtcyB5b3Ugd2FudCBpbiB0aGUgYHBsdWdpbnNgIG9wdGlvblwiXG4gIH0sXG4gIGV4dGVybmFsSGVscGVyczoge1xuICAgIG1lc3NhZ2U6IFwiVXNlIHRoZSBgZXh0ZXJuYWwtaGVscGVyc2AgcGx1Z2luIGluc3RlYWQuIFwiICsgXCJDaGVjayBvdXQgaHR0cDovL2JhYmVsanMuaW8vZG9jcy9wbHVnaW5zL2V4dGVybmFsLWhlbHBlcnMvXCJcbiAgfSxcbiAgZXh0cmE6IHtcbiAgICBtZXNzYWdlOiBcIlwiXG4gIH0sXG4gIGpzeFByYWdtYToge1xuICAgIG1lc3NhZ2U6IFwidXNlIHRoZSBgcHJhZ21hYCBvcHRpb24gaW4gdGhlIGByZWFjdC1qc3hgIHBsdWdpbi4gXCIgKyBcIkNoZWNrIG91dCBodHRwOi8vYmFiZWxqcy5pby9kb2NzL3BsdWdpbnMvdHJhbnNmb3JtLXJlYWN0LWpzeC9cIlxuICB9LFxuICBsb29zZToge1xuICAgIG1lc3NhZ2U6IFwiU3BlY2lmeSB0aGUgYGxvb3NlYCBvcHRpb24gZm9yIHRoZSByZWxldmFudCBwbHVnaW4geW91IGFyZSB1c2luZyBcIiArIFwib3IgdXNlIGEgcHJlc2V0IHRoYXQgc2V0cyB0aGUgb3B0aW9uLlwiXG4gIH0sXG4gIG1ldGFkYXRhVXNlZEhlbHBlcnM6IHtcbiAgICBtZXNzYWdlOiBcIk5vdCByZXF1aXJlZCBhbnltb3JlIGFzIHRoaXMgaXMgZW5hYmxlZCBieSBkZWZhdWx0XCJcbiAgfSxcbiAgbW9kdWxlczoge1xuICAgIG1lc3NhZ2U6IFwiVXNlIHRoZSBjb3JyZXNwb25kaW5nIG1vZHVsZSB0cmFuc2Zvcm0gcGx1Z2luIGluIHRoZSBgcGx1Z2luc2Agb3B0aW9uLiBcIiArIFwiQ2hlY2sgb3V0IGh0dHA6Ly9iYWJlbGpzLmlvL2RvY3MvcGx1Z2lucy8jbW9kdWxlc1wiXG4gIH0sXG4gIG5vblN0YW5kYXJkOiB7XG4gICAgbWVzc2FnZTogXCJVc2UgdGhlIGByZWFjdC1qc3hgIGFuZCBgZmxvdy1zdHJpcC10eXBlc2AgcGx1Z2lucyB0byBzdXBwb3J0IEpTWCBhbmQgRmxvdy4gXCIgKyBcIkFsc28gY2hlY2sgb3V0IHRoZSByZWFjdCBwcmVzZXQgaHR0cDovL2JhYmVsanMuaW8vZG9jcy9wbHVnaW5zL3ByZXNldC1yZWFjdC9cIlxuICB9LFxuICBvcHRpb25hbDoge1xuICAgIG1lc3NhZ2U6IFwiUHV0IHRoZSBzcGVjaWZpYyB0cmFuc2Zvcm1zIHlvdSB3YW50IGluIHRoZSBgcGx1Z2luc2Agb3B0aW9uXCJcbiAgfSxcbiAgc291cmNlTWFwTmFtZToge1xuICAgIG1lc3NhZ2U6IFwiVGhlIGBzb3VyY2VNYXBOYW1lYCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZCBiZWNhdXNlIGl0IG1ha2VzIG1vcmUgc2Vuc2UgZm9yIHRoZSBcIiArIFwidG9vbGluZyB0aGF0IGNhbGxzIEJhYmVsIHRvIGFzc2lnbiBgbWFwLmZpbGVgIHRoZW1zZWx2ZXMuXCJcbiAgfSxcbiAgc3RhZ2U6IHtcbiAgICBtZXNzYWdlOiBcIkNoZWNrIG91dCB0aGUgY29ycmVzcG9uZGluZyBzdGFnZS14IHByZXNldHMgaHR0cDovL2JhYmVsanMuaW8vZG9jcy9wbHVnaW5zLyNwcmVzZXRzXCJcbiAgfSxcbiAgd2hpdGVsaXN0OiB7XG4gICAgbWVzc2FnZTogXCJQdXQgdGhlIHNwZWNpZmljIHRyYW5zZm9ybXMgeW91IHdhbnQgaW4gdGhlIGBwbHVnaW5zYCBvcHRpb25cIlxuICB9LFxuICByZXNvbHZlTW9kdWxlU291cmNlOiB7XG4gICAgdmVyc2lvbjogNixcbiAgICBtZXNzYWdlOiBcIlVzZSBgYmFiZWwtcGx1Z2luLW1vZHVsZS1yZXNvbHZlckAzYCdzICdyZXNvbHZlUGF0aCcgb3B0aW9uc1wiXG4gIH0sXG4gIG1ldGFkYXRhOiB7XG4gICAgdmVyc2lvbjogNixcbiAgICBtZXNzYWdlOiBcIkdlbmVyYXRlZCBwbHVnaW4gbWV0YWRhdGEgaXMgYWx3YXlzIGluY2x1ZGVkIGluIHRoZSBvdXRwdXQgcmVzdWx0XCJcbiAgfSxcbiAgc291cmNlTWFwVGFyZ2V0OiB7XG4gICAgdmVyc2lvbjogNixcbiAgICBtZXNzYWdlOiBcIlRoZSBgc291cmNlTWFwVGFyZ2V0YCBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZCBiZWNhdXNlIGl0IG1ha2VzIG1vcmUgc2Vuc2UgZm9yIHRoZSB0b29saW5nIFwiICsgXCJ0aGF0IGNhbGxzIEJhYmVsIHRvIGFzc2lnbiBgbWFwLmZpbGVgIHRoZW1zZWx2ZXMuXCJcbiAgfVxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdfQ==