"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validatePluginObject = validatePluginObject;

var _optionAssertions = require("./option-assertions");

const VALIDATORS = {
  name: _optionAssertions.assertString,
  manipulateOptions: _optionAssertions.assertFunction,
  pre: _optionAssertions.assertFunction,
  post: _optionAssertions.assertFunction,
  inherits: _optionAssertions.assertFunction,
  visitor: assertVisitorMap,
  parserOverride: _optionAssertions.assertFunction,
  generatorOverride: _optionAssertions.assertFunction
};

function assertVisitorMap(key, value) {
  const obj = (0, _optionAssertions.assertObject)(key, value);

  if (obj) {
    Object.keys(obj).forEach(prop => assertVisitorHandler(prop, obj[prop]));

    if (obj.enter || obj.exit) {
      throw new Error(`.${key} cannot contain catch-all "enter" or "exit" handlers. Please target individual nodes.`);
    }
  }

  return obj;
}

function assertVisitorHandler(key, value) {
  if (value && typeof value === "object") {
    Object.keys(value).forEach(handler => {
      if (handler !== "enter" && handler !== "exit") {
        throw new Error(`.visitor["${key}"] may only have .enter and/or .exit handlers.`);
      }
    });
  } else if (typeof value !== "function") {
    throw new Error(`.visitor["${key}"] must be a function`);
  }

  return value;
}

function validatePluginObject(obj) {
  Object.keys(obj).forEach(key => {
    const validator = VALIDATORS[key];
    if (validator) validator(key, obj[key]);else throw new Error(`.${key} is not a valid Plugin property`);
  });
  return obj;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvY29yZS9saWIvY29uZmlnL3ZhbGlkYXRpb24vcGx1Z2lucy5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInZhbGlkYXRlUGx1Z2luT2JqZWN0IiwiX29wdGlvbkFzc2VydGlvbnMiLCJyZXF1aXJlIiwiVkFMSURBVE9SUyIsIm5hbWUiLCJhc3NlcnRTdHJpbmciLCJtYW5pcHVsYXRlT3B0aW9ucyIsImFzc2VydEZ1bmN0aW9uIiwicHJlIiwicG9zdCIsImluaGVyaXRzIiwidmlzaXRvciIsImFzc2VydFZpc2l0b3JNYXAiLCJwYXJzZXJPdmVycmlkZSIsImdlbmVyYXRvck92ZXJyaWRlIiwia2V5Iiwib2JqIiwiYXNzZXJ0T2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJwcm9wIiwiYXNzZXJ0VmlzaXRvckhhbmRsZXIiLCJlbnRlciIsImV4aXQiLCJFcnJvciIsImhhbmRsZXIiLCJ2YWxpZGF0b3IiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzNDQyxFQUFBQSxLQUFLLEVBQUU7QUFEb0MsQ0FBN0M7QUFHQUQsT0FBTyxDQUFDRSxvQkFBUixHQUErQkEsb0JBQS9COztBQUVBLElBQUlDLGlCQUFpQixHQUFHQyxPQUFPLENBQUMscUJBQUQsQ0FBL0I7O0FBRUEsTUFBTUMsVUFBVSxHQUFHO0FBQ2pCQyxFQUFBQSxJQUFJLEVBQUVILGlCQUFpQixDQUFDSSxZQURQO0FBRWpCQyxFQUFBQSxpQkFBaUIsRUFBRUwsaUJBQWlCLENBQUNNLGNBRnBCO0FBR2pCQyxFQUFBQSxHQUFHLEVBQUVQLGlCQUFpQixDQUFDTSxjQUhOO0FBSWpCRSxFQUFBQSxJQUFJLEVBQUVSLGlCQUFpQixDQUFDTSxjQUpQO0FBS2pCRyxFQUFBQSxRQUFRLEVBQUVULGlCQUFpQixDQUFDTSxjQUxYO0FBTWpCSSxFQUFBQSxPQUFPLEVBQUVDLGdCQU5RO0FBT2pCQyxFQUFBQSxjQUFjLEVBQUVaLGlCQUFpQixDQUFDTSxjQVBqQjtBQVFqQk8sRUFBQUEsaUJBQWlCLEVBQUViLGlCQUFpQixDQUFDTTtBQVJwQixDQUFuQjs7QUFXQSxTQUFTSyxnQkFBVCxDQUEwQkcsR0FBMUIsRUFBK0JoQixLQUEvQixFQUFzQztBQUNwQyxRQUFNaUIsR0FBRyxHQUFHLENBQUMsR0FBR2YsaUJBQWlCLENBQUNnQixZQUF0QixFQUFvQ0YsR0FBcEMsRUFBeUNoQixLQUF6QyxDQUFaOztBQUVBLE1BQUlpQixHQUFKLEVBQVM7QUFDUHBCLElBQUFBLE1BQU0sQ0FBQ3NCLElBQVAsQ0FBWUYsR0FBWixFQUFpQkcsT0FBakIsQ0FBeUJDLElBQUksSUFBSUMsb0JBQW9CLENBQUNELElBQUQsRUFBT0osR0FBRyxDQUFDSSxJQUFELENBQVYsQ0FBckQ7O0FBRUEsUUFBSUosR0FBRyxDQUFDTSxLQUFKLElBQWFOLEdBQUcsQ0FBQ08sSUFBckIsRUFBMkI7QUFDekIsWUFBTSxJQUFJQyxLQUFKLENBQVcsSUFBR1QsR0FBSSx1RkFBbEIsQ0FBTjtBQUNEO0FBQ0Y7O0FBRUQsU0FBT0MsR0FBUDtBQUNEOztBQUVELFNBQVNLLG9CQUFULENBQThCTixHQUE5QixFQUFtQ2hCLEtBQW5DLEVBQTBDO0FBQ3hDLE1BQUlBLEtBQUssSUFBSSxPQUFPQSxLQUFQLEtBQWlCLFFBQTlCLEVBQXdDO0FBQ3RDSCxJQUFBQSxNQUFNLENBQUNzQixJQUFQLENBQVluQixLQUFaLEVBQW1Cb0IsT0FBbkIsQ0FBMkJNLE9BQU8sSUFBSTtBQUNwQyxVQUFJQSxPQUFPLEtBQUssT0FBWixJQUF1QkEsT0FBTyxLQUFLLE1BQXZDLEVBQStDO0FBQzdDLGNBQU0sSUFBSUQsS0FBSixDQUFXLGFBQVlULEdBQUksZ0RBQTNCLENBQU47QUFDRDtBQUNGLEtBSkQ7QUFLRCxHQU5ELE1BTU8sSUFBSSxPQUFPaEIsS0FBUCxLQUFpQixVQUFyQixFQUFpQztBQUN0QyxVQUFNLElBQUl5QixLQUFKLENBQVcsYUFBWVQsR0FBSSx1QkFBM0IsQ0FBTjtBQUNEOztBQUVELFNBQU9oQixLQUFQO0FBQ0Q7O0FBRUQsU0FBU0Msb0JBQVQsQ0FBOEJnQixHQUE5QixFQUFtQztBQUNqQ3BCLEVBQUFBLE1BQU0sQ0FBQ3NCLElBQVAsQ0FBWUYsR0FBWixFQUFpQkcsT0FBakIsQ0FBeUJKLEdBQUcsSUFBSTtBQUM5QixVQUFNVyxTQUFTLEdBQUd2QixVQUFVLENBQUNZLEdBQUQsQ0FBNUI7QUFDQSxRQUFJVyxTQUFKLEVBQWVBLFNBQVMsQ0FBQ1gsR0FBRCxFQUFNQyxHQUFHLENBQUNELEdBQUQsQ0FBVCxDQUFULENBQWYsS0FBNkMsTUFBTSxJQUFJUyxLQUFKLENBQVcsSUFBR1QsR0FBSSxpQ0FBbEIsQ0FBTjtBQUM5QyxHQUhEO0FBSUEsU0FBT0MsR0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnZhbGlkYXRlUGx1Z2luT2JqZWN0ID0gdmFsaWRhdGVQbHVnaW5PYmplY3Q7XG5cbnZhciBfb3B0aW9uQXNzZXJ0aW9ucyA9IHJlcXVpcmUoXCIuL29wdGlvbi1hc3NlcnRpb25zXCIpO1xuXG5jb25zdCBWQUxJREFUT1JTID0ge1xuICBuYW1lOiBfb3B0aW9uQXNzZXJ0aW9ucy5hc3NlcnRTdHJpbmcsXG4gIG1hbmlwdWxhdGVPcHRpb25zOiBfb3B0aW9uQXNzZXJ0aW9ucy5hc3NlcnRGdW5jdGlvbixcbiAgcHJlOiBfb3B0aW9uQXNzZXJ0aW9ucy5hc3NlcnRGdW5jdGlvbixcbiAgcG9zdDogX29wdGlvbkFzc2VydGlvbnMuYXNzZXJ0RnVuY3Rpb24sXG4gIGluaGVyaXRzOiBfb3B0aW9uQXNzZXJ0aW9ucy5hc3NlcnRGdW5jdGlvbixcbiAgdmlzaXRvcjogYXNzZXJ0VmlzaXRvck1hcCxcbiAgcGFyc2VyT3ZlcnJpZGU6IF9vcHRpb25Bc3NlcnRpb25zLmFzc2VydEZ1bmN0aW9uLFxuICBnZW5lcmF0b3JPdmVycmlkZTogX29wdGlvbkFzc2VydGlvbnMuYXNzZXJ0RnVuY3Rpb25cbn07XG5cbmZ1bmN0aW9uIGFzc2VydFZpc2l0b3JNYXAoa2V5LCB2YWx1ZSkge1xuICBjb25zdCBvYmogPSAoMCwgX29wdGlvbkFzc2VydGlvbnMuYXNzZXJ0T2JqZWN0KShrZXksIHZhbHVlKTtcblxuICBpZiAob2JqKSB7XG4gICAgT2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKHByb3AgPT4gYXNzZXJ0VmlzaXRvckhhbmRsZXIocHJvcCwgb2JqW3Byb3BdKSk7XG5cbiAgICBpZiAob2JqLmVudGVyIHx8IG9iai5leGl0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYC4ke2tleX0gY2Fubm90IGNvbnRhaW4gY2F0Y2gtYWxsIFwiZW50ZXJcIiBvciBcImV4aXRcIiBoYW5kbGVycy4gUGxlYXNlIHRhcmdldCBpbmRpdmlkdWFsIG5vZGVzLmApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIGFzc2VydFZpc2l0b3JIYW5kbGVyKGtleSwgdmFsdWUpIHtcbiAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIikge1xuICAgIE9iamVjdC5rZXlzKHZhbHVlKS5mb3JFYWNoKGhhbmRsZXIgPT4ge1xuICAgICAgaWYgKGhhbmRsZXIgIT09IFwiZW50ZXJcIiAmJiBoYW5kbGVyICE9PSBcImV4aXRcIikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYC52aXNpdG9yW1wiJHtrZXl9XCJdIG1heSBvbmx5IGhhdmUgLmVudGVyIGFuZC9vciAuZXhpdCBoYW5kbGVycy5gKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikge1xuICAgIHRocm93IG5ldyBFcnJvcihgLnZpc2l0b3JbXCIke2tleX1cIl0gbXVzdCBiZSBhIGZ1bmN0aW9uYCk7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlUGx1Z2luT2JqZWN0KG9iaikge1xuICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goa2V5ID0+IHtcbiAgICBjb25zdCB2YWxpZGF0b3IgPSBWQUxJREFUT1JTW2tleV07XG4gICAgaWYgKHZhbGlkYXRvcikgdmFsaWRhdG9yKGtleSwgb2JqW2tleV0pO2Vsc2UgdGhyb3cgbmV3IEVycm9yKGAuJHtrZXl9IGlzIG5vdCBhIHZhbGlkIFBsdWdpbiBwcm9wZXJ0eWApO1xuICB9KTtcbiAgcmV0dXJuIG9iajtcbn0iXX0=