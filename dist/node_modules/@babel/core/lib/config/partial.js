"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = loadPrivatePartialConfig;
exports.loadPartialConfig = loadPartialConfig;

function _path() {
  const data = _interopRequireDefault(require("path"));

  _path = function () {
    return data;
  };

  return data;
}

var _plugin = _interopRequireDefault(require("./plugin"));

var _util = require("./util");

var _item = require("./item");

var _configChain = require("./config-chain");

var _environment = require("./helpers/environment");

var _options = require("./validation/options");

var _files = require("./files");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function resolveRootMode(rootDir, rootMode) {
  switch (rootMode) {
    case "root":
      return rootDir;

    case "upward-optional":
      {
        const upwardRootDir = (0, _files.findConfigUpwards)(rootDir);
        return upwardRootDir === null ? rootDir : upwardRootDir;
      }

    case "upward":
      {
        const upwardRootDir = (0, _files.findConfigUpwards)(rootDir);
        if (upwardRootDir !== null) return upwardRootDir;
        throw Object.assign(new Error(`Babel was run with rootMode:"upward" but a root could not ` + `be found when searching upward from "${rootDir}"`), {
          code: "BABEL_ROOT_NOT_FOUND",
          dirname: rootDir
        });
      }

    default:
      throw new Error(`Assertion failure - unknown rootMode value`);
  }
}

function loadPrivatePartialConfig(inputOpts) {
  if (inputOpts != null && (typeof inputOpts !== "object" || Array.isArray(inputOpts))) {
    throw new Error("Babel options must be an object, null, or undefined");
  }

  const args = inputOpts ? (0, _options.validate)("arguments", inputOpts) : {};
  const {
    envName = (0, _environment.getEnv)(),
    cwd = ".",
    root: rootDir = ".",
    rootMode = "root",
    caller
  } = args;

  const absoluteCwd = _path().default.resolve(cwd);

  const absoluteRootDir = resolveRootMode(_path().default.resolve(absoluteCwd, rootDir), rootMode);
  const context = {
    filename: typeof args.filename === "string" ? _path().default.resolve(cwd, args.filename) : undefined,
    cwd: absoluteCwd,
    root: absoluteRootDir,
    envName,
    caller
  };
  const configChain = (0, _configChain.buildRootChain)(args, context);
  if (!configChain) return null;
  const options = {};
  configChain.options.forEach(opts => {
    (0, _util.mergeOptions)(options, opts);
  });
  options.babelrc = false;
  options.configFile = false;
  options.passPerPreset = false;
  options.envName = context.envName;
  options.cwd = context.cwd;
  options.root = context.root;
  options.filename = typeof context.filename === "string" ? context.filename : undefined;
  options.plugins = configChain.plugins.map(descriptor => (0, _item.createItemFromDescriptor)(descriptor));
  options.presets = configChain.presets.map(descriptor => (0, _item.createItemFromDescriptor)(descriptor));
  return {
    options,
    context,
    ignore: configChain.ignore,
    babelrc: configChain.babelrc,
    config: configChain.config
  };
}

function loadPartialConfig(inputOpts) {
  const result = loadPrivatePartialConfig(inputOpts);
  if (!result) return null;
  const {
    options,
    babelrc,
    ignore,
    config
  } = result;
  (options.plugins || []).forEach(item => {
    if (item.value instanceof _plugin.default) {
      throw new Error("Passing cached plugin instances is not supported in " + "babel.loadPartialConfig()");
    }
  });
  return new PartialConfig(options, babelrc ? babelrc.filepath : undefined, ignore ? ignore.filepath : undefined, config ? config.filepath : undefined);
}

class PartialConfig {
  constructor(options, babelrc, ignore, config) {
    this.options = options;
    this.babelignore = ignore;
    this.babelrc = babelrc;
    this.config = config;
    Object.freeze(this);
  }

  hasFilesystemConfig() {
    return this.babelrc !== undefined || this.config !== undefined;
  }

}

Object.freeze(PartialConfig.prototype);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvY29yZS9saWIvY29uZmlnL3BhcnRpYWwuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0IiwibG9hZFByaXZhdGVQYXJ0aWFsQ29uZmlnIiwibG9hZFBhcnRpYWxDb25maWciLCJfcGF0aCIsImRhdGEiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wbHVnaW4iLCJfdXRpbCIsIl9pdGVtIiwiX2NvbmZpZ0NoYWluIiwiX2Vudmlyb25tZW50IiwiX29wdGlvbnMiLCJfZmlsZXMiLCJvYmoiLCJfX2VzTW9kdWxlIiwicmVzb2x2ZVJvb3RNb2RlIiwicm9vdERpciIsInJvb3RNb2RlIiwidXB3YXJkUm9vdERpciIsImZpbmRDb25maWdVcHdhcmRzIiwiYXNzaWduIiwiRXJyb3IiLCJjb2RlIiwiZGlybmFtZSIsImlucHV0T3B0cyIsIkFycmF5IiwiaXNBcnJheSIsImFyZ3MiLCJ2YWxpZGF0ZSIsImVudk5hbWUiLCJnZXRFbnYiLCJjd2QiLCJyb290IiwiY2FsbGVyIiwiYWJzb2x1dGVDd2QiLCJyZXNvbHZlIiwiYWJzb2x1dGVSb290RGlyIiwiY29udGV4dCIsImZpbGVuYW1lIiwidW5kZWZpbmVkIiwiY29uZmlnQ2hhaW4iLCJidWlsZFJvb3RDaGFpbiIsIm9wdGlvbnMiLCJmb3JFYWNoIiwib3B0cyIsIm1lcmdlT3B0aW9ucyIsImJhYmVscmMiLCJjb25maWdGaWxlIiwicGFzc1BlclByZXNldCIsInBsdWdpbnMiLCJtYXAiLCJkZXNjcmlwdG9yIiwiY3JlYXRlSXRlbUZyb21EZXNjcmlwdG9yIiwicHJlc2V0cyIsImlnbm9yZSIsImNvbmZpZyIsInJlc3VsdCIsIml0ZW0iLCJQYXJ0aWFsQ29uZmlnIiwiZmlsZXBhdGgiLCJjb25zdHJ1Y3RvciIsImJhYmVsaWdub3JlIiwiZnJlZXplIiwiaGFzRmlsZXN5c3RlbUNvbmZpZyIsInByb3RvdHlwZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLEVBQUFBLEtBQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLE9BQVIsR0FBa0JDLHdCQUFsQjtBQUNBSCxPQUFPLENBQUNJLGlCQUFSLEdBQTRCQSxpQkFBNUI7O0FBRUEsU0FBU0MsS0FBVCxHQUFpQjtBQUNmLFFBQU1DLElBQUksR0FBR0Msc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxNQUFELENBQVIsQ0FBbkM7O0FBRUFILEVBQUFBLEtBQUssR0FBRyxZQUFZO0FBQ2xCLFdBQU9DLElBQVA7QUFDRCxHQUZEOztBQUlBLFNBQU9BLElBQVA7QUFDRDs7QUFFRCxJQUFJRyxPQUFPLEdBQUdGLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsVUFBRCxDQUFSLENBQXBDOztBQUVBLElBQUlFLEtBQUssR0FBR0YsT0FBTyxDQUFDLFFBQUQsQ0FBbkI7O0FBRUEsSUFBSUcsS0FBSyxHQUFHSCxPQUFPLENBQUMsUUFBRCxDQUFuQjs7QUFFQSxJQUFJSSxZQUFZLEdBQUdKLE9BQU8sQ0FBQyxnQkFBRCxDQUExQjs7QUFFQSxJQUFJSyxZQUFZLEdBQUdMLE9BQU8sQ0FBQyx1QkFBRCxDQUExQjs7QUFFQSxJQUFJTSxRQUFRLEdBQUdOLE9BQU8sQ0FBQyxzQkFBRCxDQUF0Qjs7QUFFQSxJQUFJTyxNQUFNLEdBQUdQLE9BQU8sQ0FBQyxTQUFELENBQXBCOztBQUVBLFNBQVNELHNCQUFULENBQWdDUyxHQUFoQyxFQUFxQztBQUFFLFNBQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFYLEdBQXdCRCxHQUF4QixHQUE4QjtBQUFFZCxJQUFBQSxPQUFPLEVBQUVjO0FBQVgsR0FBckM7QUFBd0Q7O0FBRS9GLFNBQVNFLGVBQVQsQ0FBeUJDLE9BQXpCLEVBQWtDQyxRQUFsQyxFQUE0QztBQUMxQyxVQUFRQSxRQUFSO0FBQ0UsU0FBSyxNQUFMO0FBQ0UsYUFBT0QsT0FBUDs7QUFFRixTQUFLLGlCQUFMO0FBQ0U7QUFDRSxjQUFNRSxhQUFhLEdBQUcsQ0FBQyxHQUFHTixNQUFNLENBQUNPLGlCQUFYLEVBQThCSCxPQUE5QixDQUF0QjtBQUNBLGVBQU9FLGFBQWEsS0FBSyxJQUFsQixHQUF5QkYsT0FBekIsR0FBbUNFLGFBQTFDO0FBQ0Q7O0FBRUgsU0FBSyxRQUFMO0FBQ0U7QUFDRSxjQUFNQSxhQUFhLEdBQUcsQ0FBQyxHQUFHTixNQUFNLENBQUNPLGlCQUFYLEVBQThCSCxPQUE5QixDQUF0QjtBQUNBLFlBQUlFLGFBQWEsS0FBSyxJQUF0QixFQUE0QixPQUFPQSxhQUFQO0FBQzVCLGNBQU12QixNQUFNLENBQUN5QixNQUFQLENBQWMsSUFBSUMsS0FBSixDQUFXLDREQUFELEdBQWdFLHdDQUF1Q0wsT0FBUSxHQUF6SCxDQUFkLEVBQTRJO0FBQ2hKTSxVQUFBQSxJQUFJLEVBQUUsc0JBRDBJO0FBRWhKQyxVQUFBQSxPQUFPLEVBQUVQO0FBRnVJLFNBQTVJLENBQU47QUFJRDs7QUFFSDtBQUNFLFlBQU0sSUFBSUssS0FBSixDQUFXLDRDQUFYLENBQU47QUFyQko7QUF1QkQ7O0FBRUQsU0FBU3JCLHdCQUFULENBQWtDd0IsU0FBbEMsRUFBNkM7QUFDM0MsTUFBSUEsU0FBUyxJQUFJLElBQWIsS0FBc0IsT0FBT0EsU0FBUCxLQUFxQixRQUFyQixJQUFpQ0MsS0FBSyxDQUFDQyxPQUFOLENBQWNGLFNBQWQsQ0FBdkQsQ0FBSixFQUFzRjtBQUNwRixVQUFNLElBQUlILEtBQUosQ0FBVSxxREFBVixDQUFOO0FBQ0Q7O0FBRUQsUUFBTU0sSUFBSSxHQUFHSCxTQUFTLEdBQUcsQ0FBQyxHQUFHYixRQUFRLENBQUNpQixRQUFiLEVBQXVCLFdBQXZCLEVBQW9DSixTQUFwQyxDQUFILEdBQW9ELEVBQTFFO0FBQ0EsUUFBTTtBQUNKSyxJQUFBQSxPQUFPLEdBQUcsQ0FBQyxHQUFHbkIsWUFBWSxDQUFDb0IsTUFBakIsR0FETjtBQUVKQyxJQUFBQSxHQUFHLEdBQUcsR0FGRjtBQUdKQyxJQUFBQSxJQUFJLEVBQUVoQixPQUFPLEdBQUcsR0FIWjtBQUlKQyxJQUFBQSxRQUFRLEdBQUcsTUFKUDtBQUtKZ0IsSUFBQUE7QUFMSSxNQU1GTixJQU5KOztBQVFBLFFBQU1PLFdBQVcsR0FBR2hDLEtBQUssR0FBR0gsT0FBUixDQUFnQm9DLE9BQWhCLENBQXdCSixHQUF4QixDQUFwQjs7QUFFQSxRQUFNSyxlQUFlLEdBQUdyQixlQUFlLENBQUNiLEtBQUssR0FBR0gsT0FBUixDQUFnQm9DLE9BQWhCLENBQXdCRCxXQUF4QixFQUFxQ2xCLE9BQXJDLENBQUQsRUFBZ0RDLFFBQWhELENBQXZDO0FBQ0EsUUFBTW9CLE9BQU8sR0FBRztBQUNkQyxJQUFBQSxRQUFRLEVBQUUsT0FBT1gsSUFBSSxDQUFDVyxRQUFaLEtBQXlCLFFBQXpCLEdBQW9DcEMsS0FBSyxHQUFHSCxPQUFSLENBQWdCb0MsT0FBaEIsQ0FBd0JKLEdBQXhCLEVBQTZCSixJQUFJLENBQUNXLFFBQWxDLENBQXBDLEdBQWtGQyxTQUQ5RTtBQUVkUixJQUFBQSxHQUFHLEVBQUVHLFdBRlM7QUFHZEYsSUFBQUEsSUFBSSxFQUFFSSxlQUhRO0FBSWRQLElBQUFBLE9BSmM7QUFLZEksSUFBQUE7QUFMYyxHQUFoQjtBQU9BLFFBQU1PLFdBQVcsR0FBRyxDQUFDLEdBQUcvQixZQUFZLENBQUNnQyxjQUFqQixFQUFpQ2QsSUFBakMsRUFBdUNVLE9BQXZDLENBQXBCO0FBQ0EsTUFBSSxDQUFDRyxXQUFMLEVBQWtCLE9BQU8sSUFBUDtBQUNsQixRQUFNRSxPQUFPLEdBQUcsRUFBaEI7QUFDQUYsRUFBQUEsV0FBVyxDQUFDRSxPQUFaLENBQW9CQyxPQUFwQixDQUE0QkMsSUFBSSxJQUFJO0FBQ2xDLEtBQUMsR0FBR3JDLEtBQUssQ0FBQ3NDLFlBQVYsRUFBd0JILE9BQXhCLEVBQWlDRSxJQUFqQztBQUNELEdBRkQ7QUFHQUYsRUFBQUEsT0FBTyxDQUFDSSxPQUFSLEdBQWtCLEtBQWxCO0FBQ0FKLEVBQUFBLE9BQU8sQ0FBQ0ssVUFBUixHQUFxQixLQUFyQjtBQUNBTCxFQUFBQSxPQUFPLENBQUNNLGFBQVIsR0FBd0IsS0FBeEI7QUFDQU4sRUFBQUEsT0FBTyxDQUFDYixPQUFSLEdBQWtCUSxPQUFPLENBQUNSLE9BQTFCO0FBQ0FhLEVBQUFBLE9BQU8sQ0FBQ1gsR0FBUixHQUFjTSxPQUFPLENBQUNOLEdBQXRCO0FBQ0FXLEVBQUFBLE9BQU8sQ0FBQ1YsSUFBUixHQUFlSyxPQUFPLENBQUNMLElBQXZCO0FBQ0FVLEVBQUFBLE9BQU8sQ0FBQ0osUUFBUixHQUFtQixPQUFPRCxPQUFPLENBQUNDLFFBQWYsS0FBNEIsUUFBNUIsR0FBdUNELE9BQU8sQ0FBQ0MsUUFBL0MsR0FBMERDLFNBQTdFO0FBQ0FHLEVBQUFBLE9BQU8sQ0FBQ08sT0FBUixHQUFrQlQsV0FBVyxDQUFDUyxPQUFaLENBQW9CQyxHQUFwQixDQUF3QkMsVUFBVSxJQUFJLENBQUMsR0FBRzNDLEtBQUssQ0FBQzRDLHdCQUFWLEVBQW9DRCxVQUFwQyxDQUF0QyxDQUFsQjtBQUNBVCxFQUFBQSxPQUFPLENBQUNXLE9BQVIsR0FBa0JiLFdBQVcsQ0FBQ2EsT0FBWixDQUFvQkgsR0FBcEIsQ0FBd0JDLFVBQVUsSUFBSSxDQUFDLEdBQUczQyxLQUFLLENBQUM0Qyx3QkFBVixFQUFvQ0QsVUFBcEMsQ0FBdEMsQ0FBbEI7QUFDQSxTQUFPO0FBQ0xULElBQUFBLE9BREs7QUFFTEwsSUFBQUEsT0FGSztBQUdMaUIsSUFBQUEsTUFBTSxFQUFFZCxXQUFXLENBQUNjLE1BSGY7QUFJTFIsSUFBQUEsT0FBTyxFQUFFTixXQUFXLENBQUNNLE9BSmhCO0FBS0xTLElBQUFBLE1BQU0sRUFBRWYsV0FBVyxDQUFDZTtBQUxmLEdBQVA7QUFPRDs7QUFFRCxTQUFTdEQsaUJBQVQsQ0FBMkJ1QixTQUEzQixFQUFzQztBQUNwQyxRQUFNZ0MsTUFBTSxHQUFHeEQsd0JBQXdCLENBQUN3QixTQUFELENBQXZDO0FBQ0EsTUFBSSxDQUFDZ0MsTUFBTCxFQUFhLE9BQU8sSUFBUDtBQUNiLFFBQU07QUFDSmQsSUFBQUEsT0FESTtBQUVKSSxJQUFBQSxPQUZJO0FBR0pRLElBQUFBLE1BSEk7QUFJSkMsSUFBQUE7QUFKSSxNQUtGQyxNQUxKO0FBTUEsR0FBQ2QsT0FBTyxDQUFDTyxPQUFSLElBQW1CLEVBQXBCLEVBQXdCTixPQUF4QixDQUFnQ2MsSUFBSSxJQUFJO0FBQ3RDLFFBQUlBLElBQUksQ0FBQzNELEtBQUwsWUFBc0JRLE9BQU8sQ0FBQ1AsT0FBbEMsRUFBMkM7QUFDekMsWUFBTSxJQUFJc0IsS0FBSixDQUFVLHlEQUF5RCwyQkFBbkUsQ0FBTjtBQUNEO0FBQ0YsR0FKRDtBQUtBLFNBQU8sSUFBSXFDLGFBQUosQ0FBa0JoQixPQUFsQixFQUEyQkksT0FBTyxHQUFHQSxPQUFPLENBQUNhLFFBQVgsR0FBc0JwQixTQUF4RCxFQUFtRWUsTUFBTSxHQUFHQSxNQUFNLENBQUNLLFFBQVYsR0FBcUJwQixTQUE5RixFQUF5R2dCLE1BQU0sR0FBR0EsTUFBTSxDQUFDSSxRQUFWLEdBQXFCcEIsU0FBcEksQ0FBUDtBQUNEOztBQUVELE1BQU1tQixhQUFOLENBQW9CO0FBQ2xCRSxFQUFBQSxXQUFXLENBQUNsQixPQUFELEVBQVVJLE9BQVYsRUFBbUJRLE1BQW5CLEVBQTJCQyxNQUEzQixFQUFtQztBQUM1QyxTQUFLYixPQUFMLEdBQWVBLE9BQWY7QUFDQSxTQUFLbUIsV0FBTCxHQUFtQlAsTUFBbkI7QUFDQSxTQUFLUixPQUFMLEdBQWVBLE9BQWY7QUFDQSxTQUFLUyxNQUFMLEdBQWNBLE1BQWQ7QUFDQTVELElBQUFBLE1BQU0sQ0FBQ21FLE1BQVAsQ0FBYyxJQUFkO0FBQ0Q7O0FBRURDLEVBQUFBLG1CQUFtQixHQUFHO0FBQ3BCLFdBQU8sS0FBS2pCLE9BQUwsS0FBaUJQLFNBQWpCLElBQThCLEtBQUtnQixNQUFMLEtBQWdCaEIsU0FBckQ7QUFDRDs7QUFYaUI7O0FBZXBCNUMsTUFBTSxDQUFDbUUsTUFBUCxDQUFjSixhQUFhLENBQUNNLFNBQTVCIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBsb2FkUHJpdmF0ZVBhcnRpYWxDb25maWc7XG5leHBvcnRzLmxvYWRQYXJ0aWFsQ29uZmlnID0gbG9hZFBhcnRpYWxDb25maWc7XG5cbmZ1bmN0aW9uIF9wYXRoKCkge1xuICBjb25zdCBkYXRhID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicGF0aFwiKSk7XG5cbiAgX3BhdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbnZhciBfcGx1Z2luID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9wbHVnaW5cIikpO1xuXG52YXIgX3V0aWwgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xuXG52YXIgX2l0ZW0gPSByZXF1aXJlKFwiLi9pdGVtXCIpO1xuXG52YXIgX2NvbmZpZ0NoYWluID0gcmVxdWlyZShcIi4vY29uZmlnLWNoYWluXCIpO1xuXG52YXIgX2Vudmlyb25tZW50ID0gcmVxdWlyZShcIi4vaGVscGVycy9lbnZpcm9ubWVudFwiKTtcblxudmFyIF9vcHRpb25zID0gcmVxdWlyZShcIi4vdmFsaWRhdGlvbi9vcHRpb25zXCIpO1xuXG52YXIgX2ZpbGVzID0gcmVxdWlyZShcIi4vZmlsZXNcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIHJlc29sdmVSb290TW9kZShyb290RGlyLCByb290TW9kZSkge1xuICBzd2l0Y2ggKHJvb3RNb2RlKSB7XG4gICAgY2FzZSBcInJvb3RcIjpcbiAgICAgIHJldHVybiByb290RGlyO1xuXG4gICAgY2FzZSBcInVwd2FyZC1vcHRpb25hbFwiOlxuICAgICAge1xuICAgICAgICBjb25zdCB1cHdhcmRSb290RGlyID0gKDAsIF9maWxlcy5maW5kQ29uZmlnVXB3YXJkcykocm9vdERpcik7XG4gICAgICAgIHJldHVybiB1cHdhcmRSb290RGlyID09PSBudWxsID8gcm9vdERpciA6IHVwd2FyZFJvb3REaXI7XG4gICAgICB9XG5cbiAgICBjYXNlIFwidXB3YXJkXCI6XG4gICAgICB7XG4gICAgICAgIGNvbnN0IHVwd2FyZFJvb3REaXIgPSAoMCwgX2ZpbGVzLmZpbmRDb25maWdVcHdhcmRzKShyb290RGlyKTtcbiAgICAgICAgaWYgKHVwd2FyZFJvb3REaXIgIT09IG51bGwpIHJldHVybiB1cHdhcmRSb290RGlyO1xuICAgICAgICB0aHJvdyBPYmplY3QuYXNzaWduKG5ldyBFcnJvcihgQmFiZWwgd2FzIHJ1biB3aXRoIHJvb3RNb2RlOlwidXB3YXJkXCIgYnV0IGEgcm9vdCBjb3VsZCBub3QgYCArIGBiZSBmb3VuZCB3aGVuIHNlYXJjaGluZyB1cHdhcmQgZnJvbSBcIiR7cm9vdERpcn1cImApLCB7XG4gICAgICAgICAgY29kZTogXCJCQUJFTF9ST09UX05PVF9GT1VORFwiLFxuICAgICAgICAgIGRpcm5hbWU6IHJvb3REaXJcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBBc3NlcnRpb24gZmFpbHVyZSAtIHVua25vd24gcm9vdE1vZGUgdmFsdWVgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBsb2FkUHJpdmF0ZVBhcnRpYWxDb25maWcoaW5wdXRPcHRzKSB7XG4gIGlmIChpbnB1dE9wdHMgIT0gbnVsbCAmJiAodHlwZW9mIGlucHV0T3B0cyAhPT0gXCJvYmplY3RcIiB8fCBBcnJheS5pc0FycmF5KGlucHV0T3B0cykpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQmFiZWwgb3B0aW9ucyBtdXN0IGJlIGFuIG9iamVjdCwgbnVsbCwgb3IgdW5kZWZpbmVkXCIpO1xuICB9XG5cbiAgY29uc3QgYXJncyA9IGlucHV0T3B0cyA/ICgwLCBfb3B0aW9ucy52YWxpZGF0ZSkoXCJhcmd1bWVudHNcIiwgaW5wdXRPcHRzKSA6IHt9O1xuICBjb25zdCB7XG4gICAgZW52TmFtZSA9ICgwLCBfZW52aXJvbm1lbnQuZ2V0RW52KSgpLFxuICAgIGN3ZCA9IFwiLlwiLFxuICAgIHJvb3Q6IHJvb3REaXIgPSBcIi5cIixcbiAgICByb290TW9kZSA9IFwicm9vdFwiLFxuICAgIGNhbGxlclxuICB9ID0gYXJncztcblxuICBjb25zdCBhYnNvbHV0ZUN3ZCA9IF9wYXRoKCkuZGVmYXVsdC5yZXNvbHZlKGN3ZCk7XG5cbiAgY29uc3QgYWJzb2x1dGVSb290RGlyID0gcmVzb2x2ZVJvb3RNb2RlKF9wYXRoKCkuZGVmYXVsdC5yZXNvbHZlKGFic29sdXRlQ3dkLCByb290RGlyKSwgcm9vdE1vZGUpO1xuICBjb25zdCBjb250ZXh0ID0ge1xuICAgIGZpbGVuYW1lOiB0eXBlb2YgYXJncy5maWxlbmFtZSA9PT0gXCJzdHJpbmdcIiA/IF9wYXRoKCkuZGVmYXVsdC5yZXNvbHZlKGN3ZCwgYXJncy5maWxlbmFtZSkgOiB1bmRlZmluZWQsXG4gICAgY3dkOiBhYnNvbHV0ZUN3ZCxcbiAgICByb290OiBhYnNvbHV0ZVJvb3REaXIsXG4gICAgZW52TmFtZSxcbiAgICBjYWxsZXJcbiAgfTtcbiAgY29uc3QgY29uZmlnQ2hhaW4gPSAoMCwgX2NvbmZpZ0NoYWluLmJ1aWxkUm9vdENoYWluKShhcmdzLCBjb250ZXh0KTtcbiAgaWYgKCFjb25maWdDaGFpbikgcmV0dXJuIG51bGw7XG4gIGNvbnN0IG9wdGlvbnMgPSB7fTtcbiAgY29uZmlnQ2hhaW4ub3B0aW9ucy5mb3JFYWNoKG9wdHMgPT4ge1xuICAgICgwLCBfdXRpbC5tZXJnZU9wdGlvbnMpKG9wdGlvbnMsIG9wdHMpO1xuICB9KTtcbiAgb3B0aW9ucy5iYWJlbHJjID0gZmFsc2U7XG4gIG9wdGlvbnMuY29uZmlnRmlsZSA9IGZhbHNlO1xuICBvcHRpb25zLnBhc3NQZXJQcmVzZXQgPSBmYWxzZTtcbiAgb3B0aW9ucy5lbnZOYW1lID0gY29udGV4dC5lbnZOYW1lO1xuICBvcHRpb25zLmN3ZCA9IGNvbnRleHQuY3dkO1xuICBvcHRpb25zLnJvb3QgPSBjb250ZXh0LnJvb3Q7XG4gIG9wdGlvbnMuZmlsZW5hbWUgPSB0eXBlb2YgY29udGV4dC5maWxlbmFtZSA9PT0gXCJzdHJpbmdcIiA/IGNvbnRleHQuZmlsZW5hbWUgOiB1bmRlZmluZWQ7XG4gIG9wdGlvbnMucGx1Z2lucyA9IGNvbmZpZ0NoYWluLnBsdWdpbnMubWFwKGRlc2NyaXB0b3IgPT4gKDAsIF9pdGVtLmNyZWF0ZUl0ZW1Gcm9tRGVzY3JpcHRvcikoZGVzY3JpcHRvcikpO1xuICBvcHRpb25zLnByZXNldHMgPSBjb25maWdDaGFpbi5wcmVzZXRzLm1hcChkZXNjcmlwdG9yID0+ICgwLCBfaXRlbS5jcmVhdGVJdGVtRnJvbURlc2NyaXB0b3IpKGRlc2NyaXB0b3IpKTtcbiAgcmV0dXJuIHtcbiAgICBvcHRpb25zLFxuICAgIGNvbnRleHQsXG4gICAgaWdub3JlOiBjb25maWdDaGFpbi5pZ25vcmUsXG4gICAgYmFiZWxyYzogY29uZmlnQ2hhaW4uYmFiZWxyYyxcbiAgICBjb25maWc6IGNvbmZpZ0NoYWluLmNvbmZpZ1xuICB9O1xufVxuXG5mdW5jdGlvbiBsb2FkUGFydGlhbENvbmZpZyhpbnB1dE9wdHMpIHtcbiAgY29uc3QgcmVzdWx0ID0gbG9hZFByaXZhdGVQYXJ0aWFsQ29uZmlnKGlucHV0T3B0cyk7XG4gIGlmICghcmVzdWx0KSByZXR1cm4gbnVsbDtcbiAgY29uc3Qge1xuICAgIG9wdGlvbnMsXG4gICAgYmFiZWxyYyxcbiAgICBpZ25vcmUsXG4gICAgY29uZmlnXG4gIH0gPSByZXN1bHQ7XG4gIChvcHRpb25zLnBsdWdpbnMgfHwgW10pLmZvckVhY2goaXRlbSA9PiB7XG4gICAgaWYgKGl0ZW0udmFsdWUgaW5zdGFuY2VvZiBfcGx1Z2luLmRlZmF1bHQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlBhc3NpbmcgY2FjaGVkIHBsdWdpbiBpbnN0YW5jZXMgaXMgbm90IHN1cHBvcnRlZCBpbiBcIiArIFwiYmFiZWwubG9hZFBhcnRpYWxDb25maWcoKVwiKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbmV3IFBhcnRpYWxDb25maWcob3B0aW9ucywgYmFiZWxyYyA/IGJhYmVscmMuZmlsZXBhdGggOiB1bmRlZmluZWQsIGlnbm9yZSA/IGlnbm9yZS5maWxlcGF0aCA6IHVuZGVmaW5lZCwgY29uZmlnID8gY29uZmlnLmZpbGVwYXRoIDogdW5kZWZpbmVkKTtcbn1cblxuY2xhc3MgUGFydGlhbENvbmZpZyB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMsIGJhYmVscmMsIGlnbm9yZSwgY29uZmlnKSB7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLmJhYmVsaWdub3JlID0gaWdub3JlO1xuICAgIHRoaXMuYmFiZWxyYyA9IGJhYmVscmM7XG4gICAgdGhpcy5jb25maWcgPSBjb25maWc7XG4gICAgT2JqZWN0LmZyZWV6ZSh0aGlzKTtcbiAgfVxuXG4gIGhhc0ZpbGVzeXN0ZW1Db25maWcoKSB7XG4gICAgcmV0dXJuIHRoaXMuYmFiZWxyYyAhPT0gdW5kZWZpbmVkIHx8IHRoaXMuY29uZmlnICE9PSB1bmRlZmluZWQ7XG4gIH1cblxufVxuXG5PYmplY3QuZnJlZXplKFBhcnRpYWxDb25maWcucHJvdG90eXBlKTsiXX0=