"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = generateCode;

function _convertSourceMap() {
  const data = _interopRequireDefault(require("convert-source-map"));

  _convertSourceMap = function () {
    return data;
  };

  return data;
}

function _generator() {
  const data = _interopRequireDefault(require("@babel/generator"));

  _generator = function () {
    return data;
  };

  return data;
}

var _mergeMap = _interopRequireDefault(require("./merge-map"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function generateCode(pluginPasses, file) {
  const {
    opts,
    ast,
    code,
    inputMap
  } = file;
  const results = [];

  for (const plugins of pluginPasses) {
    for (const plugin of plugins) {
      const {
        generatorOverride
      } = plugin;

      if (generatorOverride) {
        const result = generatorOverride(ast, opts.generatorOpts, code, _generator().default);
        if (result !== undefined) results.push(result);
      }
    }
  }

  let result;

  if (results.length === 0) {
    result = (0, _generator().default)(ast, opts.generatorOpts, code);
  } else if (results.length === 1) {
    result = results[0];

    if (typeof result.then === "function") {
      throw new Error(`You appear to be using an async parser plugin, ` + `which your current version of Babel does not support. ` + `If you're using a published plugin, ` + `you may need to upgrade your @babel/core version.`);
    }
  } else {
    throw new Error("More than one plugin attempted to override codegen.");
  }

  let {
    code: outputCode,
    map: outputMap
  } = result;

  if (outputMap && inputMap) {
    outputMap = (0, _mergeMap.default)(inputMap.toObject(), outputMap);
  }

  if (opts.sourceMaps === "inline" || opts.sourceMaps === "both") {
    outputCode += "\n" + _convertSourceMap().default.fromObject(outputMap).toComment();
  }

  if (opts.sourceMaps === "inline") {
    outputMap = null;
  }

  return {
    outputCode,
    outputMap
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvY29yZS9saWIvdHJhbnNmb3JtYXRpb24vZmlsZS9nZW5lcmF0ZS5qcyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJnZW5lcmF0ZUNvZGUiLCJfY29udmVydFNvdXJjZU1hcCIsImRhdGEiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9nZW5lcmF0b3IiLCJfbWVyZ2VNYXAiLCJvYmoiLCJfX2VzTW9kdWxlIiwicGx1Z2luUGFzc2VzIiwiZmlsZSIsIm9wdHMiLCJhc3QiLCJjb2RlIiwiaW5wdXRNYXAiLCJyZXN1bHRzIiwicGx1Z2lucyIsInBsdWdpbiIsImdlbmVyYXRvck92ZXJyaWRlIiwicmVzdWx0IiwiZ2VuZXJhdG9yT3B0cyIsInVuZGVmaW5lZCIsInB1c2giLCJsZW5ndGgiLCJ0aGVuIiwiRXJyb3IiLCJvdXRwdXRDb2RlIiwibWFwIiwib3V0cHV0TWFwIiwidG9PYmplY3QiLCJzb3VyY2VNYXBzIiwiZnJvbU9iamVjdCIsInRvQ29tbWVudCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLEVBQUFBLEtBQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLE9BQVIsR0FBa0JDLFlBQWxCOztBQUVBLFNBQVNDLGlCQUFULEdBQTZCO0FBQzNCLFFBQU1DLElBQUksR0FBR0Msc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxvQkFBRCxDQUFSLENBQW5DOztBQUVBSCxFQUFBQSxpQkFBaUIsR0FBRyxZQUFZO0FBQzlCLFdBQU9DLElBQVA7QUFDRCxHQUZEOztBQUlBLFNBQU9BLElBQVA7QUFDRDs7QUFFRCxTQUFTRyxVQUFULEdBQXNCO0FBQ3BCLFFBQU1ILElBQUksR0FBR0Msc0JB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RCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZ2VuZXJhdGVDb2RlO1xuXG5mdW5jdGlvbiBfY29udmVydFNvdXJjZU1hcCgpIHtcbiAgY29uc3QgZGF0YSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNvbnZlcnQtc291cmNlLW1hcFwiKSk7XG5cbiAgX2NvbnZlcnRTb3VyY2VNYXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIF9nZW5lcmF0b3IoKSB7XG4gIGNvbnN0IGRhdGEgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJAYmFiZWwvZ2VuZXJhdG9yXCIpKTtcblxuICBfZ2VuZXJhdG9yID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkYXRhO1xuICB9O1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG52YXIgX21lcmdlTWFwID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9tZXJnZS1tYXBcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUNvZGUocGx1Z2luUGFzc2VzLCBmaWxlKSB7XG4gIGNvbnN0IHtcbiAgICBvcHRzLFxuICAgIGFzdCxcbiAgICBjb2RlLFxuICAgIGlucHV0TWFwXG4gIH0gPSBmaWxlO1xuICBjb25zdCByZXN1bHRzID0gW107XG5cbiAgZm9yIChjb25zdCBwbHVnaW5zIG9mIHBsdWdpblBhc3Nlcykge1xuICAgIGZvciAoY29uc3QgcGx1Z2luIG9mIHBsdWdpbnMpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgZ2VuZXJhdG9yT3ZlcnJpZGVcbiAgICAgIH0gPSBwbHVnaW47XG5cbiAgICAgIGlmIChnZW5lcmF0b3JPdmVycmlkZSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBnZW5lcmF0b3JPdmVycmlkZShhc3QsIG9wdHMuZ2VuZXJhdG9yT3B0cywgY29kZSwgX2dlbmVyYXRvcigpLmRlZmF1bHQpO1xuICAgICAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHJlc3VsdHMucHVzaChyZXN1bHQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGxldCByZXN1bHQ7XG5cbiAgaWYgKHJlc3VsdHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmVzdWx0ID0gKDAsIF9nZW5lcmF0b3IoKS5kZWZhdWx0KShhc3QsIG9wdHMuZ2VuZXJhdG9yT3B0cywgY29kZSk7XG4gIH0gZWxzZSBpZiAocmVzdWx0cy5sZW5ndGggPT09IDEpIHtcbiAgICByZXN1bHQgPSByZXN1bHRzWzBdO1xuXG4gICAgaWYgKHR5cGVvZiByZXN1bHQudGhlbiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFlvdSBhcHBlYXIgdG8gYmUgdXNpbmcgYW4gYXN5bmMgcGFyc2VyIHBsdWdpbiwgYCArIGB3aGljaCB5b3VyIGN1cnJlbnQgdmVyc2lvbiBvZiBCYWJlbCBkb2VzIG5vdCBzdXBwb3J0LiBgICsgYElmIHlvdSdyZSB1c2luZyBhIHB1Ymxpc2hlZCBwbHVnaW4sIGAgKyBgeW91IG1heSBuZWVkIHRvIHVwZ3JhZGUgeW91ciBAYmFiZWwvY29yZSB2ZXJzaW9uLmApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJNb3JlIHRoYW4gb25lIHBsdWdpbiBhdHRlbXB0ZWQgdG8gb3ZlcnJpZGUgY29kZWdlbi5cIik7XG4gIH1cblxuICBsZXQge1xuICAgIGNvZGU6IG91dHB1dENvZGUsXG4gICAgbWFwOiBvdXRwdXRNYXBcbiAgfSA9IHJlc3VsdDtcblxuICBpZiAob3V0cHV0TWFwICYmIGlucHV0TWFwKSB7XG4gICAgb3V0cHV0TWFwID0gKDAsIF9tZXJnZU1hcC5kZWZhdWx0KShpbnB1dE1hcC50b09iamVjdCgpLCBvdXRwdXRNYXApO1xuICB9XG5cbiAgaWYgKG9wdHMuc291cmNlTWFwcyA9PT0gXCJpbmxpbmVcIiB8fCBvcHRzLnNvdXJjZU1hcHMgPT09IFwiYm90aFwiKSB7XG4gICAgb3V0cHV0Q29kZSArPSBcIlxcblwiICsgX2NvbnZlcnRTb3VyY2VNYXAoKS5kZWZhdWx0LmZyb21PYmplY3Qob3V0cHV0TWFwKS50b0NvbW1lbnQoKTtcbiAgfVxuXG4gIGlmIChvcHRzLnNvdXJjZU1hcHMgPT09IFwiaW5saW5lXCIpIHtcbiAgICBvdXRwdXRNYXAgPSBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBvdXRwdXRDb2RlLFxuICAgIG91dHB1dE1hcFxuICB9O1xufSJdfQ==