"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = normalizeOptions;

function _path() {
  const data = _interopRequireDefault(require("path"));

  _path = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function normalizeOptions(config) {
  const {
    filename,
    cwd,
    filenameRelative = typeof filename === "string" ? _path().default.relative(cwd, filename) : "unknown",
    sourceType = "module",
    inputSourceMap,
    sourceMaps = !!inputSourceMap,
    moduleRoot,
    sourceRoot = moduleRoot,
    sourceFileName = _path().default.basename(filenameRelative),
    comments = true,
    compact = "auto"
  } = config.options;
  const opts = config.options;
  const options = Object.assign({}, opts, {
    parserOpts: Object.assign({
      sourceType: _path().default.extname(filenameRelative) === ".mjs" ? "module" : sourceType,
      sourceFileName: filename,
      plugins: []
    }, opts.parserOpts),
    generatorOpts: Object.assign({
      filename,
      auxiliaryCommentBefore: opts.auxiliaryCommentBefore,
      auxiliaryCommentAfter: opts.auxiliaryCommentAfter,
      retainLines: opts.retainLines,
      comments,
      shouldPrintComment: opts.shouldPrintComment,
      compact,
      minified: opts.minified,
      sourceMaps,
      sourceRoot,
      sourceFileName
    }, opts.generatorOpts)
  });

  for (const plugins of config.passes) {
    for (const plugin of plugins) {
      if (plugin.manipulateOptions) {
        plugin.manipulateOptions(options, options.parserOpts);
      }
    }
  }

  return options;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvY29yZS9saWIvdHJhbnNmb3JtYXRpb24vbm9ybWFsaXplLW9wdHMuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0Iiwibm9ybWFsaXplT3B0aW9ucyIsIl9wYXRoIiwiZGF0YSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwib2JqIiwiX19lc01vZHVsZSIsImNvbmZpZyIsImZpbGVuYW1lIiwiY3dkIiwiZmlsZW5hbWVSZWxhdGl2ZSIsInJlbGF0aXZlIiwic291cmNlVHlwZSIsImlucHV0U291cmNlTWFwIiwic291cmNlTWFwcyIsIm1vZHVsZVJvb3QiLCJzb3VyY2VSb290Iiwic291cmNlRmlsZU5hbWUiLCJiYXNlbmFtZSIsImNvbW1lbnRzIiwiY29tcGFjdCIsIm9wdGlvbnMiLCJvcHRzIiwiYXNzaWduIiwicGFyc2VyT3B0cyIsImV4dG5hbWUiLCJwbHVnaW5zIiwiZ2VuZXJhdG9yT3B0cyIsImF1eGlsaWFyeUNvbW1lbnRCZWZvcmUiLCJhdXhpbGlhcnlDb21tZW50QWZ0ZXIiLCJyZXRhaW5MaW5lcyIsInNob3VsZFByaW50Q29tbWVudCIsIm1pbmlmaWVkIiwicGFzc2VzIiwicGx1Z2luIiwibWFuaXB1bGF0ZU9wdGlvbnMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzNDQyxFQUFBQSxLQUFLLEVBQUU7QUFEb0MsQ0FBN0M7QUFHQUQsT0FBTyxDQUFDRSxPQUFSLEdBQWtCQyxnQkFBbEI7O0FBRUEsU0FBU0MsS0FBVCxHQUFpQjtBQUNmLFFBQU1DLElBQUksR0FBR0Msc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxNQUFELENBQVIsQ0FBbkM7O0FBRUFILEVBQUFBLEtBQUssR0FBRyxZQUFZO0FBQ2xCLFdBQU9DLElBQVA7QUFDRCxHQUZEOztBQUlBLFNBQU9BLElBQVA7QUFDRDs7QUFFRCxTQUFTQyxzQkFBVCxDQUFnQ0UsR0FBaEMsRUFBcUM7QUFBRSxTQUFPQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsVUFBWCxHQUF3QkQsR0FBeEIsR0FBOEI7QUFBRU4sSUFBQUEsT0FBTyxFQUFFTTtBQUFYLEdBQXJDO0FBQXdEOztBQUUvRixTQUFTTCxnQkFBVCxDQUEwQk8sTUFBMUIsRUFBa0M7QUFDaEMsUUFBTTtBQUNKQyxJQUFBQSxRQURJO0FBRUpDLElBQUFBLEdBRkk7QUFHSkMsSUFBQUEsZ0JBQWdCLEdBQUcsT0FBT0YsUUFBUCxLQUFvQixRQUFwQixHQUErQlAsS0FBSyxHQUFHRixPQUFSLENBQWdCWSxRQUFoQixDQUF5QkYsR0FBekIsRUFBOEJELFFBQTlCLENBQS9CLEdBQXlFLFNBSHhGO0FBSUpJLElBQUFBLFVBQVUsR0FBRyxRQUpUO0FBS0pDLElBQUFBLGNBTEk7QUFNSkMsSUFBQUEsVUFBVSxHQUFHLENBQUMsQ0FBQ0QsY0FOWDtBQU9KRSxJQUFBQSxVQVBJO0FBUUpDLElBQUFBLFVBQVUsR0FBR0QsVUFSVDtBQVNKRSxJQUFBQSxjQUFjLEdBQUdoQixLQUFLLEdBQUdGLE9BQVIsQ0FBZ0JtQixRQUFoQixDQUF5QlIsZ0JBQXpCLENBVGI7QUFVSlMsSUFBQUEsUUFBUSxHQUFHLElBVlA7QUFXSkMsSUFBQUEsT0FBTyxHQUFHO0FBWE4sTUFZRmIsTUFBTSxDQUFDYyxPQVpYO0FBYUEsUUFBTUMsSUFBSSxHQUFHZixNQUFNLENBQUNjLE9BQXBCO0FBQ0EsUUFBTUEsT0FBTyxHQUFHMUIsTUFBTSxDQUFDNEIsTUFBUCxDQUFjLEVBQWQsRUFBa0JELElBQWxCLEVBQXdCO0FBQ3RDRSxJQUFBQSxVQUFVLEVBQUU3QixNQUFNLENBQUM0QixNQUFQLENBQWM7QUFDeEJYLE1BQUFBLFVBQVUsRUFBRVgsS0FBSyxHQUFHRixPQUFSLENBQWdCMEIsT0FBaEIsQ0FBd0JmLGdCQUF4QixNQUE4QyxNQUE5QyxHQUF1RCxRQUF2RCxHQUFrRUUsVUFEdEQ7QUFFeEJLLE1BQUFBLGNBQWMsRUFBRVQsUUFGUTtBQUd4QmtCLE1BQUFBLE9BQU8sRUFBRTtBQUhlLEtBQWQsRUFJVEosSUFBSSxDQUFDRSxVQUpJLENBRDBCO0FBTXRDRyxJQUFBQSxhQUFhLEVBQUVoQyxNQUFNLENBQUM0QixNQUFQLENBQWM7QUFDM0JmLE1BQUFBLFFBRDJCO0FBRTNCb0IsTUFBQUEsc0JBQXNCLEVBQUVOLElBQUksQ0FBQ00sc0JBRkY7QUFHM0JDLE1BQUFBLHFCQUFxQixFQUFFUCxJQUFJLENBQUNPLHFCQUhEO0FBSTNCQyxNQUFBQSxXQUFXLEVBQUVSLElBQUksQ0FBQ1EsV0FKUztBQUszQlgsTUFBQUEsUUFMMkI7QUFNM0JZLE1BQUFBLGtCQUFrQixFQUFFVCxJQUFJLENBQUNTLGtCQU5FO0FBTzNCWCxNQUFBQSxPQVAyQjtBQVEzQlksTUFBQUEsUUFBUSxFQUFFVixJQUFJLENBQUNVLFFBUlk7QUFTM0JsQixNQUFBQSxVQVQyQjtBQVUzQkUsTUFBQUEsVUFWMkI7QUFXM0JDLE1BQUFBO0FBWDJCLEtBQWQsRUFZWkssSUFBSSxDQUFDSyxhQVpPO0FBTnVCLEdBQXhCLENBQWhCOztBQXFCQSxPQUFLLE1BQU1ELE9BQVgsSUFBc0JuQixNQUFNLENBQUMwQixNQUE3QixFQUFxQztBQUNuQyxTQUFLLE1BQU1DLE1BQVgsSUFBcUJSLE9BQXJCLEVBQThCO0FBQzVCLFVBQUlRLE1BQU0sQ0FBQ0MsaUJBQVgsRUFBOEI7QUFDNUJELFFBQUFBLE1BQU0sQ0FBQ0MsaUJBQVAsQ0FBeUJkLE9BQXpCLEVBQWtDQSxPQUFPLENBQUNHLFVBQTFDO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFNBQU9ILE9BQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gbm9ybWFsaXplT3B0aW9ucztcblxuZnVuY3Rpb24gX3BhdGgoKSB7XG4gIGNvbnN0IGRhdGEgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwYXRoXCIpKTtcblxuICBfcGF0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gbm9ybWFsaXplT3B0aW9ucyhjb25maWcpIHtcbiAgY29uc3Qge1xuICAgIGZpbGVuYW1lLFxuICAgIGN3ZCxcbiAgICBmaWxlbmFtZVJlbGF0aXZlID0gdHlwZW9mIGZpbGVuYW1lID09PSBcInN0cmluZ1wiID8gX3BhdGgoKS5kZWZhdWx0LnJlbGF0aXZlKGN3ZCwgZmlsZW5hbWUpIDogXCJ1bmtub3duXCIsXG4gICAgc291cmNlVHlwZSA9IFwibW9kdWxlXCIsXG4gICAgaW5wdXRTb3VyY2VNYXAsXG4gICAgc291cmNlTWFwcyA9ICEhaW5wdXRTb3VyY2VNYXAsXG4gICAgbW9kdWxlUm9vdCxcbiAgICBzb3VyY2VSb290ID0gbW9kdWxlUm9vdCxcbiAgICBzb3VyY2VGaWxlTmFtZSA9IF9wYXRoKCkuZGVmYXVsdC5iYXNlbmFtZShmaWxlbmFtZVJlbGF0aXZlKSxcbiAgICBjb21tZW50cyA9IHRydWUsXG4gICAgY29tcGFjdCA9IFwiYXV0b1wiXG4gIH0gPSBjb25maWcub3B0aW9ucztcbiAgY29uc3Qgb3B0cyA9IGNvbmZpZy5vcHRpb25zO1xuICBjb25zdCBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0cywge1xuICAgIHBhcnNlck9wdHM6IE9iamVjdC5hc3NpZ24oe1xuICAgICAgc291cmNlVHlwZTogX3BhdGgoKS5kZWZhdWx0LmV4dG5hbWUoZmlsZW5hbWVSZWxhdGl2ZSkgPT09IFwiLm1qc1wiID8gXCJtb2R1bGVcIiA6IHNvdXJjZVR5cGUsXG4gICAgICBzb3VyY2VGaWxlTmFtZTogZmlsZW5hbWUsXG4gICAgICBwbHVnaW5zOiBbXVxuICAgIH0sIG9wdHMucGFyc2VyT3B0cyksXG4gICAgZ2VuZXJhdG9yT3B0czogT2JqZWN0LmFzc2lnbih7XG4gICAgICBmaWxlbmFtZSxcbiAgICAgIGF1eGlsaWFyeUNvbW1lbnRCZWZvcmU6IG9wdHMuYXV4aWxpYXJ5Q29tbWVudEJlZm9yZSxcbiAgICAgIGF1eGlsaWFyeUNvbW1lbnRBZnRlcjogb3B0cy5hdXhpbGlhcnlDb21tZW50QWZ0ZXIsXG4gICAgICByZXRhaW5MaW5lczogb3B0cy5yZXRhaW5MaW5lcyxcbiAgICAgIGNvbW1lbnRzLFxuICAgICAgc2hvdWxkUHJpbnRDb21tZW50OiBvcHRzLnNob3VsZFByaW50Q29tbWVudCxcbiAgICAgIGNvbXBhY3QsXG4gICAgICBtaW5pZmllZDogb3B0cy5taW5pZmllZCxcbiAgICAgIHNvdXJjZU1hcHMsXG4gICAgICBzb3VyY2VSb290LFxuICAgICAgc291cmNlRmlsZU5hbWVcbiAgICB9LCBvcHRzLmdlbmVyYXRvck9wdHMpXG4gIH0pO1xuXG4gIGZvciAoY29uc3QgcGx1Z2lucyBvZiBjb25maWcucGFzc2VzKSB7XG4gICAgZm9yIChjb25zdCBwbHVnaW4gb2YgcGx1Z2lucykge1xuICAgICAgaWYgKHBsdWdpbi5tYW5pcHVsYXRlT3B0aW9ucykge1xuICAgICAgICBwbHVnaW4ubWFuaXB1bGF0ZU9wdGlvbnMob3B0aW9ucywgb3B0aW9ucy5wYXJzZXJPcHRzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gb3B0aW9ucztcbn0iXX0=