"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseSync = parseSync;
exports.parseAsync = parseAsync;
exports.parse = void 0;

var _config = _interopRequireDefault(require("./config"));

var _normalizeFile = _interopRequireDefault(require("./transformation/normalize-file"));

var _normalizeOpts = _interopRequireDefault(require("./transformation/normalize-opts"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

const parse = function parse(code, opts, callback) {
  if (typeof opts === "function") {
    callback = opts;
    opts = undefined;
  }

  if (callback === undefined) return parseSync(code, opts);
  const config = (0, _config.default)(opts);

  if (config === null) {
    return null;
  }

  const cb = callback;
  process.nextTick(() => {
    let ast = null;

    try {
      const cfg = (0, _config.default)(opts);
      if (cfg === null) return cb(null, null);
      ast = (0, _normalizeFile.default)(cfg.passes, (0, _normalizeOpts.default)(cfg), code).ast;
    } catch (err) {
      return cb(err);
    }

    cb(null, ast);
  });
};

exports.parse = parse;

function parseSync(code, opts) {
  const config = (0, _config.default)(opts);

  if (config === null) {
    return null;
  }

  return (0, _normalizeFile.default)(config.passes, (0, _normalizeOpts.default)(config), code).ast;
}

function parseAsync(code, opts) {
  return new Promise((res, rej) => {
    parse(code, opts, (err, result) => {
      if (err == null) res(result);else rej(err);
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvY29yZS9saWIvcGFyc2UuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJwYXJzZVN5bmMiLCJwYXJzZUFzeW5jIiwicGFyc2UiLCJfY29uZmlnIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfbm9ybWFsaXplRmlsZSIsIl9ub3JtYWxpemVPcHRzIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJjb2RlIiwib3B0cyIsImNhbGxiYWNrIiwidW5kZWZpbmVkIiwiY29uZmlnIiwiY2IiLCJwcm9jZXNzIiwibmV4dFRpY2siLCJhc3QiLCJjZmciLCJwYXNzZXMiLCJlcnIiLCJQcm9taXNlIiwicmVzIiwicmVqIiwicmVzdWx0Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsRUFBQUEsS0FBSyxFQUFFO0FBRG9DLENBQTdDO0FBR0FELE9BQU8sQ0FBQ0UsU0FBUixHQUFvQkEsU0FBcEI7QUFDQUYsT0FBTyxDQUFDRyxVQUFSLEdBQXFCQSxVQUFyQjtBQUNBSCxPQUFPLENBQUNJLEtBQVIsR0FBZ0IsS0FBSyxDQUFyQjs7QUFFQSxJQUFJQyxPQUFPLEdBQUdDLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsVUFBRCxDQUFSLENBQXBDOztBQUVBLElBQUlDLGNBQWMsR0FBR0Ysc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxpQ0FBRCxDQUFSLENBQTNDOztBQUVBLElBQUlFLGNBQWMsR0FBR0gsc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxpQ0FBRCxDQUFSLENBQTNDOztBQUVBLFNBQVNELHNCQUFULENBQWdDSSxHQUFoQyxFQUFxQztBQUFFLFNBQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFYLEdBQXdCRCxHQUF4QixHQUE4QjtBQUFFRSxJQUFBQSxPQUFPLEVBQUVGO0FBQVgsR0FBckM7QUFBd0Q7O0FBRS9GLE1BQU1OLEtBQUssR0FBRyxTQUFTQSxLQUFULENBQWVTLElBQWYsRUFBcUJDLElBQXJCLEVBQTJCQyxRQUEzQixFQUFxQztBQUNqRCxNQUFJLE9BQU9ELElBQVAsS0FBZ0IsVUFBcEIsRUFBZ0M7QUFDOUJDLElBQUFBLFFBQVEsR0FBR0QsSUFBWDtBQUNBQSxJQUFBQSxJQUFJLEdBQUdFLFNBQVA7QUFDRDs7QUFFRCxNQUFJRCxRQUFRLEtBQUtDLFNBQWpCLEVBQTRCLE9BQU9kLFNBQVMsQ0FBQ1csSUFBRCxFQUFPQyxJQUFQLENBQWhCO0FBQzVCLFFBQU1HLE1BQU0sR0FBRyxDQUFDLEdBQUdaLE9BQU8sQ0FBQ08sT0FBWixFQUFxQkUsSUFBckIsQ0FBZjs7QUFFQSxNQUFJRyxNQUFNLEtBQUssSUFBZixFQUFxQjtBQUNuQixXQUFPLElBQVA7QUFDRDs7QUFFRCxRQUFNQyxFQUFFLEdBQUdILFFBQVg7QUFDQUksRUFBQUEsT0FBTyxDQUFDQyxRQUFSLENBQWlCLE1BQU07QUFDckIsUUFBSUMsR0FBRyxHQUFHLElBQVY7O0FBRUEsUUFBSTtBQUNGLFlBQU1DLEdBQUcsR0FBRyxDQUFDLEdBQUdqQixPQUFPLENBQUNPLE9BQVosRUFBcUJFLElBQXJCLENBQVo7QUFDQSxVQUFJUSxHQUFHLEtBQUssSUFBWixFQUFrQixPQUFPSixFQUFFLENBQUMsSUFBRCxFQUFPLElBQVAsQ0FBVDtBQUNsQkcsTUFBQUEsR0FBRyxHQUFHLENBQUMsR0FBR2IsY0FBYyxDQUFDSSxPQUFuQixFQUE0QlUsR0FBRyxDQUFDQyxNQUFoQyxFQUF3QyxDQUFDLEdBQUdkLGNBQWMsQ0FBQ0csT0FBbkIsRUFBNEJVLEdBQTVCLENBQXhDLEVBQTBFVCxJQUExRSxFQUFnRlEsR0FBdEY7QUFDRCxLQUpELENBSUUsT0FBT0csR0FBUCxFQUFZO0FBQ1osYUFBT04sRUFBRSxDQUFDTSxHQUFELENBQVQ7QUFDRDs7QUFFRE4sSUFBQUEsRUFBRSxDQUFDLElBQUQsRUFBT0csR0FBUCxDQUFGO0FBQ0QsR0FaRDtBQWFELENBM0JEOztBQTZCQXJCLE9BQU8sQ0FBQ0ksS0FBUixHQUFnQkEsS0FBaEI7O0FBRUEsU0FBU0YsU0FBVCxDQUFtQlcsSUFBbkIsRUFBeUJDLElBQXpCLEVBQStCO0FBQzdCLFFBQU1HLE1BQU0sR0FBRyxDQUFDLEdBQUdaLE9BQU8sQ0FBQ08sT0FBWixFQUFxQkUsSUFBckIsQ0FBZjs7QUFFQSxNQUFJRyxNQUFNLEtBQUssSUFBZixFQUFxQjtBQUNuQixXQUFPLElBQVA7QUFDRDs7QUFFRCxTQUFPLENBQUMsR0FBR1QsY0FBYyxDQUFDSSxPQUFuQixFQUE0QkssTUFBTSxDQUFDTSxNQUFuQyxFQUEyQyxDQUFDLEdBQUdkLGNBQWMsQ0FBQ0csT0FBbkIsRUFBNEJLLE1BQTVCLENBQTNDLEVBQWdGSixJQUFoRixFQUFzRlEsR0FBN0Y7QUFDRDs7QUFFRCxTQUFTbEIsVUFBVCxDQUFvQlUsSUFBcEIsRUFBMEJDLElBQTFCLEVBQWdDO0FBQzlCLFNBQU8sSUFBSVcsT0FBSixDQUFZLENBQUNDLEdBQUQsRUFBTUMsR0FBTixLQUFjO0FBQy9CdkIsSUFBQUEsS0FBSyxDQUFDUyxJQUFELEVBQU9DLElBQVAsRUFBYSxDQUFDVSxHQUFELEVBQU1JLE1BQU4sS0FBaUI7QUFDakMsVUFBSUosR0FBRyxJQUFJLElBQVgsRUFBaUJFLEdBQUcsQ0FBQ0UsTUFBRCxDQUFILENBQWpCLEtBQWtDRCxHQUFHLENBQUNILEdBQUQsQ0FBSDtBQUNuQyxLQUZJLENBQUw7QUFHRCxHQUpNLENBQVA7QUFLRCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5wYXJzZVN5bmMgPSBwYXJzZVN5bmM7XG5leHBvcnRzLnBhcnNlQXN5bmMgPSBwYXJzZUFzeW5jO1xuZXhwb3J0cy5wYXJzZSA9IHZvaWQgMDtcblxudmFyIF9jb25maWcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NvbmZpZ1wiKSk7XG5cbnZhciBfbm9ybWFsaXplRmlsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdHJhbnNmb3JtYXRpb24vbm9ybWFsaXplLWZpbGVcIikpO1xuXG52YXIgX25vcm1hbGl6ZU9wdHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3RyYW5zZm9ybWF0aW9uL25vcm1hbGl6ZS1vcHRzXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuY29uc3QgcGFyc2UgPSBmdW5jdGlvbiBwYXJzZShjb2RlLCBvcHRzLCBjYWxsYmFjaykge1xuICBpZiAodHlwZW9mIG9wdHMgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGNhbGxiYWNrID0gb3B0cztcbiAgICBvcHRzID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgaWYgKGNhbGxiYWNrID09PSB1bmRlZmluZWQpIHJldHVybiBwYXJzZVN5bmMoY29kZSwgb3B0cyk7XG4gIGNvbnN0IGNvbmZpZyA9ICgwLCBfY29uZmlnLmRlZmF1bHQpKG9wdHMpO1xuXG4gIGlmIChjb25maWcgPT09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0IGNiID0gY2FsbGJhY2s7XG4gIHByb2Nlc3MubmV4dFRpY2soKCkgPT4ge1xuICAgIGxldCBhc3QgPSBudWxsO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGNmZyA9ICgwLCBfY29uZmlnLmRlZmF1bHQpKG9wdHMpO1xuICAgICAgaWYgKGNmZyA9PT0gbnVsbCkgcmV0dXJuIGNiKG51bGwsIG51bGwpO1xuICAgICAgYXN0ID0gKDAsIF9ub3JtYWxpemVGaWxlLmRlZmF1bHQpKGNmZy5wYXNzZXMsICgwLCBfbm9ybWFsaXplT3B0cy5kZWZhdWx0KShjZmcpLCBjb2RlKS5hc3Q7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4gY2IoZXJyKTtcbiAgICB9XG5cbiAgICBjYihudWxsLCBhc3QpO1xuICB9KTtcbn07XG5cbmV4cG9ydHMucGFyc2UgPSBwYXJzZTtcblxuZnVuY3Rpb24gcGFyc2VTeW5jKGNvZGUsIG9wdHMpIHtcbiAgY29uc3QgY29uZmlnID0gKDAsIF9jb25maWcuZGVmYXVsdCkob3B0cyk7XG5cbiAgaWYgKGNvbmZpZyA9PT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuICgwLCBfbm9ybWFsaXplRmlsZS5kZWZhdWx0KShjb25maWcucGFzc2VzLCAoMCwgX25vcm1hbGl6ZU9wdHMuZGVmYXVsdCkoY29uZmlnKSwgY29kZSkuYXN0O1xufVxuXG5mdW5jdGlvbiBwYXJzZUFzeW5jKGNvZGUsIG9wdHMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXMsIHJlaikgPT4ge1xuICAgIHBhcnNlKGNvZGUsIG9wdHMsIChlcnIsIHJlc3VsdCkgPT4ge1xuICAgICAgaWYgKGVyciA9PSBudWxsKSByZXMocmVzdWx0KTtlbHNlIHJlaihlcnIpO1xuICAgIH0pO1xuICB9KTtcbn0iXX0=