"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.declare = declare;

function declare(builder) {
  return (api, options, dirname) => {
    if (!api.assertVersion) {
      api = Object.assign(copyApiObject(api), {
        assertVersion(range) {
          throwVersionError(range, api.version);
        }

      });
    }

    return builder(api, options || {}, dirname);
  };
}

function copyApiObject(api) {
  let proto = null;

  if (typeof api.version === "string" && /^7\./.test(api.version)) {
    proto = Object.getPrototypeOf(api);

    if (proto && (!has(proto, "version") || !has(proto, "transform") || !has(proto, "template") || !has(proto, "types"))) {
      proto = null;
    }
  }

  return Object.assign({}, proto, api);
}

function has(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}

function throwVersionError(range, version) {
  if (typeof range === "number") {
    if (!Number.isInteger(range)) {
      throw new Error("Expected string or integer value.");
    }

    range = `^${range}.0.0-0`;
  }

  if (typeof range !== "string") {
    throw new Error("Expected string or integer value.");
  }

  const limit = Error.stackTraceLimit;

  if (typeof limit === "number" && limit < 25) {
    Error.stackTraceLimit = 25;
  }

  let err;

  if (version.slice(0, 2) === "7.") {
    err = new Error(`Requires Babel "^7.0.0-beta.41", but was loaded with "${version}". ` + `You'll need to update your @babel/core version.`);
  } else {
    err = new Error(`Requires Babel "${range}", but was loaded with "${version}". ` + `If you are sure you have a compatible version of @babel/core, ` + `it is likely that something in your build process is loading the ` + `wrong version. Inspect the stack trace of this error to look for ` + `the first entry that doesn't mention "@babel/core" or "babel-core" ` + `to see what is calling Babel.`);
  }

  if (typeof limit === "number") {
    Error.stackTraceLimit = limit;
  }

  throw Object.assign(err, {
    code: "BABEL_VERSION_UNSUPPORTED",
    version,
    range
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvaGVscGVyLXBsdWdpbi11dGlscy9saWIvaW5kZXguanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWNsYXJlIiwiYnVpbGRlciIsImFwaSIsIm9wdGlvbnMiLCJkaXJuYW1lIiwiYXNzZXJ0VmVyc2lvbiIsImFzc2lnbiIsImNvcHlBcGlPYmplY3QiLCJyYW5nZSIsInRocm93VmVyc2lvbkVycm9yIiwidmVyc2lvbiIsInByb3RvIiwidGVzdCIsImdldFByb3RvdHlwZU9mIiwiaGFzIiwib2JqIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwiRXJyb3IiLCJsaW1pdCIsInN0YWNrVHJhY2VMaW1pdCIsImVyciIsInNsaWNlIiwiY29kZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLEVBQUFBLEtBQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLE9BQVIsR0FBa0JBLE9BQWxCOztBQUVBLFNBQVNBLE9BQVQsQ0FBaUJDLE9BQWpCLEVBQTBCO0FBQ3hCLFNBQU8sQ0FBQ0MsR0FBRCxFQUFNQyxPQUFOLEVBQWVDLE9BQWYsS0FBMkI7QUFDaEMsUUFBSSxDQUFDRixHQUFHLENBQUNHLGFBQVQsRUFBd0I7QUFDdEJILE1BQUFBLEdBQUcsR0FBR04sTUFBTSxDQUFDVSxNQUFQLENBQWNDLGFBQWEsQ0FBQ0wsR0FBRCxDQUEzQixFQUFrQztBQUN0Q0csUUFBQUEsYUFBYSxDQUFDRyxLQUFELEVBQVE7QUFDbkJDLFVBQUFBLGlCQUFpQixDQUFDRCxLQUFELEVBQVFOLEdBQUcsQ0FBQ1EsT0FBWixDQUFqQjtBQUNEOztBQUhxQyxPQUFsQyxDQUFOO0FBTUQ7O0FB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YmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWNsYXJlID0gZGVjbGFyZTtcblxuZnVuY3Rpb24gZGVjbGFyZShidWlsZGVyKSB7XG4gIHJldHVybiAoYXBpLCBvcHRpb25zLCBkaXJuYW1lKSA9PiB7XG4gICAgaWYgKCFhcGkuYXNzZXJ0VmVyc2lvbikge1xuICAgICAgYXBpID0gT2JqZWN0LmFzc2lnbihjb3B5QXBpT2JqZWN0KGFwaSksIHtcbiAgICAgICAgYXNzZXJ0VmVyc2lvbihyYW5nZSkge1xuICAgICAgICAgIHRocm93VmVyc2lvbkVycm9yKHJhbmdlLCBhcGkudmVyc2lvbik7XG4gICAgICAgIH1cblxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJ1aWxkZXIoYXBpLCBvcHRpb25zIHx8IHt9LCBkaXJuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY29weUFwaU9iamVjdChhcGkpIHtcbiAgbGV0IHByb3RvID0gbnVsbDtcblxuICBpZiAodHlwZW9mIGFwaS52ZXJzaW9uID09PSBcInN0cmluZ1wiICYmIC9eN1xcLi8udGVzdChhcGkudmVyc2lvbikpIHtcbiAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihhcGkpO1xuXG4gICAgaWYgKHByb3RvICYmICghaGFzKHByb3RvLCBcInZlcnNpb25cIikgfHwgIWhhcyhwcm90bywgXCJ0cmFuc2Zvcm1cIikgfHwgIWhhcyhwcm90bywgXCJ0ZW1wbGF0ZVwiKSB8fCAhaGFzKHByb3RvLCBcInR5cGVzXCIpKSkge1xuICAgICAgcHJvdG8gPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBwcm90bywgYXBpKTtcbn1cblxuZnVuY3Rpb24gaGFzKG9iaiwga2V5KSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpO1xufVxuXG5mdW5jdGlvbiB0aHJvd1ZlcnNpb25FcnJvcihyYW5nZSwgdmVyc2lvbikge1xuICBpZiAodHlwZW9mIHJhbmdlID09PSBcIm51bWJlclwiKSB7XG4gICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKHJhbmdlKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgc3RyaW5nIG9yIGludGVnZXIgdmFsdWUuXCIpO1xuICAgIH1cblxuICAgIHJhbmdlID0gYF4ke3JhbmdlfS4wLjAtMGA7XG4gIH1cblxuICBpZiAodHlwZW9mIHJhbmdlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgc3RyaW5nIG9yIGludGVnZXIgdmFsdWUuXCIpO1xuICB9XG5cbiAgY29uc3QgbGltaXQgPSBFcnJvci5zdGFja1RyYWNlTGltaXQ7XG5cbiAgaWYgKHR5cGVvZiBsaW1pdCA9PT0gXCJudW1iZXJcIiAmJiBsaW1pdCA8IDI1KSB7XG4gICAgRXJyb3Iuc3RhY2tUcmFjZUxpbWl0ID0gMjU7XG4gIH1cblxuICBsZXQgZXJyO1xuXG4gIGlmICh2ZXJzaW9uLnNsaWNlKDAsIDIpID09PSBcIjcuXCIpIHtcbiAgICBlcnIgPSBuZXcgRXJyb3IoYFJlcXVpcmVzIEJhYmVsIFwiXjcuMC4wLWJldGEuNDFcIiwgYnV0IHdhcyBsb2FkZWQgd2l0aCBcIiR7dmVyc2lvbn1cIi4gYCArIGBZb3UnbGwgbmVlZCB0byB1cGRhdGUgeW91ciBAYmFiZWwvY29yZSB2ZXJzaW9uLmApO1xuICB9IGVsc2Uge1xuICAgIGVyciA9IG5ldyBFcnJvcihgUmVxdWlyZXMgQmFiZWwgXCIke3JhbmdlfVwiLCBidXQgd2FzIGxvYWRlZCB3aXRoIFwiJHt2ZXJzaW9ufVwiLiBgICsgYElmIHlvdSBhcmUgc3VyZSB5b3UgaGF2ZSBhIGNvbXBhdGlibGUgdmVyc2lvbiBvZiBAYmFiZWwvY29yZSwgYCArIGBpdCBpcyBsaWtlbHkgdGhhdCBzb21ldGhpbmcgaW4geW91ciBidWlsZCBwcm9jZXNzIGlzIGxvYWRpbmcgdGhlIGAgKyBgd3JvbmcgdmVyc2lvbi4gSW5zcGVjdCB0aGUgc3RhY2sgdHJhY2Ugb2YgdGhpcyBlcnJvciB0byBsb29rIGZvciBgICsgYHRoZSBmaXJzdCBlbnRyeSB0aGF0IGRvZXNuJ3QgbWVudGlvbiBcIkBiYWJlbC9jb3JlXCIgb3IgXCJiYWJlbC1jb3JlXCIgYCArIGB0byBzZWUgd2hhdCBpcyBjYWxsaW5nIEJhYmVsLmApO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBsaW1pdCA9PT0gXCJudW1iZXJcIikge1xuICAgIEVycm9yLnN0YWNrVHJhY2VMaW1pdCA9IGxpbWl0O1xuICB9XG5cbiAgdGhyb3cgT2JqZWN0LmFzc2lnbihlcnIsIHtcbiAgICBjb2RlOiBcIkJBQkVMX1ZFUlNJT05fVU5TVVBQT1JURURcIixcbiAgICB2ZXJzaW9uLFxuICAgIHJhbmdlXG4gIH0pO1xufSJdfQ==