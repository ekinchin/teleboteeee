"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _helperExplodeAssignableExpression() {
  const data = _interopRequireDefault(require("@babel/helper-explode-assignable-expression"));

  _helperExplodeAssignableExpression = function () {
    return data;
  };

  return data;
}

function t() {
  const data = _interopRequireWildcard(require("@babel/types"));

  t = function () {
    return data;
  };

  return data;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};

    if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};

          if (desc.get || desc.set) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
    }

    newObj.default = obj;
    return newObj;
  }
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _default(opts) {
  const {
    build,
    operator
  } = opts;
  return {
    AssignmentExpression(path) {
      const {
        node,
        scope
      } = path;
      if (node.operator !== operator + "=") return;
      const nodes = [];
      const exploded = (0, _helperExplodeAssignableExpression().default)(node.left, nodes, this, scope);
      nodes.push(t().assignmentExpression("=", exploded.ref, build(exploded.uid, node.right)));
      path.replaceWith(t().sequenceExpression(nodes));
    },

    BinaryExpression(path) {
      const {
        node
      } = path;

      if (node.operator === operator) {
        path.replaceWith(build(node.left, node.right));
      }
    }

  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvaGVscGVyLWJ1aWxkZXItYmluYXJ5LWFzc2lnbm1lbnQtb3BlcmF0b3ItdmlzaXRvci9saWIvaW5kZXguanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0IiwiX2RlZmF1bHQiLCJfaGVscGVyRXhwbG9kZUFzc2lnbmFibGVFeHByZXNzaW9uIiwiZGF0YSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwidCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwib2JqIiwiX19lc01vZHVsZSIsIm5ld09iaiIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXQiLCJzZXQiLCJvcHRzIiwiYnVpbGQiLCJvcGVyYXRvciIsIkFzc2lnbm1lbnRFeHByZXNzaW9uIiwicGF0aCIsIm5vZGUiLCJzY29wZSIsIm5vZGVzIiwiZXhwbG9kZWQiLCJsZWZ0IiwicHVzaCIsImFzc2lnbm1lbnRFeHByZXNzaW9uIiwicmVmIiwidWlkIiwicmlnaHQiLCJyZXBsYWNlV2l0aCIsInNlcXVlbmNlRXhwcmVzc2lvbiIsIkJpbmFyeUV4cHJlc3Npb24iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0JDLE9BQXRCLEVBQStCLFlBQS9CLEVBQTZDO0FBQzNDQyxFQUFBQSxLQUFLLEVBQUU7QUFEb0MsQ0FBN0M7QUFHQUQsT0FBTyxDQUFDRSxPQUFSLEdBQWtCQyxRQUFsQjs7QUFFQSxTQUFTQyxrQ0FBVCxHQUE4QztBQUM1QyxRQUFNQyxJQUFJLEdBQUdDLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsNkNBQUQsQ0FBUixDQUFuQzs7QUFFQUgsRUFBQUEsa0NBQWtDLEdBQUcsWUFBWTtBQUMvQyxXQUFPQyxJQUFQO0FBQ0QsR0FGRDs7QUFJQSxTQUFPQSxJQUFQO0FBQ0Q7O0FBRUQsU0FBU0csQ0FBVCxHQUFhO0FBQ1gsUUFBTUgsSUFBSSxHQUFHSSx1QkFBdUIsQ0FBQ0YsT0FBTyxDQUFDLGNBQUQsQ0FBUixDQUFwQzs7QUFFQUMsRUFBQUEsQ0FBQyxHQUFHLFlBQVk7QUFDZCxXQUFPSCxJQUFQO0FBQ0QsR0FGRDs7QUFJQSxTQUFPQSxJQUFQO0FBQ0Q7O0FBRUQsU0FBU0ksdUJBQVQsQ0FBaUNDLEdBQWpDLEVBQXNDO0FBQUUsTUFBSUEsR0FBRyxJQUFJQSxHQUFHLENBQUNDLFVBQWYsRUFBMkI7QUFBRSxXQUFPRCxHQUFQO0FBQWEsR0FBMUMsTUFBZ0Q7QUFBRSxRQUFJRSxNQUFNLEdBQUcsRUFBYjs7QUFBaUIsUUFBSUYsR0FBRyxJQUFJLElBQVgsRUFBaUI7QUFBRSxXQUFLLElBQUlHLEdBQVQsSUFBZ0JILEdBQWhCLEVBQXFCO0FBQUUsWUFBSVosTUFBTSxDQUFDZ0IsU0FBUCxDQUFpQkMsY0FBakIsQ0FBZ0NDLElBQWhDLENBQXFDTixHQUFyQyxFQUEwQ0csR0FBMUMsQ0FBSixFQUFvRDtBQUFFLGNBQUlJLElBQUksR0FBR25CLE1BQU0sQ0FBQ0MsY0FBUCxJQUF5QkQsTUFBTSxDQUFDb0Isd0JBQWhDLEdBQTJEcEIsTUFBTSxDQUFDb0Isd0JBQVAsQ0FBZ0NSLEdBQWhDLEVBQXFDRyxHQUFyQyxDQUEzRCxHQUF1RyxFQUFsSDs7QUFBc0gsY0FBSUksSUFBSSxDQUFDRSxHQUFMLElBQVlGLElBQUksQ0FBQ0csR0FBckIsRUFBMEI7QUFBRXRCLFlBQUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQmEsTUFBdEIsRUFBOEJDLEdBQTlCLEVBQW1DSSxJQUFuQztBQUEyQyxXQUF2RSxNQUE2RTtBQUFFTCxZQUFBQSxNQUFNLENBQUNDLEdBQUQsQ0FBTixHQUFjSCxHQUFHLENBQUNHLEdBQUQsQ0FBakI7QUFBeUI7QUFBRTtBQUFFO0FBQUU7O0FBQUNELElBQUFBLE1BQU0sQ0FBQ1YsT0FBUCxHQUFpQlEsR0FBakI7QUFBc0IsV0FBT0UsTUFBUDtBQUFnQjtBQUFFOztBQUV4ZCxTQUFTTixzQkFBVCxDQUFnQ0ksR0FBaEMsRUFBcUM7QUFBRSxTQUFPQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsVUFBWCxHQUF3QkQsR0FBeEIsR0FBOEI7QUFBRVIsSUFBQUEsT0FBTyxFQUFFUTtBQUFYLEdBQXJDO0FBQXdEOztBQUUvRixTQUFTUCxRQUFULENBQWtCa0IsSUFBbEIsRUFBd0I7QUFDdEIsUUFBTTtBQUNKQyxJQUFBQSxLQURJO0FBRUpDLElBQUFBO0FBRkksTUFHRkYsSUFISjtBQUlBLFNBQU87QUFDTEcsSUFBQUEsb0JBQW9CLENBQUNDLElBQUQsRUFBTztBQUN6QixZQUFNO0FBQ0pDLFFBQUFBLElBREk7QUFFSkMsUUFBQUE7QUFGSSxVQUdGRixJQUhKO0FBSUEsVUFBSUMsSUFBSSxDQUFDSCxRQUFMLEtBQWtCQSxRQUFRLEdBQUcsR0FBakMsRUFBc0M7QUFDdEMsWUFBTUssS0FBSyxHQUFHLEVBQWQ7QUFDQSxZQUFNQyxRQUFRLEdBQUcsQ0FBQyxHQUFHekIsa0NBQWtDLEdBQUdGLE9BQXpDLEVBQWtEd0IsSUFBSSxDQUFDSSxJQUF2RCxFQUE2REYsS0FBN0QsRUFBb0UsSUFBcEUsRUFBMEVELEtBQTFFLENBQWpCO0FBQ0FDLE1BQUFBLEtBQUssQ0FBQ0csSUFBTixDQUFXdkIsQ0FBQyxHQUFHd0Isb0JBQUosQ0FBeUIsR0FBekIsRUFBOEJILFFBQVEsQ0FBQ0ksR0FBdkMsRUFBNENYLEtBQUssQ0FBQ08sUUFBUSxDQUFDSyxHQUFWLEVBQWVSLElBQUksQ0FBQ1MsS0FBcEIsQ0FBakQsQ0FBWDtBQUNBVixNQUFBQSxJQUFJLENBQUNXLFdBQUwsQ0FBaUI1QixDQUFDLEdBQUc2QixrQkFBSixDQUF1QlQsS0FBdkIsQ0FBakI7QUFDRCxLQVhJOztBQWFMVSxJQUFBQSxnQkFBZ0IsQ0FBQ2IsSUFBRCxFQUFPO0FBQ3JCLFlBQU07QUFDSkMsUUFBQUE7QUFESSxVQUVGRCxJQUZKOztBQUlBLFVBQUlDLElBQUksQ0FBQ0gsUUFBTCxLQUFrQkEsUUFBdEIsRUFBZ0M7QUFDOUJFLFFBQUFBLElBQUksQ0FBQ1csV0FBTCxDQUFpQmQsS0FBSyxDQUFDSSxJQUFJLENBQUNJLElBQU4sRUFBWUosSUFBSSxDQUFDUyxLQUFqQixDQUF0QjtBQUNEO0FBQ0Y7O0FBckJJLEdBQVA7QUF3QkQiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xuXG5mdW5jdGlvbiBfaGVscGVyRXhwbG9kZUFzc2lnbmFibGVFeHByZXNzaW9uKCkge1xuICBjb25zdCBkYXRhID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGJhYmVsL2hlbHBlci1leHBsb2RlLWFzc2lnbmFibGUtZXhwcmVzc2lvblwiKSk7XG5cbiAgX2hlbHBlckV4cGxvZGVBc3NpZ25hYmxlRXhwcmVzc2lvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gdCgpIHtcbiAgY29uc3QgZGF0YSA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJAYmFiZWwvdHlwZXNcIikpO1xuXG4gIHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDoge307IGlmIChkZXNjLmdldCB8fCBkZXNjLnNldCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyByZXR1cm4gbmV3T2JqOyB9IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2RlZmF1bHQob3B0cykge1xuICBjb25zdCB7XG4gICAgYnVpbGQsXG4gICAgb3BlcmF0b3JcbiAgfSA9IG9wdHM7XG4gIHJldHVybiB7XG4gICAgQXNzaWdubWVudEV4cHJlc3Npb24ocGF0aCkge1xuICAgICAgY29uc3Qge1xuICAgICAgICBub2RlLFxuICAgICAgICBzY29wZVxuICAgICAgfSA9IHBhdGg7XG4gICAgICBpZiAobm9kZS5vcGVyYXRvciAhPT0gb3BlcmF0b3IgKyBcIj1cIikgcmV0dXJuO1xuICAgICAgY29uc3Qgbm9kZXMgPSBbXTtcbiAgICAgIGNvbnN0IGV4cGxvZGVkID0gKDAsIF9oZWxwZXJFeHBsb2RlQXNzaWduYWJsZUV4cHJlc3Npb24oKS5kZWZhdWx0KShub2RlLmxlZnQsIG5vZGVzLCB0aGlzLCBzY29wZSk7XG4gICAgICBub2Rlcy5wdXNoKHQoKS5hc3NpZ25tZW50RXhwcmVzc2lvbihcIj1cIiwgZXhwbG9kZWQucmVmLCBidWlsZChleHBsb2RlZC51aWQsIG5vZGUucmlnaHQpKSk7XG4gICAgICBwYXRoLnJlcGxhY2VXaXRoKHQoKS5zZXF1ZW5jZUV4cHJlc3Npb24obm9kZXMpKTtcbiAgICB9LFxuXG4gICAgQmluYXJ5RXhwcmVzc2lvbihwYXRoKSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIG5vZGVcbiAgICAgIH0gPSBwYXRoO1xuXG4gICAgICBpZiAobm9kZS5vcGVyYXRvciA9PT0gb3BlcmF0b3IpIHtcbiAgICAgICAgcGF0aC5yZXBsYWNlV2l0aChidWlsZChub2RlLmxlZnQsIG5vZGUucmlnaHQpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgfTtcbn0iXX0=