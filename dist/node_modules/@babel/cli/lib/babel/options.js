"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = parseArgv;

function _fs() {
  const data = _interopRequireDefault(require("fs"));

  _fs = function () {
    return data;
  };

  return data;
}

function _commander() {
  const data = _interopRequireDefault(require("commander"));

  _commander = function () {
    return data;
  };

  return data;
}

function _core() {
  const data = require("@babel/core");

  _core = function () {
    return data;
  };

  return data;
}

function _uniq() {
  const data = _interopRequireDefault(require("lodash/uniq"));

  _uniq = function () {
    return data;
  };

  return data;
}

function _glob() {
  const data = _interopRequireDefault(require("glob"));

  _glob = function () {
    return data;
  };

  return data;
}

var _package = _interopRequireDefault(require("../../package.json"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

_commander().default.option("-f, --filename [filename]", "filename to use when reading from stdin - this will be used in source-maps, errors etc");

_commander().default.option("--presets [list]", "comma-separated list of preset names", collect);

_commander().default.option("--plugins [list]", "comma-separated list of plugin names", collect);

_commander().default.option("--config-file [path]", "Path a to .babelrc file to use");

_commander().default.option("--env-name [name]", "The name of the 'env' to use when loading configs and plugins. " + "Defaults to the value of BABEL_ENV, or else NODE_ENV, or else 'development'.");

_commander().default.option("--root-mode [mode]", "The project-root resolution mode. " + "One of 'root' (the default), 'upward', or 'upward-optional'.");

_commander().default.option("--source-type [script|module]", "");

_commander().default.option("--no-babelrc", "Whether or not to look up .babelrc and .babelignore files");

_commander().default.option("--ignore [list]", "list of glob paths to **not** compile", collect);

_commander().default.option("--only [list]", "list of glob paths to **only** compile", collect);

_commander().default.option("--no-highlight-code", "enable/disable ANSI syntax highlighting of code frames (on by default)");

_commander().default.option("--no-comments", "write comments to generated output (true by default)");

_commander().default.option("--retain-lines", "retain line numbers - will result in really ugly code");

_commander().default.option("--compact [true|false|auto]", "do not include superfluous whitespace characters and line terminators", booleanify);

_commander().default.option("--minified", "save as much bytes when printing [true|false]");

_commander().default.option("--auxiliary-comment-before [string]", "print a comment before any injected non-user code");

_commander().default.option("--auxiliary-comment-after [string]", "print a comment after any injected non-user code");

_commander().default.option("-s, --source-maps [true|false|inline|both]", "", booleanify);

_commander().default.option("--source-map-target [string]", "set `file` on returned source map");

_commander().default.option("--source-file-name [string]", "set `sources[0]` on returned source map");

_commander().default.option("--source-root [filename]", "the root from which all sources are relative");

_commander().default.option("--module-root [filename]", "optional prefix for the AMD module formatter that will be prepend to the filename on module definitions");

_commander().default.option("-M, --module-ids", "insert an explicit id for modules");

_commander().default.option("--module-id [string]", "specify a custom name for module ids");

_commander().default.option("-x, --extensions [extensions]", "List of extensions to compile when a directory has been input [.es6,.js,.es,.jsx,.mjs]", collect);

_commander().default.option("--keep-file-extension", "Preserve the file extensions of the input files");

_commander().default.option("-w, --watch", "Recompile files on changes");

_commander().default.option("--skip-initial-build", "Do not compile files before watching");

_commander().default.option("-o, --out-file [out]", "Compile all input files into a single file");

_commander().default.option("-d, --out-dir [out]", "Compile an input directory of modules into an output directory");

_commander().default.option("--relative", "Compile into an output directory relative to input directory or file. Requires --out-dir [out]");

_commander().default.option("-D, --copy-files", "When compiling a directory copy over non-compilable files");

_commander().default.option("--include-dotfiles", "Include dotfiles when compiling and copying non-compilable files");

_commander().default.option("--verbose", "Log everything");

_commander().default.option("--delete-dir-on-start", "Delete the out directory before compilation");

_commander().default.version(_package.default.version + " (@babel/core " + _core().version + ")");

_commander().default.usage("[options] <files ...>");

function parseArgv(args) {
  _commander().default.parse(args);

  const errors = [];

  let filenames = _commander().default.args.reduce(function (globbed, input) {
    let files = _glob().default.sync(input);

    if (!files.length) files = [input];
    return globbed.concat(files);
  }, []);

  filenames = (0, _uniq().default)(filenames);
  filenames.forEach(function (filename) {
    if (!_fs().default.existsSync(filename)) {
      errors.push(filename + " does not exist");
    }
  });

  if (_commander().default.outDir && !filenames.length) {
    errors.push("--out-dir requires filenames");
  }

  if (_commander().default.outFile && _commander().default.outDir) {
    errors.push("--out-file and --out-dir cannot be used together");
  }

  if (_commander().default.relative && !_commander().default.outDir) {
    errors.push("--relative requires --out-dir usage");
  }

  if (_commander().default.watch) {
    if (!_commander().default.outFile && !_commander().default.outDir) {
      errors.push("--watch requires --out-file or --out-dir");
    }

    if (!filenames.length) {
      errors.push("--watch requires filenames");
    }
  }

  if (_commander().default.skipInitialBuild && !_commander().default.watch) {
    errors.push("--skip-initial-build requires --watch");
  }

  if (_commander().default.deleteDirOnStart && !_commander().default.outDir) {
    errors.push("--delete-dir-on-start requires --out-dir");
  }

  if (!_commander().default.outDir && filenames.length === 0 && typeof _commander().default.filename !== "string" && _commander().default.babelrc !== false) {
    errors.push("stdin compilation requires either -f/--filename [filename] or --no-babelrc");
  }

  if (errors.length) {
    console.error("babel:");
    errors.forEach(function (e) {
      console.error("  " + e);
    });
    process.exit(2);
  }

  const opts = _commander().default.opts();

  const babelOptions = {
    presets: opts.presets,
    plugins: opts.plugins,
    rootMode: opts.rootMode,
    configFile: opts.configFile,
    envName: opts.envName,
    sourceType: opts.sourceType,
    ignore: opts.ignore,
    only: opts.only,
    retainLines: opts.retainLines,
    compact: opts.compact,
    minified: opts.minified,
    auxiliaryCommentBefore: opts.auxiliaryCommentBefore,
    auxiliaryCommentAfter: opts.auxiliaryCommentAfter,
    sourceMaps: opts.sourceMaps,
    sourceFileName: opts.sourceFileName,
    sourceRoot: opts.sourceRoot,
    moduleRoot: opts.moduleRoot,
    moduleIds: opts.moduleIds,
    moduleId: opts.moduleId,
    babelrc: opts.babelrc === true ? undefined : opts.babelrc,
    highlightCode: opts.highlightCode === true ? undefined : opts.highlightCode,
    comments: opts.comments === true ? undefined : opts.comments
  };

  for (const key of Object.keys(babelOptions)) {
    if (babelOptions[key] === undefined) {
      delete babelOptions[key];
    }
  }

  return {
    babelOptions,
    cliOptions: {
      filename: opts.filename,
      filenames,
      extensions: opts.extensions,
      keepFileExtension: opts.keepFileExtension,
      watch: opts.watch,
      skipInitialBuild: opts.skipInitialBuild,
      outFile: opts.outFile,
      outDir: opts.outDir,
      relative: opts.relative,
      copyFiles: opts.copyFiles,
      includeDotfiles: opts.includeDotfiles,
      verbose: opts.verbose,
      deleteDirOnStart: opts.deleteDirOnStart,
      sourceMapTarget: opts.sourceMapTarget
    }
  };
}

function booleanify(val) {
  if (val === "true" || val == 1) {
    return true;
  }

  if (val === "false" || val == 0 || !val) {
    return false;
  }

  return val;
}

function collect(value, previousValue) {
  if (typeof value !== "string") return previousValue;
  const values = value.split(",");
  return previousValue ? previousValue.concat(values) : values;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvY2xpL2xpYi9iYWJlbC9vcHRpb25zLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsInBhcnNlQXJndiIsIl9mcyIsImRhdGEiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9jb21tYW5kZXIiLCJfY29yZSIsIl91bmlxIiwiX2dsb2IiLCJfcGFja2FnZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJvcHRpb24iLCJjb2xsZWN0IiwiYm9vbGVhbmlmeSIsInZlcnNpb24iLCJ1c2FnZSIsImFyZ3MiLCJwYXJzZSIsImVycm9ycyIsImZpbGVuYW1lcyIsInJlZHVjZSIsImdsb2JiZWQiLCJpbnB1dCIsImZpbGVzIiwic3luYyIsImxlbmd0aCIsImNvbmNhdCIsImZvckVhY2giLCJmaWxlbmFtZSIsImV4aXN0c1N5bmMiLCJwdXNoIiwib3V0RGlyIiwib3V0RmlsZSIsInJlbGF0aXZlIiwid2F0Y2giLCJza2lwSW5pdGlhbEJ1aWxkIiwiZGVsZXRlRGlyT25TdGFydCIsImJhYmVscmMiLCJjb25zb2xlIiwiZXJyb3IiLCJlIiwicHJvY2VzcyIsImV4aXQiLCJvcHRzIiwiYmFiZWxPcHRpb25zIiwicHJlc2V0cyIsInBsdWdpbnMiLCJyb290TW9kZSIsImNvbmZpZ0ZpbGUiLCJlbnZOYW1lIiwic291cmNlVHlwZSIsImlnbm9yZSIsIm9ubHkiLCJyZXRhaW5MaW5lcyIsImNvbXBhY3QiLCJtaW5pZmllZCIsImF1eGlsaWFyeUNvbW1lbnRCZWZvcmUiLCJhdXhpbGlhcnlDb21tZW50QWZ0ZXIiLCJzb3VyY2VNYXBzIiwic291cmNlRmlsZU5hbWUiLCJzb3VyY2VSb290IiwibW9kdWxlUm9vdCIsIm1vZHVsZUlkcyIsIm1vZHVsZUlkIiwidW5kZWZpbmVkIiwiaGlnaGxpZ2h0Q29kZSIsImNvbW1lbnRzIiwia2V5Iiwia2V5cyIsImNsaU9wdGlvbnMiLCJleHRlbnNpb25zIiwia2VlcEZpbGVFeHRlbnNpb24iLCJjb3B5RmlsZXMiLCJpbmNsdWRlRG90ZmlsZXMiLCJ2ZXJib3NlIiwic291cmNlTWFwVGFyZ2V0IiwidmFsIiwicHJldmlvdXNWYWx1ZSIsInZhbHVlcyIsInNwbGl0Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsRUFBQUEsS0FBSyxFQUFFO0FBRG9DLENBQTdDO0FBR0FELE9BQU8sQ0FBQ0UsT0FBUixHQUFrQkMsU0FBbEI7O0FBRUEsU0FBU0MsR0FBVCxHQUFlO0FBQ2IsUUFBTUMsSUFBSSxHQUFHQyxzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLElBQUQsQ0FBUixDQUFuQzs7QUFFQUgsRUFBQUEsR0FBRyxHQUFHLFlBQVk7QUFDaEIsV0FBT0MsSUFBUDtBQUNELEdBRkQ7O0FBSUEsU0FBT0EsSUFBUDtBQUNEOztBQUVELFNBQVNHLFVBQVQsR0FBc0I7QUFDcEIsUUFBTUgsSUFBSSxHQUFHQyxzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLFdBQUQsQ0FBUixDQUFuQzs7QUFFQUMsRUFBQUEsVUFBVSxHQUFHLFlBQVk7QUFDdkIsV0FBT0gsSUFBUDtBQUNELEdBRkQ7O0FBSUEsU0FBT0EsSUFBUDtBQUNEOztBQUVELFNBQVNJLEtBQVQsR0FBaUI7QUFDZixRQUFNSixJQUFJLEdBQUdFLE9BQU8sQ0FBQyxhQUFELENBQXBCOztBQUVBRSxFQUFBQSxLQUFLLEdBQUcsWUFBWTtBQUNsQixXQUFPSixJQUFQO0FBQ0QsR0FGRDs7QUFJQSxTQUFPQSxJQUFQO0FBQ0Q7O0FBRUQsU0FBU0ssS0FBVCxHQUFpQjtBQUNmLFFBQU1MLElBQUksR0FBR0Msc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxhQUFELENBQVIsQ0FBbkM7O0FBRUFHLEVBQUFBLEtBQUssR0FBRyxZQUFZO0FBQ2xCLFdBQU9MLElBQVA7QUFDRCxHQUZE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UDtBQUMvQixRQUFNQyxNQUFNLEdBQUdqRixLQUFLLENBQUNrRixLQUFOLENBQVksR0FBWixDQUFmO0FBQ0EsU0FBT0YsYUFBYSxHQUFHQSxhQUFhLENBQUNuRCxNQUFkLENBQXFCb0QsTUFBckIsQ0FBSCxHQUFrQ0EsTUFBdEQ7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gcGFyc2VBcmd2O1xuXG5mdW5jdGlvbiBfZnMoKSB7XG4gIGNvbnN0IGRhdGEgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJmc1wiKSk7XG5cbiAgX2ZzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkYXRhO1xuICB9O1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBfY29tbWFuZGVyKCkge1xuICBjb25zdCBkYXRhID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY29tbWFuZGVyXCIpKTtcblxuICBfY29tbWFuZGVyID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkYXRhO1xuICB9O1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBfY29yZSgpIHtcbiAgY29uc3QgZGF0YSA9IHJlcXVpcmUoXCJAYmFiZWwvY29yZVwiKTtcblxuICBfY29yZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gX3VuaXEoKSB7XG4gIGNvbnN0IGRhdGEgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJsb2Rhc2gvdW5pcVwiKSk7XG5cbiAgX3VuaXEgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIF9nbG9iKCkge1xuICBjb25zdCBkYXRhID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZ2xvYlwiKSk7XG5cbiAgX2dsb2IgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbnZhciBfcGFja2FnZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uLy4uL3BhY2thZ2UuanNvblwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbl9jb21tYW5kZXIoKS5kZWZhdWx0Lm9wdGlvbihcIi1mLCAtLWZpbGVuYW1lIFtmaWxlbmFtZV1cIiwgXCJmaWxlbmFtZSB0byB1c2Ugd2hlbiByZWFkaW5nIGZyb20gc3RkaW4gLSB0aGlzIHdpbGwgYmUgdXNlZCBpbiBzb3VyY2UtbWFwcywgZXJyb3JzIGV0Y1wiKTtcblxuX2NvbW1hbmRlcigpLmRlZmF1bHQub3B0aW9uKFwiLS1wcmVzZXRzIFtsaXN0XVwiLCBcImNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIHByZXNldCBuYW1lc1wiLCBjb2xsZWN0KTtcblxuX2NvbW1hbmRlcigpLmRlZmF1bHQub3B0aW9uKFwiLS1wbHVnaW5zIFtsaXN0XVwiLCBcImNvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIHBsdWdpbiBuYW1lc1wiLCBjb2xsZWN0KTtcblxuX2NvbW1hbmRlcigpLmRlZmF1bHQub3B0aW9uKFwiLS1jb25maWctZmlsZSBbcGF0aF1cIiwgXCJQYXRoIGEgdG8gLmJhYmVscmMgZmlsZSB0byB1c2VcIik7XG5cbl9jb21tYW5kZXIoKS5kZWZhdWx0Lm9wdGlvbihcIi0tZW52LW5hbWUgW25hbWVdXCIsIFwiVGhlIG5hbWUgb2YgdGhlICdlbnYnIHRvIHVzZSB3aGVuIGxvYWRpbmcgY29uZmlncyBhbmQgcGx1Z2lucy4gXCIgKyBcIkRlZmF1bHRzIHRvIHRoZSB2YWx1ZSBvZiBCQUJFTF9FTlYsIG9yIGVsc2UgTk9ERV9FTlYsIG9yIGVsc2UgJ2RldmVsb3BtZW50Jy5cIik7XG5cbl9jb21tYW5kZXIoKS5kZWZhdWx0Lm9wdGlvbihcIi0tcm9vdC1tb2RlIFttb2RlXVwiLCBcIlRoZSBwcm9qZWN0LXJvb3QgcmVzb2x1dGlvbiBtb2RlLiBcIiArIFwiT25lIG9mICdyb290JyAodGhlIGRlZmF1bHQpLCAndXB3YXJkJywgb3IgJ3Vwd2FyZC1vcHRpb25hbCcuXCIpO1xuXG5fY29tbWFuZGVyKCkuZGVmYXVsdC5vcHRpb24oXCItLXNvdXJjZS10eXBlIFtzY3JpcHR8bW9kdWxlXVwiLCBcIlwiKTtcblxuX2NvbW1hbmRlcigpLmRlZmF1bHQub3B0aW9uKFwiLS1uby1iYWJlbHJjXCIsIFwiV2hldGhlciBvciBub3QgdG8gbG9vayB1cCAuYmFiZWxyYyBhbmQgLmJhYmVsaWdub3JlIGZpbGVzXCIpO1xuXG5fY29tbWFuZGVyKCkuZGVmYXVsdC5vcHRpb24oXCItLWlnbm9yZSBbbGlzdF1cIiwgXCJsaXN0IG9mIGdsb2IgcGF0aHMgdG8gKipub3QqKiBjb21waWxlXCIsIGNvbGxlY3QpO1xuXG5fY29tbWFuZGVyKCkuZGVmYXVsdC5vcHRpb24oXCItLW9ubHkgW2xpc3RdXCIsIFwibGlzdCBvZiBnbG9iIHBhdGhzIHRvICoqb25seSoqIGNvbXBpbGVcIiwgY29sbGVjdCk7XG5cbl9jb21tYW5kZXIoKS5kZWZhdWx0Lm9wdGlvbihcIi0tbm8taGlnaGxpZ2h0LWNvZGVcIiwgXCJlbmFibGUvZGlzYWJsZSBBTlNJIHN5bnRheCBoaWdobGlnaHRpbmcgb2YgY29kZSBmcmFtZXMgKG9uIGJ5IGRlZmF1bHQpXCIpO1xuXG5fY29tbWFuZGVyKCkuZGVmYXVsdC5vcHRpb24oXCItLW5vLWNvbW1lbnRzXCIsIFwid3JpdGUgY29tbWVudHMgdG8gZ2VuZXJhdGVkIG91dHB1dCAodHJ1ZSBieSBkZWZhdWx0KVwiKTtcblxuX2NvbW1hbmRlcigpLmRlZmF1bHQub3B0aW9uKFwiLS1yZXRhaW4tbGluZXNcIiwgXCJyZXRhaW4gbGluZSBudW1iZXJzIC0gd2lsbCByZXN1bHQgaW4gcmVhbGx5IHVnbHkgY29kZVwiKTtcblxuX2NvbW1hbmRlcigpLmRlZmF1bHQub3B0aW9uKFwiLS1jb21wYWN0IFt0cnVlfGZhbHNlfGF1dG9dXCIsIFwiZG8gbm90IGluY2x1ZGUgc3VwZXJmbHVvdXMgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzIGFuZCBsaW5lIHRlcm1pbmF0b3JzXCIsIGJvb2xlYW5pZnkpO1xuXG5fY29tbWFuZGVyKCkuZGVmYXVsdC5vcHRpb24oXCItLW1pbmlmaWVkXCIsIFwic2F2ZSBhcyBtdWNoIGJ5dGVzIHdoZW4gcHJpbnRpbmcgW3RydWV8ZmFsc2VdXCIpO1xuXG5fY29tbWFuZGVyKCkuZGVmYXVsdC5vcHRpb24oXCItLWF1eGlsaWFyeS1jb21tZW50LWJlZm9yZSBbc3RyaW5nXVwiLCBcInByaW50IGEgY29tbWVudCBiZWZvcmUgYW55IGluamVjdGVkIG5vbi11c2VyIGNvZGVcIik7XG5cbl9jb21tYW5kZXIoKS5kZWZhdWx0Lm9wdGlvbihcIi0tYXV4aWxpYXJ5LWNvbW1lbnQtYWZ0ZXIgW3N0cmluZ11cIiwgXCJwcmludCBhIGNvbW1lbnQgYWZ0ZXIgYW55IGluamVjdGVkIG5vbi11c2VyIGNvZGVcIik7XG5cbl9jb21tYW5kZXIoKS5kZWZhdWx0Lm9wdGlvbihcIi1zLCAtLXNvdXJjZS1tYXBzIFt0cnVlfGZhbHNlfGlubGluZXxib3RoXVwiLCBcIlwiLCBib29sZWFuaWZ5KTtcblxuX2NvbW1hbmRlcigpLmRlZmF1bHQub3B0aW9uKFwiLS1zb3VyY2UtbWFwLXRhcmdldCBbc3RyaW5nXVwiLCBcInNldCBgZmlsZWAgb24gcmV0dXJuZWQgc291cmNlIG1hcFwiKTtcblxuX2NvbW1hbmRlcigpLmRlZmF1bHQub3B0aW9uKFwiLS1zb3VyY2UtZmlsZS1uYW1lIFtzdHJpbmddXCIsIFwic2V0IGBzb3VyY2VzWzBdYCBvbiByZXR1cm5lZCBzb3VyY2UgbWFwXCIpO1xuXG5fY29tbWFuZGVyKCkuZGVmYXVsdC5vcHRpb24oXCItLXNvdXJjZS1yb290IFtmaWxlbmFtZV1cIiwgXCJ0aGUgcm9vdCBmcm9tIHdoaWNoIGFsbCBzb3VyY2VzIGFyZSByZWxhdGl2ZVwiKTtcblxuX2NvbW1hbmRlcigpLmRlZmF1bHQub3B0aW9uKFwiLS1tb2R1bGUtcm9vdCBbZmlsZW5hbWVdXCIsIFwib3B0aW9uYWwgcHJlZml4IGZvciB0aGUgQU1EIG1vZHVsZSBmb3JtYXR0ZXIgdGhhdCB3aWxsIGJlIHByZXBlbmQgdG8gdGhlIGZpbGVuYW1lIG9uIG1vZHVsZSBkZWZpbml0aW9uc1wiKTtcblxuX2NvbW1hbmRlcigpLmRlZmF1bHQub3B0aW9uKFwiLU0sIC0tbW9kdWxlLWlkc1wiLCBcImluc2VydCBhbiBleHBsaWNpdCBpZCBmb3IgbW9kdWxlc1wiKTtcblxuX2NvbW1hbmRlcigpLmRlZmF1bHQub3B0aW9uKFwiLS1tb2R1bGUtaWQgW3N0cmluZ11cIiwgXCJzcGVjaWZ5IGEgY3VzdG9tIG5hbWUgZm9yIG1vZHVsZSBpZHNcIik7XG5cbl9jb21tYW5kZXIoKS5kZWZhdWx0Lm9wdGlvbihcIi14LCAtLWV4dGVuc2lvbnMgW2V4dGVuc2lvbnNdXCIsIFwiTGlzdCBvZiBleHRlbnNpb25zIHRvIGNvbXBpbGUgd2hlbiBhIGRpcmVjdG9yeSBoYXMgYmVlbiBpbnB1dCBbLmVzNiwuanMsLmVzLC5qc3gsLm1qc11cIiwgY29sbGVjdCk7XG5cbl9jb21tYW5kZXIoKS5kZWZhdWx0Lm9wdGlvbihcIi0ta2VlcC1maWxlLWV4dGVuc2lvblwiLCBcIlByZXNlcnZlIHRoZSBmaWxlIGV4dGVuc2lvbnMgb2YgdGhlIGlucHV0IGZpbGVzXCIpO1xuXG5fY29tbWFuZGVyKCkuZGVmYXVsdC5vcHRpb24oXCItdywgLS13YXRjaFwiLCBcIlJlY29tcGlsZSBmaWxlcyBvbiBjaGFuZ2VzXCIpO1xuXG5fY29tbWFuZGVyKCkuZGVmYXVsdC5vcHRpb24oXCItLXNraXAtaW5pdGlhbC1idWlsZFwiLCBcIkRvIG5vdCBjb21waWxlIGZpbGVzIGJlZm9yZSB3YXRjaGluZ1wiKTtcblxuX2NvbW1hbmRlcigpLmRlZmF1bHQub3B0aW9uKFwiLW8sIC0tb3V0LWZpbGUgW291dF1cIiwgXCJDb21waWxlIGFsbCBpbnB1dCBmaWxlcyBpbnRvIGEgc2luZ2xlIGZpbGVcIik7XG5cbl9jb21tYW5kZXIoKS5kZWZhdWx0Lm9wdGlvbihcIi1kLCAtLW91dC1kaXIgW291dF1cIiwgXCJDb21waWxlIGFuIGlucHV0IGRpcmVjdG9yeSBvZiBtb2R1bGVzIGludG8gYW4gb3V0cHV0IGRpcmVjdG9yeVwiKTtcblxuX2NvbW1hbmRlcigpLmRlZmF1bHQub3B0aW9uKFwiLS1yZWxhdGl2ZVwiLCBcIkNvbXBpbGUgaW50byBhbiBvdXRwdXQgZGlyZWN0b3J5IHJlbGF0aXZlIHRvIGlucHV0IGRpcmVjdG9yeSBvciBmaWxlLiBSZXF1aXJlcyAtLW91dC1kaXIgW291dF1cIik7XG5cbl9jb21tYW5kZXIoKS5kZWZhdWx0Lm9wdGlvbihcIi1ELCAtLWNvcHktZmlsZXNcIiwgXCJXaGVuIGNvbXBpbGluZyBhIGRpcmVjdG9yeSBjb3B5IG92ZXIgbm9uLWNvbXBpbGFibGUgZmlsZXNcIik7XG5cbl9jb21tYW5kZXIoKS5kZWZhdWx0Lm9wdGlvbihcIi0taW5jbHVkZS1kb3RmaWxlc1wiLCBcIkluY2x1ZGUgZG90ZmlsZXMgd2hlbiBjb21waWxpbmcgYW5kIGNvcHlpbmcgbm9uLWNvbXBpbGFibGUgZmlsZXNcIik7XG5cbl9jb21tYW5kZXIoKS5kZWZhdWx0Lm9wdGlvbihcIi0tdmVyYm9zZVwiLCBcIkxvZyBldmVyeXRoaW5nXCIpO1xuXG5fY29tbWFuZGVyKCkuZGVmYXVsdC5vcHRpb24oXCItLWRlbGV0ZS1kaXItb24tc3RhcnRcIiwgXCJEZWxldGUgdGhlIG91dCBkaXJlY3RvcnkgYmVmb3JlIGNvbXBpbGF0aW9uXCIpO1xuXG5fY29tbWFuZGVyKCkuZGVmYXVsdC52ZXJzaW9uKF9wYWNrYWdlLmRlZmF1bHQudmVyc2lvbiArIFwiIChAYmFiZWwvY29yZSBcIiArIF9jb3JlKCkudmVyc2lvbiArIFwiKVwiKTtcblxuX2NvbW1hbmRlcigpLmRlZmF1bHQudXNhZ2UoXCJbb3B0aW9uc10gPGZpbGVzIC4uLj5cIik7XG5cbmZ1bmN0aW9uIHBhcnNlQXJndihhcmdzKSB7XG4gIF9jb21tYW5kZXIoKS5kZWZhdWx0LnBhcnNlKGFyZ3MpO1xuXG4gIGNvbnN0IGVycm9ycyA9IFtdO1xuXG4gIGxldCBmaWxlbmFtZXMgPSBfY29tbWFuZGVyKCkuZGVmYXVsdC5hcmdzLnJlZHVjZShmdW5jdGlvbiAoZ2xvYmJlZCwgaW5wdXQpIHtcbiAgICBsZXQgZmlsZXMgPSBfZ2xvYigpLmRlZmF1bHQuc3luYyhpbnB1dCk7XG5cbiAgICBpZiAoIWZpbGVzLmxlbmd0aCkgZmlsZXMgPSBbaW5wdXRdO1xuICAgIHJldHVybiBnbG9iYmVkLmNvbmNhdChmaWxlcyk7XG4gIH0sIFtdKTtcblxuICBmaWxlbmFtZXMgPSAoMCwgX3VuaXEoKS5kZWZhdWx0KShmaWxlbmFtZXMpO1xuICBmaWxlbmFtZXMuZm9yRWFjaChmdW5jdGlvbiAoZmlsZW5hbWUpIHtcbiAgICBpZiAoIV9mcygpLmRlZmF1bHQuZXhpc3RzU3luYyhmaWxlbmFtZSkpIHtcbiAgICAgIGVycm9ycy5wdXNoKGZpbGVuYW1lICsgXCIgZG9lcyBub3QgZXhpc3RcIik7XG4gICAgfVxuICB9KTtcblxuICBpZiAoX2NvbW1hbmRlcigpLmRlZmF1bHQub3V0RGlyICYmICFmaWxlbmFtZXMubGVuZ3RoKSB7XG4gICAgZXJyb3JzLnB1c2goXCItLW91dC1kaXIgcmVxdWlyZXMgZmlsZW5hbWVzXCIpO1xuICB9XG5cbiAgaWYgKF9jb21tYW5kZXIoKS5kZWZhdWx0Lm91dEZpbGUgJiYgX2NvbW1hbmRlcigpLmRlZmF1bHQub3V0RGlyKSB7XG4gICAgZXJyb3JzLnB1c2goXCItLW91dC1maWxlIGFuZCAtLW91dC1kaXIgY2Fubm90IGJlIHVzZWQgdG9nZXRoZXJcIik7XG4gIH1cblxuICBpZiAoX2NvbW1hbmRlcigpLmRlZmF1bHQucmVsYXRpdmUgJiYgIV9jb21tYW5kZXIoKS5kZWZhdWx0Lm91dERpcikge1xuICAgIGVycm9ycy5wdXNoKFwiLS1yZWxhdGl2ZSByZXF1aXJlcyAtLW91dC1kaXIgdXNhZ2VcIik7XG4gIH1cblxuICBpZiAoX2NvbW1hbmRlcigpLmRlZmF1bHQud2F0Y2gpIHtcbiAgICBpZiAoIV9jb21tYW5kZXIoKS5kZWZhdWx0Lm91dEZpbGUgJiYgIV9jb21tYW5kZXIoKS5kZWZhdWx0Lm91dERpcikge1xuICAgICAgZXJyb3JzLnB1c2goXCItLXdhdGNoIHJlcXVpcmVzIC0tb3V0LWZpbGUgb3IgLS1vdXQtZGlyXCIpO1xuICAgIH1cblxuICAgIGlmICghZmlsZW5hbWVzLmxlbmd0aCkge1xuICAgICAgZXJyb3JzLnB1c2goXCItLXdhdGNoIHJlcXVpcmVzIGZpbGVuYW1lc1wiKTtcbiAgICB9XG4gIH1cblxuICBpZiAoX2NvbW1hbmRlcigpLmRlZmF1bHQuc2tpcEluaXRpYWxCdWlsZCAmJiAhX2NvbW1hbmRlcigpLmRlZmF1bHQud2F0Y2gpIHtcbiAgICBlcnJvcnMucHVzaChcIi0tc2tpcC1pbml0aWFsLWJ1aWxkIHJlcXVpcmVzIC0td2F0Y2hcIik7XG4gIH1cblxuICBpZiAoX2NvbW1hbmRlcigpLmRlZmF1bHQuZGVsZXRlRGlyT25TdGFydCAmJiAhX2NvbW1hbmRlcigpLmRlZmF1bHQub3V0RGlyKSB7XG4gICAgZXJyb3JzLnB1c2goXCItLWRlbGV0ZS1kaXItb24tc3RhcnQgcmVxdWlyZXMgLS1vdXQtZGlyXCIpO1xuICB9XG5cbiAgaWYgKCFfY29tbWFuZGVyKCkuZGVmYXVsdC5vdXREaXIgJiYgZmlsZW5hbWVzLmxlbmd0aCA9PT0gMCAmJiB0eXBlb2YgX2NvbW1hbmRlcigpLmRlZmF1bHQuZmlsZW5hbWUgIT09IFwic3RyaW5nXCIgJiYgX2NvbW1hbmRlcigpLmRlZmF1bHQuYmFiZWxyYyAhPT0gZmFsc2UpIHtcbiAgICBlcnJvcnMucHVzaChcInN0ZGluIGNvbXBpbGF0aW9uIHJlcXVpcmVzIGVpdGhlciAtZi8tLWZpbGVuYW1lIFtmaWxlbmFtZV0gb3IgLS1uby1iYWJlbHJjXCIpO1xuICB9XG5cbiAgaWYgKGVycm9ycy5sZW5ndGgpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiYmFiZWw6XCIpO1xuICAgIGVycm9ycy5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiICBcIiArIGUpO1xuICAgIH0pO1xuICAgIHByb2Nlc3MuZXhpdCgyKTtcbiAgfVxuXG4gIGNvbnN0IG9wdHMgPSBfY29tbWFuZGVyKCkuZGVmYXVsdC5vcHRzKCk7XG5cbiAgY29uc3QgYmFiZWxPcHRpb25zID0ge1xuICAgIHByZXNldHM6IG9wdHMucHJlc2V0cyxcbiAgICBwbHVnaW5zOiBvcHRzLnBsdWdpbnMsXG4gICAgcm9vdE1vZGU6IG9wdHMucm9vdE1vZGUsXG4gICAgY29uZmlnRmlsZTogb3B0cy5jb25maWdGaWxlLFxuICAgIGVudk5hbWU6IG9wdHMuZW52TmFtZSxcbiAgICBzb3VyY2VUeXBlOiBvcHRzLnNvdXJjZVR5cGUsXG4gICAgaWdub3JlOiBvcHRzLmlnbm9yZSxcbiAgICBvbmx5OiBvcHRzLm9ubHksXG4gICAgcmV0YWluTGluZXM6IG9wdHMucmV0YWluTGluZXMsXG4gICAgY29tcGFjdDogb3B0cy5jb21wYWN0LFxuICAgIG1pbmlmaWVkOiBvcHRzLm1pbmlmaWVkLFxuICAgIGF1eGlsaWFyeUNvbW1lbnRCZWZvcmU6IG9wdHMuYXV4aWxpYXJ5Q29tbWVudEJlZm9yZSxcbiAgICBhdXhpbGlhcnlDb21tZW50QWZ0ZXI6IG9wdHMuYXV4aWxpYXJ5Q29tbWVudEFmdGVyLFxuICAgIHNvdXJjZU1hcHM6IG9wdHMuc291cmNlTWFwcyxcbiAgICBzb3VyY2VGaWxlTmFtZTogb3B0cy5zb3VyY2VGaWxlTmFtZSxcbiAgICBzb3VyY2VSb290OiBvcHRzLnNvdXJjZVJvb3QsXG4gICAgbW9kdWxlUm9vdDogb3B0cy5tb2R1bGVSb290LFxuICAgIG1vZHVsZUlkczogb3B0cy5tb2R1bGVJZHMsXG4gICAgbW9kdWxlSWQ6IG9wdHMubW9kdWxlSWQsXG4gICAgYmFiZWxyYzogb3B0cy5iYWJlbHJjID09PSB0cnVlID8gdW5kZWZpbmVkIDogb3B0cy5iYWJlbHJjLFxuICAgIGhpZ2hsaWdodENvZGU6IG9wdHMuaGlnaGxpZ2h0Q29kZSA9PT0gdHJ1ZSA/IHVuZGVmaW5lZCA6IG9wdHMuaGlnaGxpZ2h0Q29kZSxcbiAgICBjb21tZW50czogb3B0cy5jb21tZW50cyA9PT0gdHJ1ZSA/IHVuZGVmaW5lZCA6IG9wdHMuY29tbWVudHNcbiAgfTtcblxuICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhiYWJlbE9wdGlvbnMpKSB7XG4gICAgaWYgKGJhYmVsT3B0aW9uc1trZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGRlbGV0ZSBiYWJlbE9wdGlvbnNba2V5XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGJhYmVsT3B0aW9ucyxcbiAgICBjbGlPcHRpb25zOiB7XG4gICAgICBmaWxlbmFtZTogb3B0cy5maWxlbmFtZSxcbiAgICAgIGZpbGVuYW1lcyxcbiAgICAgIGV4dGVuc2lvbnM6IG9wdHMuZXh0ZW5zaW9ucyxcbiAgICAgIGtlZXBGaWxlRXh0ZW5zaW9uOiBvcHRzLmtlZXBGaWxlRXh0ZW5zaW9uLFxuICAgICAgd2F0Y2g6IG9wdHMud2F0Y2gsXG4gICAgICBza2lwSW5pdGlhbEJ1aWxkOiBvcHRzLnNraXBJbml0aWFsQnVpbGQsXG4gICAgICBvdXRGaWxlOiBvcHRzLm91dEZpbGUsXG4gICAgICBvdXREaXI6IG9wdHMub3V0RGlyLFxuICAgICAgcmVsYXRpdmU6IG9wdHMucmVsYXRpdmUsXG4gICAgICBjb3B5RmlsZXM6IG9wdHMuY29weUZpbGVzLFxuICAgICAgaW5jbHVkZURvdGZpbGVzOiBvcHRzLmluY2x1ZGVEb3RmaWxlcyxcbiAgICAgIHZlcmJvc2U6IG9wdHMudmVyYm9zZSxcbiAgICAgIGRlbGV0ZURpck9uU3RhcnQ6IG9wdHMuZGVsZXRlRGlyT25TdGFydCxcbiAgICAgIHNvdXJjZU1hcFRhcmdldDogb3B0cy5zb3VyY2VNYXBUYXJnZXRcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGJvb2xlYW5pZnkodmFsKSB7XG4gIGlmICh2YWwgPT09IFwidHJ1ZVwiIHx8IHZhbCA9PSAxKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodmFsID09PSBcImZhbHNlXCIgfHwgdmFsID09IDAgfHwgIXZhbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB2YWw7XG59XG5cbmZ1bmN0aW9uIGNvbGxlY3QodmFsdWUsIHByZXZpb3VzVmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJzdHJpbmdcIikgcmV0dXJuIHByZXZpb3VzVmFsdWU7XG4gIGNvbnN0IHZhbHVlcyA9IHZhbHVlLnNwbGl0KFwiLFwiKTtcbiAgcmV0dXJuIHByZXZpb3VzVmFsdWUgPyBwcmV2aW91c1ZhbHVlLmNvbmNhdCh2YWx1ZXMpIDogdmFsdWVzO1xufSJdfQ==