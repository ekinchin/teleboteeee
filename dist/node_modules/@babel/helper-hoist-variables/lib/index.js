"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function t() {
  const data = _interopRequireWildcard(require("@babel/types"));

  t = function () {
    return data;
  };

  return data;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};

    if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};

          if (desc.get || desc.set) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
    }

    newObj.default = obj;
    return newObj;
  }
}

const visitor = {
  Scope(path, state) {
    if (state.kind === "let") path.skip();
  },

  Function(path) {
    path.skip();
  },

  VariableDeclaration(path, state) {
    if (state.kind && path.node.kind !== state.kind) return;
    const nodes = [];
    const declarations = path.get("declarations");
    let firstId;

    for (const declar of declarations) {
      firstId = declar.node.id;

      if (declar.node.init) {
        nodes.push(t().expressionStatement(t().assignmentExpression("=", declar.node.id, declar.node.init)));
      }

      for (const name in declar.getBindingIdentifiers()) {
        state.emit(t().identifier(name), name, declar.node.init !== null);
      }
    }

    if (path.parentPath.isFor({
      left: path.node
    })) {
      path.replaceWith(firstId);
    } else {
      path.replaceWithMultiple(nodes);
    }
  }

};

function _default(path, emit, kind = "var") {
  path.traverse(visitor, {
    kind,
    emit
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYmFiZWwvaGVscGVyLWhvaXN0LXZhcmlhYmxlcy9saWIvaW5kZXguanMiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0IiwiX2RlZmF1bHQiLCJ0IiwiZGF0YSIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJuZXdPYmoiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0Iiwic2V0IiwidmlzaXRvciIsIlNjb3BlIiwicGF0aCIsInN0YXRlIiwia2luZCIsInNraXAiLCJGdW5jdGlvbiIsIlZhcmlhYmxlRGVjbGFyYXRpb24iLCJub2RlIiwibm9kZXMiLCJkZWNsYXJhdGlvbnMiLCJmaXJzdElkIiwiZGVjbGFyIiwiaWQiLCJpbml0IiwicHVzaCIsImV4cHJlc3Npb25TdGF0ZW1lbnQiLCJhc3NpZ25tZW50RXhwcmVzc2lvbiIsIm5hbWUiLCJnZXRCaW5kaW5nSWRlbnRpZmllcnMiLCJlbWl0IiwiaWRlbnRpZmllciIsInBhcmVudFBhdGgiLCJpc0ZvciIsImxlZnQiLCJyZXBsYWNlV2l0aCIsInJlcGxhY2VXaXRoTXVsdGlwbGUiLCJ0cmF2ZXJzZSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUFBLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkMsT0FBdEIsRUFBK0IsWUFBL0IsRUFBNkM7QUFDM0NDLEVBQUFBLEtBQUssRUFBRTtBQURvQyxDQUE3QztBQUdBRCxPQUFPLENBQUNFLE9BQVIsR0FBa0JDLFFBQWxCOztBQUVBLFNBQVNDLENBQVQsR0FBYTtBQUNYLFFBQU1DLElBQUksR0FBR0MsdUJBQXVCLENBQUNDLE9BQU8sQ0FBQyxjQUFELENBQVIsQ0FBcEM7O0FBRUFILEVBQUFBLENBQUMsR0FB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QUFDeEJDLE1BQUFBLElBQUksRUFBRXRCLElBQUksQ0FBQ007QUFEYSxLQUF0QixDQUFKLEVBRUk7QUFDRk4sTUFBQUEsSUFBSSxDQUFDdUIsV0FBTCxDQUFpQmQsT0FBakI7QUFDRCxLQUpELE1BSU87QUFDTFQsTUFBQUEsSUFBSSxDQUFDd0IsbUJBQUwsQ0FBeUJqQixLQUF6QjtBQUNEO0FBQ0Y7O0FBbENhLENBQWhCOztBQXNDQSxTQUFTekIsUUFBVCxDQUFrQmtCLElBQWxCLEVBQXdCa0IsSUFBeEIsRUFBOEJoQixJQUFJLEdBQUcsS0FBckMsRUFBNEM7QUFDMUNGLEVBQUFBLElBQUksQ0FBQ3lCLFFBQUwsQ0FBYzNCLE9BQWQsRUFBdUI7QUFDckJJLElBQUFBLElBRHFCO0FBRXJCZ0IsSUFBQUE7QUFGcUIsR0FBdkI7QUFJRCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5cbmZ1bmN0aW9uIHQoKSB7XG4gIGNvbnN0IGRhdGEgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiQGJhYmVsL3R5cGVzXCIpKTtcblxuICB0ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkYXRhO1xuICB9O1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IHt9OyBpZiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cbmNvbnN0IHZpc2l0b3IgPSB7XG4gIFNjb3BlKHBhdGgsIHN0YXRlKSB7XG4gICAgaWYgKHN0YXRlLmtpbmQgPT09IFwibGV0XCIpIHBhdGguc2tpcCgpO1xuICB9LFxuXG4gIEZ1bmN0aW9uKHBhdGgpIHtcbiAgICBwYXRoLnNraXAoKTtcbiAgfSxcblxuICBWYXJpYWJsZURlY2xhcmF0aW9uKHBhdGgsIHN0YXRlKSB7XG4gICAgaWYgKHN0YXRlLmtpbmQgJiYgcGF0aC5ub2RlLmtpbmQgIT09IHN0YXRlLmtpbmQpIHJldHVybjtcbiAgICBjb25zdCBub2RlcyA9IFtdO1xuICAgIGNvbnN0IGRlY2xhcmF0aW9ucyA9IHBhdGguZ2V0KFwiZGVjbGFyYXRpb25zXCIpO1xuICAgIGxldCBmaXJzdElkO1xuXG4gICAgZm9yIChjb25zdCBkZWNsYXIgb2YgZGVjbGFyYXRpb25zKSB7XG4gICAgICBmaXJzdElkID0gZGVjbGFyLm5vZGUuaWQ7XG5cbiAgICAgIGlmIChkZWNsYXIubm9kZS5pbml0KSB7XG4gICAgICAgIG5vZGVzLnB1c2godCgpLmV4cHJlc3Npb25TdGF0ZW1lbnQodCgpLmFzc2lnbm1lbnRFeHByZXNzaW9uKFwiPVwiLCBkZWNsYXIubm9kZS5pZCwgZGVjbGFyLm5vZGUuaW5pdCkpKTtcbiAgICAgIH1cblxuICAgICAgZm9yIChjb25zdCBuYW1lIGluIGRlY2xhci5nZXRCaW5kaW5nSWRlbnRpZmllcnMoKSkge1xuICAgICAgICBzdGF0ZS5lbWl0KHQoKS5pZGVudGlmaWVyKG5hbWUpLCBuYW1lLCBkZWNsYXIubm9kZS5pbml0ICE9PSBudWxsKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocGF0aC5wYXJlbnRQYXRoLmlzRm9yKHtcbiAgICAgIGxlZnQ6IHBhdGgubm9kZVxuICAgIH0pKSB7XG4gICAgICBwYXRoLnJlcGxhY2VXaXRoKGZpcnN0SWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXRoLnJlcGxhY2VXaXRoTXVsdGlwbGUobm9kZXMpO1xuICAgIH1cbiAgfVxuXG59O1xuXG5mdW5jdGlvbiBfZGVmYXVsdChwYXRoLCBlbWl0LCBraW5kID0gXCJ2YXJcIikge1xuICBwYXRoLnRyYXZlcnNlKHZpc2l0b3IsIHtcbiAgICBraW5kLFxuICAgIGVtaXRcbiAgfSk7XG59Il19